{"version":3,"sources":["components/generic/details/systemDetails/DetailConfigEditor.tsx","components/generic/details/systemDetails/SearchConfigEditor.tsx","components/generic/details/systemDetails/TileConfigEditor.tsx","components/generic/details/systemDetails/SystemEntityEditor.tsx","components/generic/details/SystemDetails.tsx"],"names":["DetailConfigEditor","entity","systemEntity","entities","icons","changeEntity","useState","Object","keys","detailConfig","selectedPart","changeSelectedPart","attrs","changeAttrs","useEffect","newAttributes","attributes","forEach","attr","push","label","value","baseAttrs","changeBaseAttrs","viewEntity","linkedBy","name","fieldsDisplayed","linkToAttribute","filter","ent","entityName","map","ButtonToolbar","ButtonGroup","getOwnPropertyNames","keyName","index","Button","onClick","appearance","IconButton","icon","ConfigOptions","Input","style","width","onChange","val","renamed","_","mapKeys","key","SelectPicker","data","type","newSearchConfig","placeholder","cleanable","renderMenuItem","item","findIcon","renderValue","toString","console","log","SpecialConfigs","SpecialConfig","found","field","searchTerm","TagPicker","creatable","onCreate","trigger","tileOptions","styled","div","SearchConfigEditor","searchConfig","searchOptions","TileConfigEditor","tileConfig","SystemEntityEditor","undefined","tags","setTags","typing","setTyping","inputValue","setInputValue","setIcons","JSON","stringify","newIcons","IconSet","iconSet","addNewTag","nextTags","startAddNewTag","Entity","InputGroup","Addon","Checkbox","defaultChecked","checked","isMainEntity","StyledPanelGroup","accordion","bordered","Panel","header","StyledTagGroup","Tag","closable","onClose","tag","removeAttr","className","size","onBlur","onPressEnter","theme","secondColor","PanelGroup","TagGroup","SystenWrapper","SystemDetails","match","history","useHistory","setEntity","jsonEntity","setJsonEntity","jsonEntityValid","isValid","loading","setLoading","showOverwirteDialog","setOverwirteDialog","showDeleteDialog","setDeleteDialog","selectedEntity","changeSelectedEntity","id","params","reciveSystem","newJson","parse","e","newEntity","Modal","open","Header","Title","Body","version","Footer","updateSystem","generateSystem","localStorage","setItem","deleteSystem","goBack","Loader","center","content","pic","entis","addNewEntity","enti","indexOf","sysEnti","StyledBadge","color","as","rows","Badge"],"mappings":"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","file":"static/js/11.769749b9.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n  TagPicker,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport { System, SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $DetailConfigEditorProps {\n  entity: System;\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  icons: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst DetailConfigEditor = ({\n  entity,\n  systemEntity,\n  entities,\n  icons,\n  changeEntity,\n}: $DetailConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.detailConfig)[0]\n  );\n\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const [baseAttrs, changeBaseAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n  useEffect(() => {\n    if (\n      selectedPart &&\n      systemEntity.detailConfig[selectedPart] &&\n      systemEntity.detailConfig[selectedPart].viewEntity\n    ) {\n      const { linkedBy, fieldsDisplayed } =\n        systemEntity.detailConfig[selectedPart].viewEntity;\n      const name = systemEntity.detailConfig[linkedBy].linkToAttribute;\n      entity.entities\n        .filter((ent) => ent.entityName === name)\n        .map((ent) => {\n          const newAttributes: {\n            label: string;\n            value: string;\n          }[] = [];\n          ent.attributes.forEach((attr) => {\n            newAttributes.push({\n              label: attr,\n              value: attr,\n            });\n          });\n          changeBaseAttrs(newAttributes);\n        });\n    }\n  }, [selectedPart, systemEntity, entity]);\n\n  const addNewPart = () => {};\n\n  const DetailConfigTypes = [\n    {\n      label: \"CreatableSetString\",\n      value: \"CreatableSetString\",\n    },\n    {\n      label: \"CreatableSetNumber\",\n      value: \"CreatableSetNumber\",\n    },\n    {\n      label: \"FoundFlag\",\n      value: \"FoundFlag\",\n    },\n    {\n      label: \"SwitchBoolean\",\n      value: \"SwitchBoolean\",\n    },\n    {\n      label: \"ImageName\",\n      value: \"ImageName\",\n    },\n    {\n      label: \"CompletableString\",\n      value: \"CompletableString\",\n    },\n    {\n      label: \"SearchableString\",\n      value: \"SearchableString\",\n    },\n    {\n      label: \"SearchableText\",\n      value: \"SearchableText\",\n    },\n    {\n      label: \"SetEntities\",\n      value: \"SetEntities\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n    {\n      label: \"ViewEntity\",\n      value: \"ViewEntity\",\n    },\n    {\n      label: \"SubEntityConnector\",\n      value: \"SubEntityConnector\",\n    },\n    {\n      label: \"EditableSubEntities\",\n      value: \"EditableSubEntities\",\n    },\n  ];\n\n  const tileOptions = (val: ConfigPart) => {\n    console.log(val.type);\n    switch (true) {\n      case val.type === \"FoundString\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.detailConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.field = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newSearchConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.detailConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SetEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <SelectPicker\n                data={entities}\n                value={val.linkToAttribute}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.detailConfig };\n                  newSearchConfig[selectedPart].linkToAttribute = val;\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Detail Representation\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"ViewEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Base Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.viewEntity?.linkedBy}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.detailConfig };\n                  if (newSearchConfig[selectedPart].viewEntity)\n                    newSearchConfig[selectedPart].viewEntity.linkedBy = val;\n                  else\n                    newSearchConfig[selectedPart].viewEntity = {\n                      linkedBy: val,\n                      fieldsDisplayed: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newSearchConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Attributes to display: </label>\n              <TagPicker\n                creatable\n                data={baseAttrs}\n                value={val.viewEntity?.fieldsDisplayed}\n                onCreate={(value, item) => {\n                  console.log(value, item);\n                }}\n                onChange={(val: any) => {\n                  console.log(val);\n                  let newSearchConfig: any = { ...systemEntity.detailConfig };\n                  if (newSearchConfig[selectedPart].viewEntity)\n                    newSearchConfig[selectedPart].viewEntity.fieldsDisplayed =\n                      val;\n                  else\n                    newSearchConfig[selectedPart].viewEntity = {\n                      linkedBy: \"\",\n                      fieldsDisplayed: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newSearchConfig,\n                  });\n                }}\n                trigger={\"Enter\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SubEntityConnector\":\n        return <>SubEntityConnector</>;\n      case val.type === \"EditableSubEntities\":\n        return <>SubEntityConnector</>;\n    }\n  };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.detailConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.detailConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const detailConfig: any = { ...systemEntity.detailConfig };\n                const renamed = _.mapKeys(detailConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  detailConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={DetailConfigTypes}\n              value={systemEntity.detailConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newSearchConfig: any = { ...systemEntity.detailConfig };\n                newSearchConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  detailConfig: newSearchConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n        {selectedPart && systemEntity.detailConfig[selectedPart] && (\n          <SelectPicker\n            value={systemEntity.detailConfig[selectedPart]?.icon}\n            data={icons}\n            onChange={(val: any) => {\n              let newSearchConfig: any = { ...systemEntity.detailConfig };\n              newSearchConfig[selectedPart].icon = val;\n              changeEntity({\n                ...systemEntity,\n                detailConfig: newSearchConfig,\n              });\n            }}\n            renderMenuItem={(label, item) => {\n              return (\n                <div>\n                  {findIcon(item.value + \"\")} {label}\n                </div>\n              );\n            }}\n            renderValue={(value) => {\n              return (\n                <div>\n                  {findIcon(value.toString())} {value}\n                </div>\n              );\n            }}\n          />\n        )}\n        {selectedPart &&\n          systemEntity.detailConfig[selectedPart] &&\n          tileOptions(systemEntity.detailConfig[selectedPart])}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default DetailConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport { SystemEntity } from \"../../../../database/SystemReducer\";\n\ninterface $SearchConfigEditorProps {\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst SearchConfigEditor = ({\n  systemEntity,\n  entities,\n  changeEntity,\n}: $SearchConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.searchConfig)[0]\n  );\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const addNewPart = () => {\n    // changeEntity({\n    //   ...systemEntity,\n    //   searchConfig: newSearchConfig,\n    // });\n  };\n\n  const SearchConfigTypes = [\n    {\n      label: \"SearchableString\",\n      value: \"SearchableString\",\n    },\n    {\n      label: \"CreatableSetString\",\n      value: \"CreatableSetString\",\n    },\n    {\n      label: \"CompletableString\",\n      value: \"CompletableString\",\n    },\n    {\n      label: \"FoundString\",\n      value: \"FoundString\",\n    },\n    {\n      label: \"CreatableSetNumber\",\n      value: \"CreatableSetNumber\",\n    },\n    {\n      label: \"SearchableText\",\n      value: \"SearchableText\",\n    },\n    {\n      label: \"SetEntities\",\n      value: \"SetEntities\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n    {\n      label: \"SwitchBoolean\",\n      value: \"SwitchBoolean\",\n    },\n  ];\n  const searchOptions = (val: ConfigPart) => {\n    switch (true) {\n      case val.type === \"FoundString\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.field = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SetEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <SelectPicker\n                data={entities}\n                value={val.linkToAttribute}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  newSearchConfig[selectedPart].linkToAttribute = val;\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Detail Representation\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n    }\n  };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.searchConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.searchConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const searchConfig: any = { ...systemEntity.searchConfig };\n                const renamed = _.mapKeys(searchConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  searchConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={SearchConfigTypes}\n              value={systemEntity.searchConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newSearchConfig: any = { ...systemEntity.searchConfig };\n                newSearchConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  searchConfig: newSearchConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n        {selectedPart &&\n          systemEntity.searchConfig[selectedPart] &&\n          searchOptions(systemEntity.searchConfig[selectedPart])}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default SearchConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport { SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $TileConfigEditorProps {\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  icons: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst TileConfigEditor = ({\n  systemEntity,\n  entities,\n  icons,\n  changeEntity,\n}: $TileConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.tileConfig)[0]\n  );\n\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const addNewPart = () => {};\n\n  const TileConfigTypes = [\n    {\n      label: \"ColoredFlag\",\n      value: \"ColoredFlag\",\n    },\n    {\n      label: \"FoundFlag\",\n      value: \"FoundFlag\",\n    },\n    {\n      label: \"BooleanFlag\",\n      value: \"BooleanFlag\",\n    },\n    {\n      label: \"RoundNumberFlag\",\n      value: \"RoundNumberFlag\",\n    },\n    {\n      label: \"ImageName\",\n      value: \"ImageName\",\n    },\n    {\n      label: \"SmallProp\",\n      value: \"SmallProp\",\n    },\n    {\n      label: \"SmallSetProp\",\n      value: \"SmallSetProp\",\n    },\n    {\n      label: \"WideProp\",\n      value: \"WideProp\",\n    },\n    {\n      label: \"WideSetProp\",\n      value: \"WideSetProp\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n  ];\n\n  const tileOptions = (val: ConfigPart) => {\n    switch (true) {\n      case val.type === \"FoundString\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.tileConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.field = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    tileConfig: newSearchConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.tileConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    tileConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n    }\n  };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.tileConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.tileConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const tileConfig: any = { ...systemEntity.tileConfig };\n                const renamed = _.mapKeys(tileConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  tileConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={TileConfigTypes}\n              value={systemEntity.tileConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newSearchConfig: any = { ...systemEntity.tileConfig };\n                newSearchConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  tileConfig: newSearchConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n        {selectedPart && systemEntity.tileConfig[selectedPart] && (\n          <SelectPicker\n            value={systemEntity.tileConfig[selectedPart]?.icon}\n            data={icons}\n            onChange={(val: any) => {\n              let newSearchConfig: any = { ...systemEntity.tileConfig };\n              newSearchConfig[selectedPart].icon = val;\n              changeEntity({\n                ...systemEntity,\n                tileConfig: newSearchConfig,\n              });\n            }}\n            renderMenuItem={(label, item) => {\n              return (\n                <div>\n                  {findIcon(item.value + \"\")} {label}\n                </div>\n              );\n            }}\n            renderValue={(value) => {\n              return (\n                <div>\n                  {findIcon(value.toString())} {value}\n                </div>\n              );\n            }}\n          />\n        )}\n        {selectedPart &&\n          systemEntity.tileConfig[selectedPart] &&\n          tileOptions(systemEntity.tileConfig[selectedPart])}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default TileConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n","import { useState, useEffect } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport {\n  InputGroup,\n  Input,\n  Checkbox,\n  SelectPicker,\n  Panel,\n  TagGroup,\n  Tag,\n  PanelGroup,\n  IconButton,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport { System, SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon, IconSet } from \"../../../../services/IconService\";\nimport DetailConfigEditor from \"./DetailConfigEditor\";\nimport SearchConfigEditor from \"./SearchConfigEditor\";\nimport TileConfigEditor from \"./TileConfigEditor\";\n\ninterface $SystemEntityProps {\n  entity: System;\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst SystemEntityEditor = ({\n  entity,\n  systemEntity,\n  entities,\n  changeEntity,\n}: $SystemEntityProps) => {\n  const [tags, setTags] = useState<string[] | undefined>(undefined);\n  const [typing, setTyping] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  const [icons, setIcons] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    if (tags && JSON.stringify(systemEntity.attributes) !== JSON.stringify(tags))\n      changeEntity({ ...systemEntity, attributes: tags });\n  }, [tags]);\n\n  useEffect(() => {\n    let newIcons: {\n      label: string;\n      value: string;\n    }[] = [];\n    IconSet.forEach((iconSet, key) => {\n      newIcons.push({\n        label: key,\n        value: key,\n      });\n    });\n    setIcons(newIcons);\n  }, []);\n\n  const removeAttr = (tag: string) => {\n    const nextTags = systemEntity.attributes.filter((item) => item !== tag);\n    setTags(nextTags);\n  };\n  const addNewTag = () => {\n    const nextTags = inputValue ? [...systemEntity.attributes, inputValue] : tags;\n    setTags(nextTags);\n    setTyping(false);\n    setInputValue(\"\");\n  };\n  const startAddNewTag = () => {\n    setTyping(true);\n  };\n  const renderAttrInput = () => {\n    if (typing) {\n      return (\n        <Input\n          className=\"tag-input\"\n          size=\"xs\"\n          style={{ width: 100 }}\n          value={inputValue}\n          onChange={(val: any) => setInputValue(val)}\n          onBlur={addNewTag}\n          onPressEnter={addNewTag}\n        />\n      );\n    }\n    return (\n      <IconButton\n        className=\"tag-add-btn\"\n        onClick={startAddNewTag}\n        icon={<FaPlus />}\n        appearance=\"ghost\"\n        size=\"xs\"\n      />\n    );\n  };\n\n  return (\n    <Entity>\n      <InputGroup>\n        <InputGroup.Addon>Entity Name</InputGroup.Addon>\n        <Input\n          value={systemEntity.entityName}\n          onChange={(val: any) =>\n            changeEntity({ ...systemEntity, entityName: val })\n          }\n        />\n      </InputGroup>\n      <Checkbox\n        defaultChecked\n        checked={systemEntity.isMainEntity}\n        onChange={(val: any, checked: boolean) =>\n          changeEntity({ ...systemEntity, isMainEntity: checked })\n        }\n      >\n        {\" \"}\n        is a main entity?\n      </Checkbox>\n      <SelectPicker\n        value={systemEntity.icon}\n        data={icons}\n        onChange={(val: any) => changeEntity({ ...systemEntity, icon: val })}\n        renderMenuItem={(label, item) => {\n          return (\n            <div>\n              {findIcon(item.value + \"\")} {label}\n            </div>\n          );\n        }}\n        renderValue={(value) => {\n          return (\n            <div>\n              {findIcon(value.toString())} {value}\n            </div>\n          );\n        }}\n      />\n      <StyledPanelGroup accordion bordered>\n        <Panel header={`${systemEntity.entityName} attributes`}>\n          <StyledTagGroup>\n            {systemEntity &&\n              systemEntity.attributes?.map((attr, index) => (\n                <Tag key={index} closable onClose={() => removeAttr(attr)}>\n                  {attr}\n                </Tag>\n              ))}\n            {renderAttrInput()}\n          </StyledTagGroup>\n        </Panel>\n        <Panel header={`${systemEntity.entityName} search config`}>\n          <SearchConfigEditor\n            systemEntity={systemEntity}\n            entities={entities}\n            changeEntity={changeEntity}\n          />\n        </Panel>\n        <Panel header={`${systemEntity.entityName} tile config`}>\n          <TileConfigEditor\n            systemEntity={systemEntity}\n            entities={entities}\n            icons={icons}\n            changeEntity={changeEntity}\n          />\n        </Panel>\n        <Panel header={`${systemEntity.entityName} detail config`}>\n          <DetailConfigEditor\n            entity={entity}\n            systemEntity={systemEntity}\n            entities={entities}\n            icons={icons}\n            changeEntity={changeEntity}\n          />\n        </Panel>\n      </StyledPanelGroup>\n    </Entity>\n  );\n};\n\nexport default SystemEntityEditor;\n\nconst Entity = styled.div`\n  margin-top: 10px;\n  display: flex;\n  gap: 5px;\n  flex-wrap: nowrap;\n  flex-direction: column;\n\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  padding: 10px;\n`;\n\nconst Attr = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n\nconst StyledPanelGroup = styled(PanelGroup)`\n  width: 100%;\n`;\n\nconst StyledTagGroup = styled(TagGroup)`\n  .rs-btn {\n    margin-left: 10px;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n  IconButton,\n  Input,\n  InputGroup,\n  Loader,\n  Modal,\n  Panel,\n  PanelGroup,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport { System, SystemEntity } from \"../../../database/SystemReducer\";\nimport {\n  deleteSystem,\n  reciveSystem,\n  updateSystem,\n} from \"../../../services/DatabaseService\";\nimport { generateSystem } from \"../../../services/SystemService\";\nimport SystemEntityEditor from \"./systemDetails/SystemEntityEditor\";\n\ninterface $EntityProps {\n  match: any;\n}\n\nconst SystemDetails = ({ match }: $EntityProps) => {\n  let history = useHistory();\n  const [entity, setEntity] = useState<System>();\n  const [jsonEntity, setJsonEntity] = useState<string>(\"\");\n  const [jsonEntityValid, isValid] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showOverwirteDialog, setOverwirteDialog] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n\n  const [selectedEntity, changeSelectedEntity] = useState<number>(0);\n\n  useEffect(() => {\n    if (match !== undefined && entity === undefined) {\n      const id: string | undefined = match.params.id;\n      if (id)\n        reciveSystem(\"PnPTomeDB\", +id, (entity: System) => {\n          setEntity(entity as System);\n          setJsonEntity(JSON.stringify(entity.entities, null, 2));\n          setLoading(false);\n        });\n    }\n  }, [match, entity]);\n\n  useEffect(() => {\n    if (entity)\n      try {\n        const newJson: SystemEntity[] = JSON.parse(jsonEntity);\n        setEntity({ ...entity, entities: newJson });\n        isValid(true);\n      } catch (e) {\n        isValid(false);\n      }\n  }, [jsonEntity]);\n\n  const updateTrigger = () => {\n    if (entity) {\n      updateSystem(entity);\n      generateSystem(entity);\n      localStorage.setItem(\"system\", JSON.stringify(entity));\n      setOverwirteDialog(false);\n    }\n  };\n\n  const deleteTrigger = () => {\n    if (entity) {\n      deleteSystem(entity);\n      setDeleteDialog(false);\n      history.goBack();\n    }\n  };\n\n  // const changeEntity = (val: any[]) => {};\n  const addNewEntity = () => {\n    if (entity) {\n      let entis: SystemEntity[] = [...entity.entities];\n      entis.push({\n        entityName: \"New Entity\",\n        icon: \"FaBookOpen\",\n        isMainEntity: true,\n        attributes: [],\n        searchConfig: {},\n        tileConfig: {},\n        detailConfig: {},\n      });\n      changeEntity({ ...entity, entities: entis });\n    }\n  };\n  const changeEntity = (newEntity: System) => {\n    console.log(newEntity);\n    setEntity(newEntity);\n  };\n\n  return (\n    <>\n      <Modal\n        open={showOverwirteDialog}\n        onClose={() => setOverwirteDialog(false)}\n      >\n        <Modal.Header>\n          <Modal.Title>Overwrite</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          All the data saved for this system will be lost.\n          <br />\n          Are you sure you want to overwrite '{entity?.name} - v\n          {entity?.version}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => updateTrigger()} appearance=\"primary\">\n            Yes, overwirte!\n          </Button>\n          <Button onClick={() => setOverwirteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal open={showDeleteDialog} onClose={() => setDeleteDialog(false)}>\n        <Modal.Header>\n          <Modal.Title>Delete</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          All the data saved for this system will be lost.\n          <br />\n          Are you sure you want to delete '{entity?.name} - v{entity?.version}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => deleteTrigger()} appearance=\"primary\">\n            Yes, delete!\n          </Button>\n          <Button onClick={() => setDeleteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {loading && <Loader center content=\"Loading...\" />}\n      {!loading && entity !== undefined && (\n        <SystenWrapper>\n          <InputGroup>\n            <InputGroup.Addon>Name</InputGroup.Addon>\n            <Input\n              value={entity.name}\n              onChange={(val: any) => setEntity({ ...entity, name: val })}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputGroup.Addon>Version</InputGroup.Addon>\n            <Input\n              value={entity.version}\n              onChange={(val: any) => setEntity({ ...entity, version: val })}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputGroup.Addon>Pic</InputGroup.Addon>\n            <Input\n              value={entity.pic}\n              onChange={(val: any) => setEntity({ ...entity, pic: val })}\n            />\n          </InputGroup>\n          <StyledPanelGroup accordion bordered>\n            <Panel header=\"Assisted Editor\">\n              <ButtonToolbar>\n                <ButtonGroup>\n                  {entity.entities.map(\n                    (systemEntity: SystemEntity, index: number) => {\n                      return (\n                        <Button\n                          onClick={() => changeSelectedEntity(index)}\n                          appearance={\n                            index === selectedEntity ? \"primary\" : \"default\"\n                          }\n                        >\n                          {systemEntity.entityName}\n                        </Button>\n                      );\n                    }\n                  )}\n                </ButtonGroup>\n                <IconButton\n                  icon={<FaPlusCircle />}\n                  onClick={() => addNewEntity()}\n                />\n              </ButtonToolbar>\n              {entity.entities\n                .filter(\n                  (enti) => entity.entities.indexOf(enti) === selectedEntity\n                )\n                .map((systemEntity: SystemEntity, index: number) => {\n                  return (\n                    <SystemEntityEditor\n                      entity={entity}\n                      systemEntity={systemEntity}\n                      entities={entity.entities.map((enti) => {\n                        return {\n                          label: enti.entityName,\n                          value: enti.entityName,\n                        };\n                      })}\n                      changeEntity={(sysEnti: SystemEntity) => {\n                        let entis: SystemEntity[] = entity.entities.map(\n                          (ent) => {\n                            if (ent.entityName === systemEntity.entityName)\n                              return sysEnti;\n                            return ent;\n                          }\n                        );\n                        changeEntity({ ...entity, entities: entis });\n                      }}\n                    />\n                  );\n                })}\n            </Panel>\n            <Panel header=\"JSON Editor\">\n              <StyledBadge\n                content={jsonEntityValid ? \"Valid\" : \"Not Valid\"}\n                color={jsonEntityValid ? \"green\" : \"red\"}\n              >\n                <Input\n                  as=\"textarea\"\n                  rows={30}\n                  placeholder=\"Textarea\"\n                  value={jsonEntity}\n                  onChange={(val: any) => setJsonEntity(val)}\n                />\n              </StyledBadge>\n            </Panel>\n          </StyledPanelGroup>\n\n          <Button onClick={(e) => setOverwirteDialog(true)}>Overwirte</Button>\n          <Button\n            color=\"red\"\n            appearance=\"primary\"\n            onClick={(e) => setDeleteDialog(true)}\n          >\n            Delete\n          </Button>\n        </SystenWrapper>\n      )}\n    </>\n  );\n};\n\nexport default SystemDetails;\n\nconst SystenWrapper = styled.div`\n  display: flex;\n  gap: 5px;\n  flex-wrap: wrap;\n`;\n\nconst StyledPanelGroup = styled(PanelGroup)`\n  width: 100%;\n`;\n\nconst StyledBadge = styled(Badge)`\n  width: calc(100% - 15px);\n`;\n"],"sourceRoot":""}