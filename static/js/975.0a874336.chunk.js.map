{"version":3,"file":"static/js/975.0a874336.chunk.js","mappings":"8YAoHA,MAtGA,WACE,IAAIA,GAAUC,EAAAA,EAAAA,MACd,GAAiCC,EAAAA,EAAAA,UAAmB,IAApD,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAkCJ,EAAAA,EAAAA,UAChCK,KAAKC,UAAUC,EAAe,KAAM,IADtC,eAAOC,EAAP,KAAkBC,EAAlB,KAGA,GAAyCT,EAAAA,EAAAA,WAAkB,GAA3D,eAAOU,EAAP,KAAwBC,EAAxB,KAkCA,OAhCAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAmB,YAAa,WAAW,SAACC,GAC1CZ,EAAcY,QAEf,KA6BD,iCACIJ,IACA,UAACK,EAAD,YACE,UAACC,EAAA,EAAD,CACEC,QAAM,EACNC,UAAQ,EACRC,UAAQ,EACRC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,KAJ3C,WAME,gBAAKC,IAAKC,EAAMC,OAAO,SACvB,SAACT,EAAA,EAAD,CAAOU,OAAO,oBAAd,UACE,SAACC,EAAA,EAAD,CAAQC,QAAS,SAACC,GAAD,OAAOlB,GAAc,IAAtC,6BAGHV,EAAQ6B,KAAI,SAACC,EAAgBC,GAC5B,OACE,UAAChB,EAAA,EAAD,CAEEC,QAAM,EACNC,UAAQ,EACRC,UAAQ,EACRC,MAAO,CAAEC,QAAS,eAAgBC,MAAO,KAL3C,WAOE,gBAAKC,IAAKQ,EAAOE,IAAKR,OAAO,SAC7B,UAACS,EAAD,CAAaR,OAAQK,EAAOI,KAAO,OAASJ,EAAOK,QAAnD,WACE,SAACT,EAAA,EAAD,CACEC,QAAS,SAACC,GAAD,OAtCR,SAACE,GAClBM,aAAaC,QAAQ,SAAUjC,KAAKC,UAAUyB,IAC9C5B,GAASoC,EAAAA,EAAAA,IAAUR,IAoCaS,CAAWT,IAC3BX,MAAO,CAAEqB,YAAa,QAFxB,mBAMA,SAACd,EAAA,EAAD,CAAQC,QAAS,SAACC,GAAD,OAtCd,SAACE,GAClBjC,EAAQ,CACN4C,SAAS,kBAAD,OAAoBX,EAAOY,MAoCCC,CAAWb,IAAnC,8BAdGC,SAuBdtB,IACC,iCACE,SAACmC,EAAA,EAAD,CACEC,GAAG,WACHC,KAAM,EACNC,YAAY,WACZC,MAAOzC,EACP0C,SAAU,SAACC,GAAD,OAAc1C,EAAa0C,OAEvC,SAACxB,EAAA,EAAD,CAAQC,QAAS,SAACC,GAAD,OA5EV,WACb,IAAIuB,GAAS,UAAQ/C,KAAKgD,MAAM7C,WACzB4C,EAAUT,GACjBhC,GAAc,IACd2C,EAAAA,EAAAA,IAAgB,YAAa,UAAWF,GAAW,SAACT,IAClDY,EAAAA,EAAAA,IAAeH,GACfI,EAAAA,EAAAA,MACE,UAACC,EAAA,EAAD,CAAc/B,OAAQ,UAAWgC,KAAK,UAAtC,+CACqCN,EAAUjB,KAD/C,OAGA,CAAEwB,UAAW,mBAkEaC,IAAUxC,MAAO,CAAEqB,YAAa,QAAxD,mBAGA,SAACd,EAAA,EAAD,CAAQC,QAAS,SAACC,GAAD,OAAOlB,GAAc,IAAtC,yBASJI,EAAY8C,EAAAA,GAAAA,IAAH,4EAMT3B,GAAc2B,EAAAA,EAAAA,IAAO7C,EAAAA,EAAP6C,CAAH,iEACK,qBAAGC,MAAkBC,eAChC,qBAAGD,MAAkBE","sources":["components/pages/Systems.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Input, Panel, Notification, toaster } from \"rsuite\";\nimport styled from \"styled-components\";\nimport { setSystem, System } from \"../../database/SystemReducer\";\nimport {\n  createNewWithId,\n  reciveAllFromTable,\n} from \"../../services/DatabaseService\";\nimport DeafultSystem from \"../../System.json\";\nimport Logo from \"../../logo512.png\";\nimport { useDispatch } from \"react-redux\";\nimport { generateSystem } from \"../../services/SystemService\";\n\nfunction Systems() {\n  let history = useNavigate();\n  const [systems, changeSystems] = useState<System[]>([]);\n  const dispatch = useDispatch();\n\n  const [newSystem, setNewSystem] = useState<string>(\n    JSON.stringify(DeafultSystem, null, 2)\n  );\n  const [newSystemDialog, showNewSystem] = useState<boolean>(false);\n\n  useEffect(() => {\n    reciveAllFromTable(\"PnPTomeDB\", \"systems\", (entries: any[]) => {\n      changeSystems(entries);\n    });\n  }, []);\n\n  const create = () => {\n    let newEntity = { ...JSON.parse(newSystem) };\n    delete newEntity.id;\n    showNewSystem(false);\n    createNewWithId(\"PnPTomeDB\", \"systems\", newEntity, (id: number) => {\n      generateSystem(newEntity);\n      toaster.push(\n        <Notification header={\"Success\"} type=\"success\">\n          Success: Created new system named {newEntity.name}.\n        </Notification>,\n        { placement: \"bottomStart\" }\n      );\n    });\n  };\n\n  const loadSystem = (system: System) => {\n    localStorage.setItem('system', JSON.stringify(system));\n    dispatch(setSystem(system));\n  };\n\n  const editSystem = (system: System) => {\n    history({\n      pathname: `/system-detail/${system.id}`,\n    });\n  };\n\n  return (\n    <>\n      {!newSystemDialog && (\n        <CardGroup>\n          <Panel\n            shaded\n            bordered\n            bodyFill\n            style={{ display: \"inline-block\", width: 240 }}\n          >\n            <img src={Logo} height=\"240\" />\n            <Panel header=\"Make a new System\">\n              <Button onClick={(e) => showNewSystem(true)}>New System</Button>\n            </Panel>\n          </Panel>\n          {systems.map((system: System, index: number) => {\n            return (\n              <Panel\n                key={index}\n                shaded\n                bordered\n                bodyFill\n                style={{ display: \"inline-block\", width: 240 }}\n              >\n                <img src={system.pic} height=\"240\" />\n                <StyledPanel header={system.name + \" - v\" + system.version}>\n                  <Button\n                    onClick={(e) => loadSystem(system)}\n                    style={{ marginRight: \"10px\" }}\n                  >\n                    Load\n                  </Button>\n                  <Button onClick={(e) => editSystem(system)}>\n                    View / Edit\n                  </Button>\n                </StyledPanel>\n              </Panel>\n            );\n          })}\n        </CardGroup>\n      )}\n      {newSystemDialog && (\n        <>\n          <Input\n            as=\"textarea\"\n            rows={3}\n            placeholder=\"Textarea\"\n            value={newSystem}\n            onChange={(val: any) => setNewSystem(val)}\n          />\n          <Button onClick={(e) => create()} style={{ marginRight: \"10px\" }}>\n            Save\n          </Button>\n          <Button onClick={(e) => showNewSystem(false)}>Back</Button>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Systems;\n\nconst CardGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst StyledPanel = styled(Panel)`\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${({ theme }) => theme.textColor};\n`;\n"],"names":["history","useNavigate","useState","systems","changeSystems","dispatch","useDispatch","JSON","stringify","DeafultSystem","newSystem","setNewSystem","newSystemDialog","showNewSystem","useEffect","reciveAllFromTable","entries","CardGroup","Panel","shaded","bordered","bodyFill","style","display","width","src","Logo","height","header","Button","onClick","e","map","system","index","pic","StyledPanel","name","version","localStorage","setItem","setSystem","loadSystem","marginRight","pathname","id","editSystem","Input","as","rows","placeholder","value","onChange","val","newEntity","parse","createNewWithId","generateSystem","toaster","Notification","type","placement","create","styled","theme","secondColor","textColor"],"sourceRoot":""}