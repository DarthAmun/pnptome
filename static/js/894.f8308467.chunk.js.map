{"version":3,"file":"static/js/894.f8308467.chunk.js","mappings":"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","sources":["components/general/BreadCrumbIcon.tsx","components/generic/details/EntityBuilder.tsx","components/generic/details/EntityDetailWrapper.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport { FaHome } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RootState } from \"../../database/Store\";\nimport { SystemEntity } from \"../../database/SystemReducer\";\nimport { findIcon } from \"../../services/IconService\";\n\nconst BreadCrumbIcon = () => {\n  let location = useLocation();\n  const system = useSelector((state: RootState) => state.system);\n  const base = location.pathname.split(\"/\")[1];\n\n  const makeBreadCrumb = useCallback((): JSX.Element => {\n    let RibbonElm = <></>;\n    system.entities.forEach((entity: SystemEntity) => {\n      switch (true) {\n        case base === \"\":\n        case base === \"home\":\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  <FaHome />\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-detail`:\n        case base === `${entity.entityName}-builder`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>{findIcon(entity.icon)}</span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-overview`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  {findIcon(entity.icon, 10)}\n                  {findIcon(entity.icon, 20)}\n                  {findIcon(entity.icon, 10)}\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n      }\n    });\n    return RibbonElm;\n  }, [base, system]);\n\n  return makeBreadCrumb();\n};\n\nexport default BreadCrumbIcon;\n\nconst Ribbon = styled.div`\n  margin: 3em;\n  /* IE10 Consumer Preview */\n  background-image: -ms-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Mozilla Firefox */\n  background-image: -moz-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Opera */\n  background-image: -o-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Webkit (Safari/Chrome 10) */\n  background-image: -webkit-gradient(\n    radial,\n    center top,\n    0,\n    center top,\n    487,\n    color-stop(0, #f55c5c),\n    color-stop(1, #c24a4a)\n  );\n  /* Webkit (Chrome 11+) */\n  background-image: -webkit-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* W3C Markup, IE10 Release Preview */\n  background-image: radial-gradient(\n    circle farthest-side at center top,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  width: 3.5em;\n  height: 3em;\n  position: relative;\n  top: -20px;\n  margin: 0px 10px 0px -10px;\n  border-top-right-radius: 0.2em;\n  border-top-left-radius: 0.2em;\n  font-family: \"Kite One\", sans-serif;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    left: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-right: 2.5em solid transparent;\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    right: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-left: 2.5em solid transparent;\n  }\n\n  & i {\n    width: 90%;\n    height: 160%;\n    display: block;\n    margin: auto;\n    z-index: 100;\n    position: relative;\n    border-right: dashed 0.0625em #333;\n    border-left: dashed 0.0625em #333;\n    overflow: hidden;\n  }\n\n  & i span {\n    color: #fff;\n    display: block;\n    text-align: center;\n    top: 50%;\n    margin-top: -1em;\n    position: relative;\n    text-shadow: 0.0625em 0.0625em 0.0625em #333;\n    font-style: normal;\n    font-weight: bold;\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaArrowLeft, FaSave } from \"react-icons/fa\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, ButtonGroup, Notification, toaster } from \"rsuite\";\nimport { createNewWithId } from \"../../../services/DatabaseService\";\nimport { TopBar } from \"./EntityDetailWrapper\";\nimport BreadCrumbIcon from \"../../general/BreadCrumbIcon\";\nimport EntityDetails from \"./EntityDetails\";\nimport IEntity from \"../../../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { RootState } from \"../../../database/Store\";\nimport {\n  getEntityAttributes,\n  getEntityDetailConfig,\n} from \"../../../services/SystemService\";\n\ninterface $BuilderProps {\n  entityName: string;\n}\n\nconst EntityBuilder = ({ entityName }: $BuilderProps) => {\n  let history = useNavigate();\n  const systemDbName = useSelector(selectDBName);\n  const system = useSelector((state: RootState) => state.system);\n  const [entityObj, onEdit] = useState<IEntity>();\n\n  useEffect(() => {\n    let newObj: string = \"{\";\n    getEntityAttributes(system, entityName).forEach((attr: string) => {\n      newObj += `\"${attr}\": \"\",`;\n    });\n    newObj = newObj.slice(0, -1) + \"}\";\n    console.log(newObj);\n    onEdit(JSON.parse(newObj));\n  }, [entityName, system]);\n\n  const create = () => {\n    if (entityObj) {\n      let newEntity = { ...entityObj };\n      delete newEntity.id;\n      createNewWithId(systemDbName, entityName, newEntity, (id: number) => {\n        history(`/${entityName}-detail/${id}`);\n\n        toaster.push(\n          <Notification header={\"Success\"} type=\"success\">\n            Success: Created new {entityName} named {newEntity.name}.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopBar>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => history(-1)} size=\"lg\">\n            <FaArrowLeft />\n          </Button>\n          <Button onClick={() => create()} size=\"lg\">\n            <FaSave />\n          </Button>\n        </ButtonGroup>\n      </TopBar>\n      {entityObj && (\n        <EntityDetails\n          configs={Object.getOwnPropertyNames(\n            getEntityDetailConfig(system, entityName)\n          )}\n          entity={entityObj}\n          entityName={entityName}\n          onEdit={onEdit}\n          isNew={true}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EntityBuilder;\n","import { useState } from \"react\";\nimport { FaArrowLeft, FaClone, FaTrash } from \"react-icons/fa\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, ButtonGroup, Notification, Modal, toaster } from \"rsuite\";\nimport styled from \"styled-components\";\nimport BreadCrumbIcon from \"../../general/BreadCrumbIcon\";\n\nimport IEntity from \"../../../data/IEntity\";\nimport {\n  remove,\n  updateWithCallback,\n  createNewWithId,\n} from \"../../../services/DatabaseService\";\nimport EntityDetails from \"./EntityDetails\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { getEntityDetailConfig } from \"../../../services/SystemService\";\nimport { RootState } from \"../../../database/Store\";\nimport { MdScreenShare } from \"react-icons/md\";\nimport Peer, { DataConnection } from \"peerjs\";\nimport { postEvent } from \"../../../services/ChatService\";\nimport { Group } from \"../../../database/GroupReducer\";\nimport {\n  addEvent,\n  EventDto,\n  EventType,\n} from \"../../../database/chatLogReducer\";\n\ninterface $Props {\n  entity: IEntity;\n  entityName: string;\n}\n\nconst EntityDetailWrapper = ({ entity, entityName }: $Props) => {\n  let history = useNavigate();\n  const dispatch = useDispatch();\n  const systemDbName = useSelector(selectDBName);\n  const liveGroup: Group = useSelector((state: RootState) => state.group);\n  const peer: Peer | undefined = useSelector(\n    (state: RootState) => state.peerContext.peer\n  );\n  const conns: DataConnection[] = useSelector(\n    (state: RootState) => state.peerContext.connections\n  );\n  const system = useSelector((state: RootState) => state.system);\n  const [entityObj, editEntity] = useState<IEntity>(entity);\n\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const tableName = entityName;\n\n  const deleteEntity = () => {\n    remove(systemDbName, tableName, entityObj.id);\n    history(-1);\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Deleted {entityObj.name}.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  const updateEntity = (entityObj: IEntity, msg: string) => {\n    updateWithCallback(systemDbName, tableName, entityObj, (result) => {\n      if (result > 0) {\n        toaster.push(\n          <Notification closable header={\"Success\"} type=\"success\">\n            Success: {msg}.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      } else {\n        toaster.push(\n          <Notification closable header={\"Error\"} type=\"error\">\n            Error: Something went wrong!.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      }\n    });\n  };\n\n  const duplicateEntity = (obj: IEntity) => {\n    let newObj = { ...obj };\n    delete newObj.id;\n    createNewWithId(systemDbName, tableName, newObj, (id) => {\n      editAndSaveEntity(\n        { ...entity, name: entity.name + \" [Clone]\" },\n        \"Cloning successful!\"\n      );\n    });\n  };\n\n  const editAndSaveEntity = (entity: IEntity, msg: string) => {\n    editEntity(entity);\n    updateEntity(entity, msg);\n  };\n\n  const shareEntity = () => {\n    const uuid: string | null = localStorage.getItem(\"playerID\");\n    const ruuid: string = uuid !== null ? uuid : \"\";\n    console.log(ruuid, entityObj);\n    const newEvent: EventDto = {\n      uuid: ruuid,\n      payload: {\n        entityName: entityName,\n        entity: entityObj,\n      },\n      type: EventType.Entity,\n    };\n    dispatch(addEvent(newEvent));\n    postEvent(newEvent, peer, conns);\n  };\n\n  return (\n    <>\n      <Modal open={showDeleteDialog} onClose={() => setDeleteDialog(false)}>\n        <Modal.Header>\n          <Modal.Title>Attention</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete '{entity.name}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => deleteEntity()} appearance=\"primary\">\n            Yes, delete!\n          </Button>\n          <Button onClick={() => setDeleteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <TopBar>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => history(-1)} size=\"lg\">\n            <FaArrowLeft />\n          </Button>\n          <Button onClick={() => duplicateEntity(entityObj)} size=\"lg\">\n            <FaClone />\n          </Button>\n          <Button onClick={() => setDeleteDialog(true)} size=\"lg\">\n            <FaTrash />\n          </Button>\n        </ButtonGroup>\n        {liveGroup && liveGroup.id !== -1 && (\n          <Button onClick={() => shareEntity()} size=\"lg\">\n            <MdScreenShare />\n          </Button>\n        )}\n      </TopBar>\n      <EntityDetails\n        configs={Object.getOwnPropertyNames(\n          getEntityDetailConfig(system, entityName)\n        )}\n        entity={entityObj}\n        entityName={entityName}\n        isNew={false}\n        onEdit={(value: any) => editAndSaveEntity(value, \"Saved!\")}\n      />\n    </>\n  );\n};\n\nexport default EntityDetailWrapper;\n\nexport const TopBar = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  flex: 1 1;\n  width: 100%;\n  max-width: calc(100% - 20px);\n  height: 55px;\n  padding: 10px;\n  display: flex;\n  align-items: flex-start;\n  gap: 5px;\n\n  @media (max-width: 576px) {\n    max-width: calc(100% - 20px);\n  }\n`;\n"],"names":["location","useLocation","system","useSelector","state","base","pathname","split","useCallback","RibbonElm","entities","forEach","entity","Ribbon","entityName","findIcon","icon","makeBreadCrumb","styled","history","useNavigate","systemDbName","selectDBName","useState","entityObj","onEdit","useEffect","newObj","getEntityAttributes","attr","slice","console","log","JSON","parse","onClick","size","newEntity","id","createNewWithId","toaster","header","type","name","placement","create","configs","Object","getOwnPropertyNames","getEntityDetailConfig","isNew","dispatch","useDispatch","liveGroup","group","peer","peerContext","conns","connections","editEntity","showDeleteDialog","setDeleteDialog","tableName","editAndSaveEntity","msg","updateWithCallback","result","closable","updateEntity","open","onClose","remove","appearance","TopBar","obj","duplicateEntity","uuid","localStorage","getItem","ruuid","newEvent","payload","EventType","addEvent","postEvent","shareEntity","value","theme","textColor"],"sourceRoot":""}