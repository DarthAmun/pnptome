{"version":3,"sources":["services/DownloadService.tsx","services/VersionService.tsx","services/UploadService.tsx","components/pages/Options.tsx"],"names":["downloadAllFromTableByAttr","systemDbName","tableName","attr","attrLike","fileName","a","reciveAllByAttribute","all","entity","downloadContent","downloadAllFromTable","reciveAll","downloadBackup","filename","updateProgress","console","time","reciveAllPromise","timeEnd","url","window","URL","createObjectURL","Blob","JSON","stringify","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","upgradeTo28","entry","newEntitiy","text","Array","isArray","classes","spell","description","replaceAll","split","readFile","file","callback","blobFile","fileReader","FileReader","onloadend","content","result","json","parse","toString","log","name","readAsText","scanImportedPnpTome","listOfNewEntities","Object","entries","key","value","obj","versionFilter","saveInDB","scanImportedJson","newKey","replace","slice","newClasses","filter","classe","trim","map","newObj","class","newAbilityScores","abilityscores","score","includes","listOfNew","newTableName","bulkList","saveNewFromList","length","updatedEntities","updatedEntity","push","ContentWrapper","Options","location","useLocation","system","useSelector","state","selectDBName","useState","showResetDialog","setResetDialog","files","setFiles","progress","updateBackupProgress","setEntity","entities","setEntities","entityAmount","setEntityAmount","setAttr","setAttrLike","attrs","setAttrs","localStorage","getItem","webhook","setWebhook","webhookUser","setWebhookUser","useEffect","setItem","makeAttrs","reciveCount","count","entityName","useCallback","newEntities","newAttrs","forEach","systemEntity","label","firstToUpper","attributes","OptionContent","Modal","open","onClose","Header","Title","Body","Footer","Button","onClick","deleteDatabase","toaster","Notification","closable","header","type","placement","appearance","Divider","PanelGroup","StyledPanel","Uploader","fileList","action","pathname","draggable","multiple","autoUpload","onUpload","fileSplit","importDTFile","onSuccess","response","onChange","accept","style","lineHeight","Wrapper","Progress","percent","strokeColor","width","InputGroup","Addon","InputPicker","data","cleanable","Input","val","VerticalDivider","FlexWrapper","disabled","deleteAll","deleteAllByAttr","styled","div","Panel","theme","secondColor","mainColor"],"mappings":"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","file":"static/js/14.0f16e6ed.chunk.js","sourcesContent":["import {\n  reciveAll,\n  reciveAllByAttribute,\n  reciveAllPromise,\n} from \"./DatabaseService\";\nimport { IndexableType } from \"dexie\";\nimport Encounter from \"../data/encounter/Encounter\";\nimport Campaign from \"../data/campaign/Campaign\";\nimport Quest from \"../data/campaign/Quest\";\nimport Npc from \"../data/campaign/Npc\";\nimport Location from \"../data/world/Location\";\nimport Event from \"../data/world/Event\";\nimport World from \"../data/world/World\";\nimport Group from \"../data/campaign/Group\";\nimport IEntity from \"../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../database/SystemReducer\";\n\nexport const downloadAllFromTableByAttr = async (\n  systemDbName: string,\n  tableName: string,\n  attr: string,\n  attrLike: string,\n  fileName: string\n) => {\n  reciveAllByAttribute(\n    systemDbName,\n    tableName,\n    attr,\n    attrLike,\n    (all: IEntity[]) => {\n      let entity = { [tableName]: all };\n      downloadContent(entity, fileName);\n    }\n  );\n};\n\nexport const downloadAllFromTable = async (\n  systemDbName: string,\n  tableName: string,\n  fileName: string\n) => {\n  reciveAll(systemDbName, tableName, (all: IndexableType[]) => {\n    let entity = { [tableName]: all };\n    downloadContent(entity, fileName);\n  });\n};\n\nexport const downloadBackup = async (\n  systemDbName: string,\n  filename: string,\n  updateProgress: (progress: number) => void\n) => {\n  console.time(\"Get all\");\n  // let spells = await reciveAllPromise(\"spells\");\n  // updateProgress(2);\n  // let items = await reciveAllPromise(\"items\");\n  // updateProgress(4);\n  // let gears = await reciveAllPromise(\"gears\");\n  // updateProgress(6);\n  // let monsters = await reciveAllPromise(\"monsters\");\n  // updateProgress(8);\n  // let races = await reciveAllPromise(\"races\");\n  // updateProgress(10);\n  // let subraces = await reciveAllPromise(\"subraces\");\n  // updateProgress(12);\n  // let classes = await reciveAllPromise(\"classes\");\n  // updateProgress(14);\n  // let subclasses = await reciveAllPromise(\"subclasses\");\n  // updateProgress(16);\n  // let chars = await reciveAllPromise(\"chars\");\n  // updateProgress(18);\n  // let encounters = await reciveAllPromise(\"encounters\");\n  // updateProgress(20);\n  // let selections = await reciveAllPromise(\"selections\");\n  // updateProgress(22);\n  // let randomTables = await reciveAllPromise(\"randomTables\");\n  // updateProgress(24);\n  // let campaigns = await reciveAllPromise(\"campaigns\");\n  // updateProgress(26);\n  // let quests = await reciveAllPromise(\"quests\");\n  // updateProgress(28);\n  // let npcs = await reciveAllPromise(\"npcs\");\n  // updateProgress(30);\n  // let worlds = await reciveAllPromise(\"worlds\");\n  // updateProgress(32);\n  // let locations = await reciveAllPromise(\"locations\");\n  // updateProgress(34);\n  // let events = await reciveAllPromise(\"events\");\n  // updateProgress(36);\n  // let groups = await reciveAllPromise(\"groups\");\n  // updateProgress(38);\n  // let feats = await reciveAllPromise(\"feats\");\n  // updateProgress(40);\n  // let backgrounds = await reciveAllPromise(\"backgrounds\");\n  // updateProgress(42);\n  let notes = await reciveAllPromise(systemDbName, \"notes\");\n  updateProgress(50);\n  console.timeEnd(\"Get all\");\n\n  console.time(\"Remove Base64 Images\");\n  // spells = spells.map((v: Spell) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // items = items.map((v: Item) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // gears = gears.map((v: Gear) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // monsters = monsters.map((v: Monster) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // races = races.map((v: Race) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // classes = classes.map((v: Class) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // chars = chars.map((v: Char) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // campaigns = campaigns.map((v: Campaign) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // quests = quests.map((v: Quest) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  // npcs = npcs.map((v: Npc) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   if (newV.char !== undefined) {\n  //     let newChar: Char = { ...newV.char };\n  //     newChar.picBase64 = \"\";\n  //     newV.char = newChar;\n  //   } else if (newV.monster !== undefined) {\n  //     let newMonster: Monster = { ...newV.monster };\n  //     newMonster.picBase64 = \"\";\n  //     newV.monster = newMonster;\n  //   }\n  //   return newV;\n  // });\n  // groups = groups.map((v: Group) => {\n  //   let newV = { ...v };\n  //   newV.picBase64 = \"\";\n  //   return newV;\n  // });\n  console.timeEnd(\"Remove Base64 Images\");\n  updateProgress(85);\n\n  // let all: any = {\n  //   spells: spells,\n  //   items: items,\n  //   gears: gears,\n  //   monsters: monsters,\n  //   races: races,\n  //   subraces: subraces,\n  //   classes: classes,\n  //   subclasses: subclasses,\n  //   chars: chars,\n  //   encounters: encounters,\n  //   selections: selections,\n  //   randomTables: randomTables,\n  //   campaigns: campaigns,\n  //   quests: quests,\n  //   npcs: npcs,\n  //   worlds: worlds,\n  //   locations: locations,\n  //   events: events,\n  //   groups: groups,\n  //   feats: feats,\n  //   backgrounds: backgrounds,\n  //   notes: notes,\n  // };\n  // downloadContent(all, filename);\n  updateProgress(100);\n};\n\nconst downloadContent = (all: any, fileName: string) => {\n  const url = window.URL.createObjectURL(new Blob([JSON.stringify(all)]));\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", fileName); // 3. Append to html page\n  document.body.appendChild(link); // 4. Force download\n  link.click(); // 5. Clean up and remove the link\n  document.body.removeChild(link);\n};\n","import IEntity from \"../data/IEntity\";\n\nexport const upgradeTo28 = (entry: {\n  tableName: string;\n  newEntitiy: any;\n}): { tableName: string; newEntitiy: IEntity } => {\n  if (entry.tableName === \"spells\") {\n    if (entry.newEntitiy.text && !Array.isArray(entry.newEntitiy.classes)) {\n      let spell: any = entry.newEntitiy;\n      spell.description = spell.text;\n      delete spell.text;\n      spell.classes = spell.classes.replaceAll(\" \", \"\").split(\",\");\n      return { ...entry, newEntitiy: spell };\n    }\n    return entry;\n  }\n  return entry;\n};\n","import { FileType } from \"rsuite/esm/Uploader/Uploader\";\nimport IEntity from \"../data/IEntity\";\nimport { saveNewFromList } from \"./DatabaseService\";\nimport { upgradeTo28 } from \"./VersionService\";\n\nexport const importDTFile = (systemDbName: string, file: FileType) => {\n  console.log(systemDbName, file);\n  const fileSplit: string[] | undefined = file.name?.split(\".\");\n  if (fileSplit) {\n    const fileExtension: string = fileSplit[fileSplit.length - 1];\n    switch (fileExtension) {\n      case \"json\":\n        readFile(systemDbName, file, scanImportedJson);\n        break;\n      case \"pnptome\":\n        readFile(systemDbName, file, scanImportedPnpTome);\n        break;\n    }\n  }\n};\n\nconst readFile = (\n  systemDbName: string,\n  file: FileType,\n  callback: (systemDbName: string, json: any) => void\n) => {\n  if (file.blobFile) {\n    let fileReader = new FileReader();\n    fileReader.onloadend = function () {\n      const content = fileReader.result;\n      if (content !== null) {\n        let json = JSON.parse(content.toString());\n        console.log(\"Json loaded from \" + file.name);\n        callback(systemDbName, json);\n        console.log(\"---------\");\n      }\n    };\n    fileReader.readAsText(file.blobFile);\n  }\n};\n\nconst scanImportedPnpTome = (systemDbName: string, json: any) => {\n  let listOfNewEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (const [key, value] of Object.entries(json)) {\n    if (Array.isArray(value)) {\n      for (let obj of value) {\n        listOfNewEntities = [\n          ...listOfNewEntities,\n          { tableName: key, newEntitiy: obj },\n        ];\n      }\n    }\n  }\n  listOfNewEntities = versionFilter(listOfNewEntities);\n  saveInDB(systemDbName, listOfNewEntities);\n};\n\nconst scanImportedJson = (systemDbName: string, json: any) => {\n  let listOfNewEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (const [key, value] of Object.entries(json)) {\n    if (Array.isArray(value)) {\n      let newKey =\n        key === \"classes\" || key === \"subclasses\"\n          ? key.replace(\"es\", \"\")\n          : key.slice(0, -1);\n      if (newKey === \"spell\") {\n        for (let obj of value) {\n          let newClasses: string[] = obj.classes\n            .split(\",\")\n            .filter((classe: string) => classe.trim() !== \"\")\n            .map((classe: string) => classe.trim());\n          let newObj = { ...obj, class: newClasses };\n          delete newObj.classes;\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: newObj },\n          ];\n        }\n      } else if (newKey === \"race\") {\n        for (let obj of value) {\n          let newAbilityScores: string[] = obj.abilityscores\n            .split(\",\")\n            .filter((score: string) => score.trim() !== \"\")\n            .map((score: string) => score.trim());\n          newAbilityScores = newAbilityScores.filter((score: string) =>\n            score.includes(\"+\")\n          );\n          let newObj = { ...obj, abilityscores: newAbilityScores };\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: newObj },\n          ];\n        }\n      } else {\n        for (let obj of value) {\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: obj },\n          ];\n        }\n      }\n    }\n  }\n  listOfNewEntities = versionFilter(listOfNewEntities);\n  saveInDB(systemDbName, listOfNewEntities);\n};\n\nconst saveInDB = async (\n  systemDbName: string,\n  listOfNewEntities: { tableName: string; newEntitiy: IEntity }[]\n) => {\n  let listOfNew = [...listOfNewEntities];\n  while (listOfNew.length > 0) {\n    let newTableName = listOfNew[0].tableName;\n    let bulkList: IEntity[] = listOfNew\n      .filter((newEntitiy) => newEntitiy.tableName === newTableName)\n      .map((entity: { tableName: string; newEntitiy: IEntity }) => {\n        return entity.newEntitiy;\n      });\n    console.log(systemDbName, newTableName, bulkList);\n    await saveNewFromList(systemDbName, newTableName, bulkList);\n    listOfNew = listOfNew.filter((entity) => entity.tableName !== newTableName);\n  }\n  console.log(\"Done saving\");\n};\n\nconst versionFilter = (\n  listOfNewEntities: { tableName: string; newEntitiy: IEntity }[]\n): { tableName: string; newEntitiy: IEntity }[] => {\n  let updatedEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (let entity of listOfNewEntities) {\n    let updatedEntity = upgradeTo28(entity);\n    updatedEntities.push(updatedEntity);\n  }\n  return updatedEntities;\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { FaFileExport, FaTrashAlt } from \"react-icons/fa\";\nimport { useLocation } from \"react-router\";\nimport {\n  Button,\n  Notification,\n  Modal,\n  Panel,\n  Progress,\n  toaster,\n  Uploader,\n  Divider,\n  InputPicker,\n  Input,\n  InputGroup,\n} from \"rsuite\";\nimport { FileType } from \"rsuite/esm/Uploader/Uploader\";\nimport {\n  deleteAll,\n  deleteAllByAttr,\n  deleteDatabase,\n  reciveCount,\n} from \"../../services/DatabaseService\";\nimport {\n  downloadAllFromTable,\n  downloadAllFromTableByAttr,\n  downloadBackup,\n} from \"../../services/DownloadService\";\nimport { importDTFile } from \"../../services/UploadService\";\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\nimport {\n  selectDBName,\n  System,\n  SystemEntity,\n} from \"../../database/SystemReducer\";\nimport { firstToUpper } from \"../../services/TextService\";\n\nconst Options = () => {\n  let location = useLocation();\n  const system = useSelector((state: RootState) => state.system);\n  const systemDbName = useSelector(selectDBName);\n  const [showResetDialog, setResetDialog] = useState<boolean>(false);\n  const [files, setFiles] = useState<FileType[]>([]);\n  const [progress, updateBackupProgress] = useState<number>(0);\n  const [entity, setEntity] = useState<string>();\n  const [entities, setEntities] = useState<{ value: string; label: string }[]>(\n    []\n  );\n  const [entityAmount, setEntityAmount] = useState<number>(0);\n  const [attr, setAttr] = useState<string>(\"\");\n  const [attrLike, setAttrLike] = useState<string>(\"\");\n  const [attrs, setAttrs] = useState<{ value: string; label: string }[]>([]);\n\n  const [webhook, setWebhook] = useState<string>(\n    localStorage.getItem(\"webhook\") + \"\"\n  );\n  const [webhookUser, setWebhookUser] = useState<string>(\n    localStorage.getItem(\"webhook_user\") + \"\"\n  );\n\n  useEffect(() => {\n    if (webhook !== localStorage.getItem(\"webhook\"))\n      localStorage.setItem(\"webhook\", webhook);\n  }, [webhook]);\n\n  useEffect(() => {\n    if (webhookUser !== localStorage.getItem(\"webhook_user\"))\n      localStorage.setItem(\"webhook_user\", webhookUser);\n  }, [webhookUser]);\n\n  const handleUpload = (file: FileType) => {\n    importDTFile(systemDbName, file);\n  };\n\n  const handleSuccess = (response: object, file: FileType) => {\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Imported {file.name}.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  useEffect(() => {\n    if (entity) {\n      makeAttrs(system, entity);\n      reciveCount(systemDbName, entity, (count: number) => {\n        setEntityAmount(count);\n      });\n    } else if (system.entities.length > 0) {\n      setEntity(system.entities[0].entityName);\n    }\n  }, [entity, system]);\n\n  const makeAttrs = useCallback(\n    (system: System, entity: string) => {\n      let newEntities: { value: string; label: string }[] = [];\n      let newAttrs: { value: string; label: string }[] = [];\n      system.entities.forEach((systemEntity: SystemEntity) => {\n        newEntities.push({\n          value: systemEntity.entityName,\n          label: firstToUpper(systemEntity.entityName),\n        });\n        if (systemEntity.entityName === entity) {\n          systemEntity.attributes.forEach((attr: string) => {\n            newAttrs.push({ value: attr, label: attr });\n          });\n        }\n      });\n      console.log(newEntities, newAttrs);\n      setEntities(newEntities);\n      setAttrs(newAttrs);\n    },\n    [entity, system]\n  );\n\n  const resetDatabase = () => {\n    deleteDatabase(systemDbName);\n    setResetDialog(false);\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Reset Database.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  return (\n    <ContentWrapper>\n      <OptionContent>\n        <Modal open={showResetDialog} onClose={() => setResetDialog(false)}>\n          <Modal.Header>\n            <Modal.Title>Attention</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Are you sure you want to rest the database and delete all data\n            stored?\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => resetDatabase()} appearance=\"primary\">\n              Yes, reset!\n            </Button>\n            <Button onClick={() => setResetDialog(false)} appearance=\"subtle\">\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Divider>General</Divider>\n        <PanelGroup>\n          <StyledPanel header=\"Import Backup(.pnptome or .json)\">\n            <Uploader\n              fileList={files}\n              action={location.pathname}\n              draggable\n              multiple\n              autoUpload\n              onUpload={handleUpload}\n              onSuccess={handleSuccess}\n              onChange={setFiles}\n              accept={\".pnptome, .json\"}\n            >\n              <div style={{ lineHeight: \"100px\" }}>\n                Click or Drag files to this area to upload\n              </div>\n            </Uploader>\n          </StyledPanel>\n          <StyledPanel header=\"Backup (.pnptome)\">\n            <Wrapper>\n              Create a backup of the database with all the homebrew in it to\n              download.\n              <br />\n              <br />\n              <Button\n                appearance=\"primary\"\n                onClick={() =>\n                  downloadBackup(\n                    systemDbName,\n                    \"PnPTome_all.pnptome\",\n                    updateBackupProgress\n                  )\n                }\n              >\n                <FaFileExport /> Download Backup\n              </Button>\n              {progress > 0 && (\n                <Progress percent={progress} strokeColor=\"#F55C5C\" />\n              )}\n            </Wrapper>\n          </StyledPanel>\n          <StyledPanel header=\"Reset Database\">\n            <Wrapper>\n              Reset the database which will result in all data been permanently\n              deleted.\n              <br />\n              <br />\n              <Button appearance=\"primary\" onClick={() => setResetDialog(true)}>\n                <FaTrashAlt /> Reset Database\n              </Button>\n            </Wrapper>\n          </StyledPanel>\n        </PanelGroup>\n        <Divider>Data Management</Divider>\n        <PanelGroup>\n          <StyledPanel style={{ width: \"500px\" }}>\n            <Wrapper>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>Entity</InputGroup.Addon>\n                <InputPicker\n                  value={entity}\n                  onChange={setEntity}\n                  data={entities}\n                  cleanable={false}\n                />\n              </InputGroup>\n              <Divider>Filter</Divider>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>Attribute</InputGroup.Addon>\n                <InputPicker\n                  value={attr}\n                  onChange={setAttr}\n                  data={attrs}\n                  style={{ width: 150 }}\n                  cleanable={true}\n                />\n              </InputGroup>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>=</InputGroup.Addon>\n                <Input\n                  value={attrLike}\n                  onChange={(val: any) => setAttrLike(val)}\n                />\n              </InputGroup>\n            </Wrapper>\n            <VerticalDivider />\n            {entity && (\n              <FlexWrapper>\n                {!attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      downloadAllFromTable(\n                        systemDbName,\n                        entity,\n                        `PnPTome_${entity}.pnptome`\n                      )\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaFileExport /> Backup all {entityAmount} {entity}\n                  </Button>\n                )}\n                {attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      downloadAllFromTableByAttr(\n                        systemDbName,\n                        entity,\n                        attr,\n                        attrLike,\n                        `PnPTome_${entity}_${attr}(${attrLike}).pnptome`\n                      )\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaFileExport /> Backup {attr}({attrLike}) {entity}\n                  </Button>\n                )}\n                <br />\n                {!attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() => deleteAll(systemDbName, entity)}\n                    disabled={entity === \"\"}\n                  >\n                    <FaTrashAlt /> Delete all {entityAmount} {entity}\n                  </Button>\n                )}\n                {attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      deleteAllByAttr(\n                        systemDbName,\n                        entity,\n                        attr,\n                        attrLike\n                      )\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaTrashAlt /> Delete {attr}({attrLike}) {entity}\n                  </Button>\n                )}\n                {/* <Tag size=\"lg\">{entityAmount}</Tag> {entity} currently in the\n                Database. */}\n              </FlexWrapper>\n            )}\n          </StyledPanel>\n        </PanelGroup>\n        <Divider>Discord</Divider>\n        <PanelGroup>\n          <StyledPanel header=\"Webhook\">\n            <InputGroup>\n              <InputGroup.Addon>PlayerName</InputGroup.Addon>\n              <Input\n                value={webhookUser}\n                onChange={(val: any) => setWebhookUser(val)}\n              />\n            </InputGroup>\n            <InputGroup>\n              <InputGroup.Addon>Webhook</InputGroup.Addon>\n              <Input value={webhook} onChange={(val: any) => setWebhook(val)} />\n            </InputGroup>\n          </StyledPanel>\n        </PanelGroup>\n      </OptionContent>\n    </ContentWrapper>\n  );\n};\n\nexport default Options;\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  display: flex;\n`;\nconst OptionContent = styled.div`\n  width: 100%;\n`;\n\nconst PanelGroup = styled.div`\n  margin-left: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n`;\n\nconst StyledPanel = styled(Panel)`\n  width: 400px;\n  background-color: ${({ theme }) => theme.secondColor};\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.mainColor};\n\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: stretch;\n  }\n\n  & .rs-input-group {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  flex: 1 1;\n`;\nconst FlexWrapper = styled(Wrapper)`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  gap: 10px;\n`;\n\nconst VerticalDivider = styled.div`\n  flex: 1 1;\n  max-width: 1px;\n  margin: 10px;\n  border-left: 1px solid var(--rs-divider-border);\n`;\n"],"sourceRoot":""}