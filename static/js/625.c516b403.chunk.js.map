{"version":3,"file":"static/js/625.c516b403.chunk.js","mappings":"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","sources":["components/pages/Groups.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { IoPulse } from \"react-icons/io5\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Button,\n  Input,\n  Panel,\n  Notification,\n  toaster,\n  InputGroup,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport {\n  Group,\n  initialGroupState,\n  setGroup,\n} from \"../../database/GroupReducer\";\nimport { RootState } from \"../../database/Store\";\nimport {\n  createNewWithId,\n  reciveAllFromTable,\n} from \"../../services/DatabaseService\";\n\nconst Groups = () => {\n  let history = useNavigate();\n  const dispatch = useDispatch();\n  const liveGroup = useSelector((state: RootState) => state.group);\n  const [groups, changeGroups] = useState<Group[]>([]);\n  const [newGroupDialog, showNewGroup] = useState<boolean>(false);\n  const [newGroup, setNewGroup] = useState<Group>(initialGroupState);\n\n  useEffect(() => {\n    reciveAllFromTable(\"PnPTomeDB\", \"groups\", (entries: any[]) => {\n      changeGroups(entries);\n    });\n  }, [newGroupDialog]);\n\n  const startSession = (group: Group) => {\n    dispatch(setGroup(group));\n  };\n  const stopSession = () => {\n    dispatch(setGroup(initialGroupState));\n  };\n  const editGroup = (group: Group) => {\n    history({\n      pathname: `/group-detail/${group.id}`,\n    });\n  };\n\n  const create = () => {\n    let newEntity: any = { ...newGroup };\n    delete newEntity.id;\n    showNewGroup(false);\n    createNewWithId(\"PnPTomeDB\", \"groups\", newEntity, (id: number) => {\n      toaster.push(\n        <Notification header={\"Success\"} type=\"success\">\n          Success: Created new group named {newEntity.name}.\n        </Notification>,\n        { placement: \"bottomStart\" }\n      );\n    });\n  };\n\n  const copy = () => {\n    const uuid = localStorage.getItem(\"playerID\");\n    if (uuid !== null) navigator.clipboard.writeText(uuid);\n  };\n\n  return (\n    <>\n      <UserInfo>\n        <InputGroup>\n          <InputGroup.Addon>UserID:</InputGroup.Addon>\n          <Input value={localStorage.getItem(\"playerID\") || \"\"} />\n          <InputGroup.Button onClick={copy}>Copy</InputGroup.Button>\n        </InputGroup>\n      </UserInfo>\n      {!newGroupDialog && (\n        <GroupsContainer>\n          <Panel\n            shaded\n            bordered\n            bodyFill\n            style={{ display: \"inline-block\", width: 240 }}\n          >\n            <Panel header=\"Make a new Group\">\n              <Button onClick={(e) => showNewGroup(true)}>New Group</Button>\n            </Panel>\n          </Panel>\n          {groups.map((group: Group, index: number) => {\n            return (\n              <Panel\n                key={index}\n                shaded\n                bordered\n                bodyFill\n                style={{ display: \"inline-block\", width: 240 }}\n              >\n                <img src={group.pic} height=\"160\" />\n                <StyledPanelBody header={group.name}>\n                  {group.id === liveGroup.id ? (\n                    <>\n                      <IconWrapper title=\"Currently used\">\n                        <IoPulse />\n                      </IconWrapper>\n                      <Button\n                        onClick={(e) => stopSession()}\n                        style={{ marginRight: \"10px\" }}\n                      >\n                        Stop\n                      </Button>\n                    </>\n                  ) : (\n                    <Button\n                      onClick={(e) => startSession(group)}\n                      style={{ marginRight: \"10px\" }}\n                    >\n                      Start\n                    </Button>\n                  )}\n                  <Button onClick={(e) => editGroup(group)}>Edit</Button>\n                </StyledPanelBody>\n              </Panel>\n            );\n          })}\n        </GroupsContainer>\n      )}\n      {newGroupDialog && (\n        <StyledPanel shaded bordered bodyFill>\n          <Input\n            placeholder=\"Group Name\"\n            value={newGroup.name}\n            onChange={(val: any) =>\n              setNewGroup((g) => {\n                return { ...g, name: val };\n              })\n            }\n          />\n          <Button onClick={(e) => create()} style={{ marginRight: \"10px\" }}>\n            Save\n          </Button>\n          <Button onClick={(e) => showNewGroup(false)}>Back</Button>\n        </StyledPanel>\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n\nconst GroupsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst StyledPanel = styled(Panel)`\n  padding: 10px;\n  width: 240px;\n  background-color: ${({ theme }) => theme.secondColor};\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n`;\n\nconst StyledPanelBody = styled(Panel)`\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${({ theme }) => theme.textColor};\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    align-items: center;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  color: ${({ theme }) => theme.highlight};\n  background-color: ${({ theme }) => theme.mainColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 30px;\n`;\n\nconst UserInfo = styled.div`\n  margin: 10px;\n`;\n"],"names":["history","useNavigate","dispatch","useDispatch","liveGroup","useSelector","state","group","useState","groups","changeGroups","newGroupDialog","showNewGroup","initialGroupState","newGroup","setNewGroup","useEffect","reciveAllFromTable","entries","UserInfo","value","localStorage","getItem","onClick","uuid","navigator","clipboard","writeText","GroupsContainer","shaded","bordered","bodyFill","style","display","width","header","e","map","index","src","pic","height","StyledPanelBody","name","id","IconWrapper","title","setGroup","marginRight","startSession","pathname","editGroup","StyledPanel","placeholder","onChange","val","g","newEntity","createNewWithId","toaster","type","placement","create","styled","Panel","theme","secondColor","textColor","highlight","mainColor"],"sourceRoot":""}