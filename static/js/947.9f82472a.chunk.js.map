{"version":3,"file":"static/js/947.9f82472a.chunk.js","mappings":"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","sources":["components/generic/details/systemDetails/DetailConfigEditor.tsx","components/generic/details/systemDetails/SearchConfigEditor.tsx","components/generic/details/systemDetails/TileConfigEditor.tsx","components/generic/details/systemDetails/SystemEntityEditor.tsx","components/generic/details/SystemDetails.tsx"],"sourcesContent":["import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle, FaTrash } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n  TagPicker,\n  Badge,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { System, SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon } from \"../../../../services/IconService\";\nimport EntityDetails from \"../EntityDetails\";\n\ninterface $DetailConfigEditorProps {\n  entity: System;\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  icons: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst DetailConfigEditor = ({\n  entity,\n  systemEntity,\n  entities,\n  icons,\n  changeEntity,\n}: $DetailConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.detailConfig)[0]\n  );\n\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const [baseAttrs, changeBaseAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n  useEffect(() => {\n    if (\n      selectedPart &&\n      systemEntity.detailConfig[selectedPart] &&\n      systemEntity.detailConfig[selectedPart].viewEntity\n    ) {\n      const { linkedBy, fieldsDisplayed } =\n        systemEntity.detailConfig[selectedPart].viewEntity;\n      const name = systemEntity.detailConfig[linkedBy].linkToAttribute;\n      entity.entities\n        .filter((ent) => ent.entityName === name)\n        .map((ent) => {\n          const newAttributes: {\n            label: string;\n            value: string;\n          }[] = [];\n          ent.attributes.forEach((attr) => {\n            newAttributes.push({\n              label: attr,\n              value: attr,\n            });\n          });\n          changeBaseAttrs(newAttributes);\n        });\n    }\n  }, [selectedPart, systemEntity, entity]);\n\n  const addNewPart = () => {\n    let newDetailConfig: any = { ...systemEntity.detailConfig };\n    newDetailConfig[\"new\"] = { type: DetailConfigTypes[0].value };\n    changeEntity({\n      ...systemEntity,\n      detailConfig: newDetailConfig,\n    });\n    changeSelectedPart(\"new\");\n  };\n\n  const deleteConfig = () => {\n    let newDetailConfig: any = { ...systemEntity.detailConfig };\n    delete newDetailConfig[selectedPart];\n    changeEntity({\n      ...systemEntity,\n      detailConfig: newDetailConfig,\n    });\n  };\n\n  const DetailConfigTypes = [\n    {\n      label: \"CreatableSetString\",\n      value: \"CreatableSetString\",\n    },\n    {\n      label: \"CreatableSetNumber\",\n      value: \"CreatableSetNumber\",\n    },\n    {\n      label: \"FoundFlag\",\n      value: \"FoundFlag\",\n    },\n    {\n      label: \"SwitchBoolean\",\n      value: \"SwitchBoolean\",\n    },\n    {\n      label: \"ImageName\",\n      value: \"ImageName\",\n    },\n    {\n      label: \"CompletableString\",\n      value: \"CompletableString\",\n    },\n    {\n      label: \"SearchableString\",\n      value: \"SearchableString\",\n    },\n    {\n      label: \"SearchableText\",\n      value: \"SearchableText\",\n    },\n    {\n      label: \"SetEntities\",\n      value: \"SetEntities\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n    {\n      label: \"ViewEntity\",\n      value: \"ViewEntity\",\n    },\n    {\n      label: \"SubEntityConnector\",\n      value: \"SubEntityConnector\",\n    },\n    {\n      label: \"EditableSubEntities\",\n      value: \"EditableSubEntities\",\n    },\n  ];\n\n  const tileOptions = (val: ConfigPart) => {\n    console.log(val.type);\n    switch (true) {\n      case val.type === \"FoundString\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newDetailConfig: any = { ...systemEntity.detailConfig };\n                  if (newDetailConfig[selectedPart].found)\n                    newDetailConfig[selectedPart].found.field = val;\n                  else\n                    newDetailConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newDetailConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newDetailConfig: any = { ...systemEntity.detailConfig };\n                  if (newDetailConfig[selectedPart].found)\n                    newDetailConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newDetailConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newDetailConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SetEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <SelectPicker\n                data={entities}\n                value={val.linkToAttribute}\n                onChange={(val: any) => {\n                  let newDetailConfig: any = { ...systemEntity.detailConfig };\n                  newDetailConfig[selectedPart].linkToAttribute = val;\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newDetailConfig,\n                  });\n                }}\n                placeholder={\"Detail Representation\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"ViewEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Base Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.viewEntity?.linkedBy}\n                onChange={(val: any) => {\n                  let newDetailConfig: any = { ...systemEntity.detailConfig };\n                  if (newDetailConfig[selectedPart].viewEntity)\n                    newDetailConfig[selectedPart].viewEntity.linkedBy = val;\n                  else\n                    newDetailConfig[selectedPart].viewEntity = {\n                      linkedBy: val,\n                      fieldsDisplayed: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newDetailConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Attributes to display: </label>\n              <TagPicker\n                creatable\n                data={baseAttrs}\n                value={val.viewEntity?.fieldsDisplayed}\n                onCreate={(value, item) => {\n                  console.log(value, item);\n                }}\n                onChange={(val: any) => {\n                  console.log(val);\n                  let newDetailConfig: any = { ...systemEntity.detailConfig };\n                  if (newDetailConfig[selectedPart].viewEntity)\n                    newDetailConfig[selectedPart].viewEntity.fieldsDisplayed =\n                      val;\n                  else\n                    newDetailConfig[selectedPart].viewEntity = {\n                      linkedBy: \"\",\n                      fieldsDisplayed: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    detailConfig: newDetailConfig,\n                  });\n                }}\n                trigger={\"Enter\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SubEntityConnector\":\n        return <>SubEntityConnector</>;\n      case val.type === \"EditableSubEntities\":\n        return <>SubEntityConnector</>;\n    }\n  };\n\n  const previewEntity: any = {\n    name: \"name\",\n    sources: \"sources\",\n    [selectedPart]: \"test\",\n  };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.detailConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.detailConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const detailConfig: any = { ...systemEntity.detailConfig };\n                const renamed = _.mapKeys(detailConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  detailConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={DetailConfigTypes}\n              value={systemEntity.detailConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newDetailConfig: any = { ...systemEntity.detailConfig };\n                newDetailConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  detailConfig: newDetailConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n        {selectedPart && systemEntity.detailConfig[selectedPart] && (\n          <SelectPicker\n            value={systemEntity.detailConfig[selectedPart]?.icon}\n            data={icons}\n            onChange={(val: any) => {\n              let newDetailConfig: any = { ...systemEntity.detailConfig };\n              newDetailConfig[selectedPart].icon = val;\n              changeEntity({\n                ...systemEntity,\n                detailConfig: newDetailConfig,\n              });\n            }}\n            renderMenuItem={(label, item) => {\n              return (\n                <div>\n                  {findIcon(item.value + \"\")} {label}\n                </div>\n              );\n            }}\n            renderValue={(value) => {\n              return (\n                <div>\n                  {findIcon(value.toString())} {value}\n                </div>\n              );\n            }}\n          />\n        )}\n\n        {selectedPart &&\n          systemEntity.detailConfig[selectedPart] &&\n          tileOptions(systemEntity.detailConfig[selectedPart])}\n\n        {selectedPart && systemEntity.detailConfig[selectedPart] && (\n          <>\n            <Button onClick={() => deleteConfig()}>\n              <FaTrash />\n            </Button>\n            <PreviewBadge content=\"Preview\">\n              <EntityDetails\n                configs={[selectedPart]}\n                entityName={systemEntity.entityName}\n                entity={previewEntity as IEntity}\n                onEdit={(value: any) => console.log(\"test\")}\n                isNew={true}\n                dummyFieldEntry={systemEntity.searchConfig[selectedPart]}\n              />\n            </PreviewBadge>\n          </>\n        )}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default DetailConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst PreviewBadge = styled(Badge)`\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.mainColor};\n  padding: 10px;\n  width: calc(100% - 15px);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle, FaTrash } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n  Badge,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport { SystemEntity } from \"../../../../database/SystemReducer\";\nimport EntitySearch from \"../../EntitySearch\";\nimport EntitySearchModules from \"../../EntitySearchModules\";\n\ninterface $SearchConfigEditorProps {\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst SearchConfigEditor = ({\n  systemEntity,\n  entities,\n  changeEntity,\n}: $SearchConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.searchConfig)[0]\n  );\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const addNewPart = () => {\n    let newSearchConfig: any = { ...systemEntity.searchConfig };\n    newSearchConfig[\"new\"] = { type: SearchConfigTypes[0].value };\n    changeEntity({\n      ...systemEntity,\n      searchConfig: newSearchConfig,\n    });\n    changeSelectedPart(\"new\");\n  };\n\n  const deleteConfig = () => {\n    let newSearchConfig: any = { ...systemEntity.searchConfig };\n    delete newSearchConfig[selectedPart];\n    changeEntity({\n      ...systemEntity,\n      searchConfig: newSearchConfig,\n    });\n  };\n\n  const SearchConfigTypes = [\n    {\n      label: \"SearchableString\",\n      value: \"SearchableString\",\n    },\n    {\n      label: \"CreatableSetString\",\n      value: \"CreatableSetString\",\n    },\n    {\n      label: \"CompletableString\",\n      value: \"CompletableString\",\n    },\n    {\n      label: \"FoundString\",\n      value: \"FoundString\",\n    },\n    {\n      label: \"CreatableSetNumber\",\n      value: \"CreatableSetNumber\",\n    },\n    {\n      label: \"SearchableText\",\n      value: \"SearchableText\",\n    },\n    {\n      label: \"SetEntities\",\n      value: \"SetEntities\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n    {\n      label: \"SwitchBoolean\",\n      value: \"SwitchBoolean\",\n    },\n  ];\n  const searchOptions = (val: ConfigPart) => {\n    switch (true) {\n      case val.type === \"FoundString\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.field = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  if (newSearchConfig[selectedPart].found)\n                    newSearchConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newSearchConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n      case val.type === \"SetEntity\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <SelectPicker\n                data={entities}\n                value={val.linkToAttribute}\n                onChange={(val: any) => {\n                  let newSearchConfig: any = { ...systemEntity.searchConfig };\n                  newSearchConfig[selectedPart].linkToAttribute = val;\n                  changeEntity({\n                    ...systemEntity,\n                    searchConfig: newSearchConfig,\n                  });\n                }}\n                placeholder={\"Detail Representation\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n    }\n  };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.searchConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.searchConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const searchConfig: any = { ...systemEntity.searchConfig };\n                const renamed = _.mapKeys(searchConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  searchConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={SearchConfigTypes}\n              value={systemEntity.searchConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newSearchConfig: any = { ...systemEntity.searchConfig };\n                newSearchConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  searchConfig: newSearchConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n\n        {selectedPart &&\n          systemEntity.searchConfig[selectedPart] &&\n          searchOptions(systemEntity.searchConfig[selectedPart])}\n\n        {selectedPart && systemEntity.searchConfig[selectedPart] && (\n          <>\n            <Button onClick={() => deleteConfig()}>\n              <FaTrash />\n            </Button>\n            <PreviewBadge content=\"Preview\">\n              <EntitySearchModules\n                configs={[selectedPart]}\n                entityName={systemEntity.entityName}\n                entities={[{ name: \"test\" }]}\n                applyFilterChange={(filter: any, type: any) =>\n                  console.log(\"empty\")\n                }\n                removeFilterChange={(type: any) => console.log(\"empty\")}\n                dummyFieldEntry={systemEntity.searchConfig[selectedPart]}\n              />\n            </PreviewBadge>\n          </>\n        )}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default SearchConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst PreviewBadge = styled(Badge)`\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.mainColor};\n  padding: 10px;\n  width: calc(100% - 15px);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n","import _ from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { FaPlusCircle, FaTrash } from \"react-icons/fa\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Button,\n  IconButton,\n  SelectPicker,\n  Input,\n  Badge,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon } from \"../../../../services/IconService\";\nimport EntityTile from \"../../EntityTile\";\n\ninterface $TileConfigEditorProps {\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  icons: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n}\n\nconst TileConfigEditor = ({\n  systemEntity,\n  entities,\n  icons,\n  changeEntity,\n}: $TileConfigEditorProps) => {\n  const [selectedPart, changeSelectedPart] = useState<string>(\n    Object.keys(systemEntity.tileConfig)[0]\n  );\n\n  const [attrs, changeAttrs] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    const newAttributes: {\n      label: string;\n      value: string;\n    }[] = [];\n    systemEntity.attributes.forEach((attr) => {\n      newAttributes.push({\n        label: attr,\n        value: attr,\n      });\n    });\n    changeAttrs(newAttributes);\n  }, [systemEntity]);\n\n  const addNewPart = () => {\n    let newTileConfig: any = { ...systemEntity.tileConfig };\n    newTileConfig[\"new\"] = { type: TileConfigTypes[0].value };\n    changeEntity({\n      ...systemEntity,\n      tileConfig: newTileConfig,\n    });\n    changeSelectedPart(\"new\");\n  };\n\n  const deleteConfig = () => {\n    let newTileConfig: any = { ...systemEntity.tileConfig };\n    delete newTileConfig[selectedPart];\n    changeEntity({\n      ...systemEntity,\n      tileConfig: newTileConfig,\n    });\n  };\n\n  const TileConfigTypes = [\n    {\n      label: \"ColoredFlag\",\n      value: \"ColoredFlag\",\n    },\n    {\n      label: \"FoundFlag\",\n      value: \"FoundFlag\",\n    },\n    {\n      label: \"BooleanFlag\",\n      value: \"BooleanFlag\",\n    },\n    {\n      label: \"RoundNumberFlag\",\n      value: \"RoundNumberFlag\",\n    },\n    {\n      label: \"ImageName\",\n      value: \"ImageName\",\n    },\n    {\n      label: \"SmallProp\",\n      value: \"SmallProp\",\n    },\n    {\n      label: \"SmallSetProp\",\n      value: \"SmallSetProp\",\n    },\n    {\n      label: \"WideProp\",\n      value: \"WideProp\",\n    },\n    {\n      label: \"WideSetProp\",\n      value: \"WideSetProp\",\n    },\n    {\n      label: \"SetEntity\",\n      value: \"SetEntity\",\n    },\n  ];\n\n  const tileOptions = (val: ConfigPart) => {\n    switch (true) {\n      case val.type === \"FoundFlag\":\n        return (\n          <SpecialConfigs>\n            <SpecialConfig>\n              <label>Searched Attribute: </label>\n              <SelectPicker\n                data={attrs}\n                value={val.found?.field}\n                onChange={(val: any) => {\n                  let newTileConfig: any = { ...systemEntity.tileConfig };\n                  if (newTileConfig[selectedPart].found)\n                    newTileConfig[selectedPart].found.field = val;\n                  else\n                    newTileConfig[selectedPart].found = {\n                      field: val,\n                      searchTerm: \"\",\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    tileConfig: newTileConfig,\n                  });\n                }}\n                cleanable={false}\n                placeholder={\"Attribute\"}\n              />\n            </SpecialConfig>\n            <SpecialConfig>\n              <label>Keyword: </label>\n              <Input\n                value={val.found?.searchTerm}\n                onChange={(val: any) => {\n                  let newTileConfig: any = { ...systemEntity.tileConfig };\n                  if (newTileConfig[selectedPart].found)\n                    newTileConfig[selectedPart].found.searchTerm = val;\n                  else\n                    newTileConfig[selectedPart].found = {\n                      field: \"\",\n                      searchTerm: val,\n                    };\n                  changeEntity({\n                    ...systemEntity,\n                    tileConfig: newTileConfig,\n                  });\n                }}\n                placeholder={\"Key\"}\n              />\n            </SpecialConfig>\n          </SpecialConfigs>\n        );\n    }\n  };\n\n  const previewEntity: any = { name: \"name\", sources: \"sources\", [selectedPart]: \"test\" };\n\n  return (\n    <>\n      <ButtonToolbar>\n        <ButtonGroup>\n          {Object.getOwnPropertyNames(systemEntity.tileConfig).map(\n            (keyName: any, index: number) => {\n              return (\n                <Button\n                  onClick={() => changeSelectedPart(keyName)}\n                  appearance={keyName === selectedPart ? \"primary\" : \"default\"}\n                >\n                  {keyName}\n                </Button>\n              );\n            }\n          )}\n        </ButtonGroup>\n        <IconButton icon={<FaPlusCircle />} onClick={() => addNewPart()} />\n      </ButtonToolbar>\n      <ConfigOptions>\n        {selectedPart && systemEntity.tileConfig[selectedPart] && (\n          <>\n            <Input\n              style={{ width: 200 }}\n              value={selectedPart}\n              onChange={(val: any) => {\n                const tileConfig: any = { ...systemEntity.tileConfig };\n                const renamed = _.mapKeys(tileConfig, function (value, key) {\n                  if (key === selectedPart) {\n                    return val;\n                  }\n                  return key;\n                });\n                changeSelectedPart(val);\n                changeEntity({\n                  ...systemEntity,\n                  tileConfig: renamed,\n                });\n              }}\n            />\n            <SelectPicker\n              data={TileConfigTypes}\n              value={systemEntity.tileConfig[selectedPart]?.type}\n              onChange={(val: any) => {\n                let newTileConfig: any = { ...systemEntity.tileConfig };\n                newTileConfig[selectedPart].type = val;\n                changeEntity({\n                  ...systemEntity,\n                  tileConfig: newTileConfig,\n                });\n              }}\n              placeholder={\"Detail Representation\"}\n              cleanable={false}\n            />\n          </>\n        )}\n        {selectedPart && systemEntity.tileConfig[selectedPart] && (\n          <SelectPicker\n            value={systemEntity.tileConfig[selectedPart]?.icon}\n            data={icons}\n            onChange={(val: any) => {\n              let newTileConfig: any = { ...systemEntity.tileConfig };\n              newTileConfig[selectedPart].icon = val;\n              changeEntity({\n                ...systemEntity,\n                tileConfig: newTileConfig,\n              });\n            }}\n            renderMenuItem={(label, item) => {\n              return (\n                <div>\n                  {findIcon(item.value + \"\")} {label}\n                </div>\n              );\n            }}\n            renderValue={(value) => {\n              return (\n                <div>\n                  {findIcon(value.toString())} {value}\n                </div>\n              );\n            }}\n          />\n        )}\n\n        {selectedPart &&\n          systemEntity.tileConfig[selectedPart] &&\n          tileOptions(systemEntity.tileConfig[selectedPart])}\n\n        {selectedPart && systemEntity.tileConfig[selectedPart] && (\n          <>\n            <Button onClick={() => deleteConfig()}>\n              <FaTrash />\n            </Button>\n            <PreviewBadge content=\"Preview\">\n              <EntityTile\n                configs={[selectedPart]}\n                entityName={systemEntity.entityName}\n                //TODO need to add things for FoundFlag etc to find value\n                entity={previewEntity as IEntity}\n                dummyFieldEntry={systemEntity.tileConfig[selectedPart]}\n              />\n            </PreviewBadge>\n          </>\n        )}\n      </ConfigOptions>\n    </>\n  );\n};\n\nexport default TileConfigEditor;\n\nconst ConfigOptions = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst SpecialConfigs = styled(ConfigOptions)`\n  margin-top: 0px;\n`;\nconst SpecialConfig = styled(ConfigOptions)`\n  margin-top: 0px;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst PreviewBadge = styled(Badge)`\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.mainColor};\n  padding: 10px;\n  width: calc(100% - 15px);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n","import { useState, useEffect } from \"react\";\nimport { FaPlus, FaTrash } from \"react-icons/fa\";\nimport {\n  InputGroup,\n  Input,\n  Checkbox,\n  SelectPicker,\n  Panel,\n  TagGroup,\n  Tag,\n  PanelGroup,\n  IconButton,\n  Button,\n  Modal,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport { System, SystemEntity } from \"../../../../database/SystemReducer\";\nimport { findIcon, IconSet } from \"../../../../services/IconService\";\nimport DetailConfigEditor from \"./DetailConfigEditor\";\nimport SearchConfigEditor from \"./SearchConfigEditor\";\nimport TileConfigEditor from \"./TileConfigEditor\";\n\ninterface $SystemEntityProps {\n  entity: System;\n  systemEntity: SystemEntity;\n  entities: { label: string; value: string }[];\n  changeEntity: (entity: SystemEntity) => void;\n  deleteSystemEntity: (entity: SystemEntity) => void;\n}\n\nconst SystemEntityEditor = ({\n  entity,\n  systemEntity,\n  entities,\n  changeEntity,\n  deleteSystemEntity,\n}: $SystemEntityProps) => {\n  const [tags, setTags] = useState<string[] | undefined>(undefined);\n  const [typing, setTyping] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [showDeleteSystemEntityDialog, changeDeleteSystemEntityDialog] =\n    useState<boolean>(false);\n\n  const [icons, setIcons] = useState<\n    {\n      label: string;\n      value: string;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    if (\n      tags &&\n      JSON.stringify(systemEntity.attributes) !== JSON.stringify(tags)\n    )\n      changeEntity({ ...systemEntity, attributes: tags });\n  }, [tags]);\n\n  useEffect(() => {\n    let newIcons: {\n      label: string;\n      value: string;\n    }[] = [];\n    IconSet.forEach((iconSet, key) => {\n      newIcons.push({\n        label: key,\n        value: key,\n      });\n    });\n    setIcons(newIcons);\n  }, []);\n\n  const removeAttr = (tag: string) => {\n    const nextTags = systemEntity.attributes.filter((item) => item !== tag);\n    setTags(nextTags);\n  };\n  const addNewTag = () => {\n    const nextTags = inputValue\n      ? [...systemEntity.attributes, inputValue]\n      : tags;\n    setTags(nextTags);\n    setTyping(false);\n    setInputValue(\"\");\n  };\n  const startAddNewTag = () => {\n    setTyping(true);\n  };\n  const renderAttrInput = () => {\n    if (typing) {\n      return (\n        <Input\n          className=\"tag-input\"\n          size=\"xs\"\n          style={{ width: 100 }}\n          value={inputValue}\n          onChange={(val: any) => setInputValue(val)}\n          onBlur={addNewTag}\n          onPressEnter={addNewTag}\n        />\n      );\n    }\n    return (\n      <IconButton\n        className=\"tag-add-btn\"\n        onClick={startAddNewTag}\n        icon={<FaPlus />}\n        appearance=\"ghost\"\n        size=\"xs\"\n      />\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        open={showDeleteSystemEntityDialog}\n        onClose={() => changeDeleteSystemEntityDialog(false)}\n      >\n        <Modal.Header>\n          <Modal.Title>Delete</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete '{systemEntity?.entityName}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => deleteSystemEntity(systemEntity)}\n            appearance=\"primary\"\n          >\n            Yes, delete!\n          </Button>\n          <Button\n            onClick={() => changeDeleteSystemEntityDialog(false)}\n            appearance=\"subtle\"\n          >\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Entity>\n        <InputGroup>\n          <InputGroup.Addon>Entity Name</InputGroup.Addon>\n          <Input\n            value={systemEntity.entityName}\n            onChange={(val: any) =>\n              changeEntity({ ...systemEntity, entityName: val })\n            }\n          />\n        </InputGroup>\n        <Checkbox\n          defaultChecked\n          checked={systemEntity.isMainEntity}\n          onChange={(val: any, checked: boolean) =>\n            changeEntity({ ...systemEntity, isMainEntity: checked })\n          }\n        >\n          {\" \"}\n          is a main entity?\n        </Checkbox>\n        <SelectPicker\n          value={systemEntity.icon}\n          data={icons}\n          onChange={(val: any) => changeEntity({ ...systemEntity, icon: val })}\n          renderMenuItem={(label, item) => {\n            return (\n              <div>\n                {findIcon(item.value + \"\")} {label}\n              </div>\n            );\n          }}\n          renderValue={(value) => {\n            return (\n              <div>\n                {findIcon(value.toString())} {value}\n              </div>\n            );\n          }}\n        />\n        <StyledPanelGroup accordion bordered>\n          <Panel header={`${systemEntity.entityName} attributes`}>\n            <StyledTagGroup>\n              {systemEntity &&\n                systemEntity.attributes?.map((attr, index) => (\n                  <Tag key={index} closable onClose={() => removeAttr(attr)}>\n                    {attr}\n                  </Tag>\n                ))}\n              {renderAttrInput()}\n            </StyledTagGroup>\n          </Panel>\n          <Panel header={`${systemEntity.entityName} search config`}>\n            <SearchConfigEditor\n              systemEntity={systemEntity}\n              entities={entities}\n              changeEntity={changeEntity}\n            />\n          </Panel>\n          <Panel header={`${systemEntity.entityName} tile config`}>\n            <TileConfigEditor\n              systemEntity={systemEntity}\n              entities={entities}\n              icons={icons}\n              changeEntity={changeEntity}\n            />\n          </Panel>\n          <Panel header={`${systemEntity.entityName} detail config`}>\n            <DetailConfigEditor\n              entity={entity}\n              systemEntity={systemEntity}\n              entities={entities}\n              icons={icons}\n              changeEntity={changeEntity}\n            />\n          </Panel>\n        </StyledPanelGroup>\n        <Button onClick={() => changeDeleteSystemEntityDialog(true)} size=\"lg\">\n          <FaTrash />\n        </Button>\n      </Entity>\n    </>\n  );\n};\n\nexport default SystemEntityEditor;\n\nconst Entity = styled.div`\n  margin-top: 10px;\n  display: flex;\n  gap: 5px;\n  flex-wrap: nowrap;\n  flex-direction: column;\n\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  padding: 10px;\n`;\n\nconst Attr = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n\nconst StyledPanelGroup = styled(PanelGroup)`\n  width: 100%;\n`;\n\nconst StyledTagGroup = styled(TagGroup)`\n  .rs-btn {\n    margin-left: 10px;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n  IconButton,\n  Input,\n  InputGroup,\n  Loader,\n  Modal,\n  Panel,\n  PanelGroup,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport { setSystem, System, SystemEntity } from \"../../../database/SystemReducer\";\nimport {\n  deleteSystem,\n  reciveSystem,\n  updateSystem,\n} from \"../../../services/DatabaseService\";\nimport { generateSystem } from \"../../../services/SystemService\";\nimport SystemEntityEditor from \"./systemDetails/SystemEntityEditor\";\n\nconst SystemDetails = () => {\n  const params = useParams();\n  let history = useNavigate();\n  const dispatch = useDispatch();\n  const [entity, setEntity] = useState<System>();\n  const [jsonEntity, setJsonEntity] = useState<string>(\"\");\n  const [jsonEntityValid, isValid] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showOverwirteDialog, setOverwirteDialog] = useState<boolean>(false);\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n\n  const [selectedEntity, changeSelectedEntity] = useState<number>(0);\n\n  useEffect(() => {\n    if (params !== undefined && entity === undefined) {\n      const id: string | undefined = params.id;\n      if (id)\n        reciveSystem(\"PnPTomeDB\", +id, (entity: System) => {\n          setEntity(entity as System);\n          setJsonEntity(JSON.stringify(entity.entities, null, 2));\n          setLoading(false);\n        });\n    }\n  }, [params, entity]);\n\n  useEffect(() => {\n    if (entity)\n      try {\n        const newJson: SystemEntity[] = JSON.parse(jsonEntity);\n        setEntity({ ...entity, entities: newJson });\n        isValid(true);\n      } catch (e) {\n        isValid(false);\n      }\n  }, [jsonEntity]);\n\n  const updateTrigger = () => {\n    if (entity) {\n      updateSystem(entity);\n      generateSystem(entity);\n      localStorage.setItem(\"system\", JSON.stringify(entity));\n      dispatch(setSystem(entity));\n      setOverwirteDialog(false);\n    }\n  };\n\n  const deleteTrigger = () => {\n    if (entity) {\n      deleteSystem(entity);\n      setDeleteDialog(false);\n      history(-1);\n    }\n  };\n\n  // const changeEntity = (val: any[]) => {};\n  const addNewEntity = () => {\n    if (entity) {\n      let entis: SystemEntity[] = [...entity.entities];\n      entis.push({\n        entityName: \"new\",\n        icon: \"FaBookOpen\",\n        isMainEntity: true,\n        attributes: [],\n        searchConfig: {},\n        tileConfig: {},\n        detailConfig: {},\n      });\n      changeEntity({ ...entity, entities: entis });\n    }\n  };\n  const changeEntity = (newEntity: System) => {\n    console.log(newEntity);\n    setEntity(newEntity);\n  };\n  const deleteEntity = (systemEntity: SystemEntity) => {\n    if (entity) {\n      const entis: SystemEntity[] = [...entity.entities];\n      const newEntis = entis.filter(\n        (enti) => enti.entityName !== systemEntity.entityName\n      );\n      changeEntity({ ...entity, entities: newEntis });\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        open={showOverwirteDialog}\n        onClose={() => setOverwirteDialog(false)}\n      >\n        <Modal.Header>\n          <Modal.Title>Overwrite</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          All the data saved for this system will be lost.\n          <br />\n          Are you sure you want to overwrite '{entity?.name} - v\n          {entity?.version}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => updateTrigger()} appearance=\"primary\">\n            Yes, overwirte!\n          </Button>\n          <Button onClick={() => setOverwirteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal open={showDeleteDialog} onClose={() => setDeleteDialog(false)}>\n        <Modal.Header>\n          <Modal.Title>Delete</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          All the data saved for this system will be lost.\n          <br />\n          Are you sure you want to delete '{entity?.name} - v{entity?.version}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => deleteTrigger()} appearance=\"primary\">\n            Yes, delete!\n          </Button>\n          <Button onClick={() => setDeleteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {loading && <Loader center content=\"Loading...\" />}\n      {!loading && entity !== undefined && (\n        <SystenWrapper>\n          <InputGroup>\n            <InputGroup.Addon>Name</InputGroup.Addon>\n            <Input\n              value={entity.name}\n              onChange={(val: any) => setEntity({ ...entity, name: val })}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputGroup.Addon>Version</InputGroup.Addon>\n            <Input\n              value={entity.version}\n              onChange={(val: any) => setEntity({ ...entity, version: val })}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputGroup.Addon>Pic</InputGroup.Addon>\n            <Input\n              value={entity.pic}\n              onChange={(val: any) => setEntity({ ...entity, pic: val })}\n            />\n          </InputGroup>\n          <StyledPanelGroup accordion bordered>\n            <Panel header=\"Assisted Editor\">\n              <ButtonToolbar>\n                <ButtonGroup>\n                  {entity.entities.map(\n                    (systemEntity: SystemEntity, index: number) => {\n                      return (\n                        <Button\n                          onClick={() => changeSelectedEntity(index)}\n                          appearance={\n                            index === selectedEntity ? \"primary\" : \"default\"\n                          }\n                        >\n                          {systemEntity.entityName}\n                        </Button>\n                      );\n                    }\n                  )}\n                </ButtonGroup>\n                <IconButton\n                  icon={<FaPlusCircle />}\n                  onClick={() => addNewEntity()}\n                />\n              </ButtonToolbar>\n              {entity.entities\n                .filter(\n                  (enti) => entity.entities.indexOf(enti) === selectedEntity\n                )\n                .map((systemEntity: SystemEntity, index: number) => {\n                  return (\n                    <SystemEntityEditor\n                      entity={entity}\n                      systemEntity={systemEntity}\n                      entities={entity.entities.map((enti) => {\n                        return {\n                          label: enti.entityName,\n                          value: enti.entityName,\n                        };\n                      })}\n                      changeEntity={(sysEnti: SystemEntity) => {\n                        let entis: SystemEntity[] = entity.entities.map(\n                          (ent) => {\n                            if (ent.entityName === systemEntity.entityName)\n                              return sysEnti;\n                            return ent;\n                          }\n                        );\n                        changeEntity({ ...entity, entities: entis });\n                      }}\n                      deleteSystemEntity={deleteEntity}\n                    />\n                  );\n                })}\n            </Panel>\n            <Panel header=\"JSON Editor\">\n              <StyledBadge\n                content={jsonEntityValid ? \"Valid\" : \"Not Valid\"}\n                color={jsonEntityValid ? \"green\" : \"red\"}\n              >\n                <Input\n                  as=\"textarea\"\n                  rows={30}\n                  placeholder=\"Textarea\"\n                  value={jsonEntity}\n                  onChange={(val: any) => setJsonEntity(val)}\n                />\n              </StyledBadge>\n            </Panel>\n          </StyledPanelGroup>\n\n          <Button onClick={(e) => setOverwirteDialog(true)}>Overwirte</Button>\n          <Button\n            color=\"red\"\n            appearance=\"primary\"\n            onClick={(e) => setDeleteDialog(true)}\n          >\n            Delete\n          </Button>\n        </SystenWrapper>\n      )}\n    </>\n  );\n};\n\nexport default SystemDetails;\n\nconst SystenWrapper = styled.div`\n  display: flex;\n  gap: 5px;\n  flex-wrap: wrap;\n`;\n\nconst StyledPanelGroup = styled(PanelGroup)`\n  width: 100%;\n`;\n\nconst StyledBadge = styled(Badge)`\n  width: calc(100% - 15px);\n`;\n"],"names":["entity","systemEntity","entities","icons","changeEntity","useState","Object","keys","detailConfig","selectedPart","changeSelectedPart","attrs","changeAttrs","useEffect","newAttributes","attributes","forEach","attr","push","label","value","baseAttrs","changeBaseAttrs","viewEntity","linkedBy","name","fieldsDisplayed","linkToAttribute","filter","ent","entityName","map","DetailConfigTypes","previewEntity","sources","ButtonToolbar","ButtonGroup","getOwnPropertyNames","keyName","index","Button","onClick","appearance","IconButton","icon","newDetailConfig","type","addNewPart","ConfigOptions","Input","style","width","onChange","val","renamed","_","key","SelectPicker","data","placeholder","cleanable","renderMenuItem","item","findIcon","renderValue","toString","console","log","SpecialConfigs","SpecialConfig","found","field","searchTerm","TagPicker","creatable","onCreate","trigger","tileOptions","deleteConfig","PreviewBadge","content","EntityDetails","configs","onEdit","isNew","dummyFieldEntry","searchConfig","styled","Badge","theme","mainColor","SearchConfigTypes","newSearchConfig","searchOptions","EntitySearchModules","applyFilterChange","removeFilterChange","tileConfig","TileConfigTypes","newTileConfig","EntityTile","deleteSystemEntity","undefined","tags","setTags","typing","setTyping","inputValue","setInputValue","showDeleteSystemEntityDialog","changeDeleteSystemEntityDialog","setIcons","JSON","stringify","newIcons","IconSet","iconSet","addNewTag","nextTags","startAddNewTag","Modal","open","onClose","Entity","InputGroup","Checkbox","defaultChecked","checked","isMainEntity","StyledPanelGroup","accordion","bordered","Panel","header","StyledTagGroup","Tag","closable","tag","removeAttr","className","size","onBlur","onPressEnter","secondColor","PanelGroup","TagGroup","params","useParams","history","useNavigate","dispatch","useDispatch","setEntity","jsonEntity","setJsonEntity","jsonEntityValid","isValid","loading","setLoading","showOverwirteDialog","setOverwirteDialog","showDeleteDialog","setDeleteDialog","selectedEntity","changeSelectedEntity","id","reciveSystem","newJson","parse","e","newEntity","deleteEntity","newEntis","enti","version","updateSystem","generateSystem","localStorage","setItem","setSystem","deleteSystem","Loader","center","SystenWrapper","pic","entis","addNewEntity","indexOf","sysEnti","StyledBadge","color","as","rows"],"sourceRoot":""}