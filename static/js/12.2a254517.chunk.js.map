{"version":3,"sources":["components/generic/details/ToEntity.tsx"],"names":["ToEntity","match","entityName","systemDbName","useSelector","selectDBName","useState","entity","setEntity","loading","setLoading","error","setError","useEffect","undefined","makeEntity","useCallback","a","nameId","params","name","newEntity","reg","test","split","sources","recivePromiseByMultiAttribute","recivePromiseByAttribute","recivePromise","center","content"],"mappings":"yMA4FeA,UAxEE,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,WACnBC,EAAeC,YAAYC,KACjC,EAA4BC,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAkB,GAA5C,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,iBACOC,IAAXP,GAAwBI,KAC1BD,GAAW,GACXE,GAAS,GACTJ,OAAUM,MAGX,CAACb,IAEJ,IAAMc,EAAaC,sBAAW,sBAAC,wCAAAC,EAAA,yDACzBC,EAA6BjB,EAAMA,MAAMkB,OAAOC,KAChDC,OAAiCP,EACjCQ,EAAM,aACKR,IAAXI,EAJyB,oBAKtBI,EAAIC,KAAKL,GALa,sBAMHA,EAAOM,MAAM,KANV,mBAMpBJ,EANoB,UAOTN,KADLW,EANc,uCAQLC,YAChBvB,EACAD,EACA,CACEkB,KAAMA,EACNK,QAASA,IAbU,OAQvBJ,EARuB,gDAiBLM,YAChBxB,EACAD,EACA,OACAkB,GArBqB,QAiBvBC,EAjBuB,wDAyBPO,YAChBzB,EACAD,GACCgB,GA5BsB,QAyBzBG,EAzByB,eAgC7BX,GAAW,QACOI,IAAdO,EACFT,GAAS,GAETJ,EAAUa,GApCiB,4CAsC5B,CAACpB,EAAOC,IAQX,OANAW,qBAAU,gBACYC,IAAhBb,EAAMA,YAAkCa,IAAXP,GAC/BQ,MAED,CAACd,EAAOc,EAAYR,IAGrB,qCACGE,GAAW,cAAC,IAAD,CAAQoB,QAAM,EAACC,QAAQ,gBACjCrB,GAAWE,GAAS,8CACpBA,IAAUF,QAAsBK,IAAXP,GACrB,cAAC,IAAD,CAASA,OAAQA,EAAQL,WAAYA","file":"static/js/12.2a254517.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\n\nimport Details from \"./EntityDetailWrapper\";\nimport {\n  recivePromise,\n  recivePromiseByAttribute,\n  recivePromiseByMultiAttribute,\n} from \"../../../services/DatabaseService\";\nimport { Loader } from \"rsuite\";\nimport { TParams } from \"../EntityRoutes\";\nimport IEntity from \"../../../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\n\ninterface $EntityProps {\n  entityName: string;\n  match: RouteComponentProps<TParams>;\n}\n\nconst ToEntity = ({ match, entityName }: $EntityProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [entity, setEntity] = useState<IEntity>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (entity !== undefined || error) {\n      setLoading(true);\n      setError(false);\n      setEntity(undefined);\n    }\n    // eslint-disable-next-line\n  }, [match]);\n\n  const makeEntity = useCallback(async () => {\n    let nameId: string | undefined = match.match.params.name;\n    let newEntity: IEntity | undefined = undefined;\n    var reg = /^\\d+$/;\n    if (nameId !== undefined) {\n      if (!reg.test(nameId)) {\n        let [name, sources] = nameId.split(\"|\");\n        if (sources !== undefined) {\n          newEntity = await recivePromiseByMultiAttribute(\n            systemDbName,\n            entityName,\n            {\n              name: name,\n              sources: sources,\n            }\n          );\n        } else {\n          newEntity = await recivePromiseByAttribute(\n            systemDbName,\n            entityName,\n            \"name\",\n            name\n          );\n        }\n      } else {\n        newEntity = await recivePromise(\n          systemDbName,\n          entityName,\n          +nameId\n        );\n      }\n    }\n    setLoading(false);\n    if (newEntity === undefined) {\n      setError(true);\n    } else {\n      setEntity(newEntity);\n    }\n  }, [match, entityName]);\n\n  useEffect(() => {\n    if (match.match !== undefined && entity === undefined) {\n      makeEntity();\n    }\n  }, [match, makeEntity, entity]);\n\n  return (\n    <>\n      {loading && <Loader center content=\"Loading...\" />}\n      {!loading && error && <>Error</>}\n      {!error && !loading && entity !== undefined && (\n        <Details entity={entity} entityName={entityName} />\n      )}\n    </>\n  );\n};\n\nexport default ToEntity;\n"],"sourceRoot":""}