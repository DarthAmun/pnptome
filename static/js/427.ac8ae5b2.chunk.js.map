{"version":3,"file":"static/js/427.ac8ae5b2.chunk.js","mappings":"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","sources":["services/DownloadService.tsx","services/VersionService.tsx","services/UploadService.tsx","components/pages/Options.tsx"],"sourcesContent":["import {\n  reciveAll,\n  reciveAllByAttribute,\n  reciveAllEntities,\n  reciveAllPromise,\n} from \"./DatabaseService\";\nimport { IndexableType } from \"dexie\";\nimport Encounter from \"../data/encounter/Encounter\";\nimport Location from \"../data/world/Location\";\nimport Event from \"../data/world/Event\";\nimport World from \"../data/world/World\";\nimport IEntity from \"../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../database/SystemReducer\";\nimport { copyFileSync } from \"fs\";\n\nexport const downloadAllFromTableByAttr = async (\n  systemDbName: string,\n  tableName: string,\n  attr: string,\n  attrLike: string,\n  fileName: string\n) => {\n  reciveAllByAttribute(\n    systemDbName,\n    tableName,\n    attr,\n    attrLike,\n    (all: IEntity[]) => {\n      let entity = { [tableName]: all };\n      downloadContent(entity, fileName);\n    }\n  );\n};\n\nexport const downloadAllFromTable = async (\n  systemDbName: string,\n  tableName: string,\n  fileName: string\n) => {\n  reciveAll(systemDbName, tableName, (all: IndexableType[]) => {\n    let entity = { [tableName]: all };\n    downloadContent(entity, fileName);\n  });\n};\n\nexport const downloadBackup = async (\n  systemDbName: string,\n  filename: string,\n  updateProgress: (progress: number) => void\n) => {\n  console.time(\"Get all\");\n  let backupEntities: any = {};\n  let tables: string[] = await reciveAllEntities(systemDbName);\n\n  let dataPromises: Promise<any>[] = [];\n  tables.forEach((table: string) => {\n    dataPromises.push(reciveAllPromise(systemDbName, table));\n  });\n  await Promise.all(dataPromises).then((values: any[]) => {\n    values.forEach((test: any) => {\n      backupEntities[test.name] = test.data;\n    });\n  });\n  updateProgress(50);\n  console.timeEnd(\"Get all\");\n\n  downloadContent(backupEntities, filename);\n  updateProgress(100);\n};\n\nconst downloadContent = (all: any, fileName: string) => {\n  const url = window.URL.createObjectURL(new Blob([JSON.stringify(all)]));\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.setAttribute(\"download\", fileName); // 3. Append to html page\n  document.body.appendChild(link); // 4. Force download\n  link.click(); // 5. Clean up and remove the link\n  document.body.removeChild(link);\n};\n","import IEntity from \"../data/IEntity\";\n\nexport const upgradeTo28 = (entry: {\n  tableName: string;\n  newEntitiy: any;\n}): { tableName: string; newEntitiy: IEntity } => {\n  if (entry.tableName === \"spells\") {\n    if (entry.newEntitiy.text && !Array.isArray(entry.newEntitiy.classes)) {\n      let spell: any = entry.newEntitiy;\n      spell.description = spell.text;\n      delete spell.text;\n      spell.classes = spell.classes.replaceAll(\" \", \"\").split(\",\");\n      return { ...entry, newEntitiy: spell };\n    }\n    return entry;\n  }\n  return entry;\n};\n","import { FileType } from \"rsuite/esm/Uploader/Uploader\";\nimport IEntity from \"../data/IEntity\";\nimport { saveNewFromList } from \"./DatabaseService\";\nimport { upgradeTo28 } from \"./VersionService\";\n\nexport const importDTFile = (systemDbName: string, file: FileType) => {\n  console.log(systemDbName, file);\n  const fileSplit: string[] | undefined = file.name?.split(\".\");\n  if (fileSplit) {\n    const fileExtension: string = fileSplit[fileSplit.length - 1];\n    switch (fileExtension) {\n      case \"json\":\n        readFile(systemDbName, file, scanImportedJson);\n        break;\n      case \"pnptome\":\n        readFile(systemDbName, file, scanImportedPnpTome);\n        break;\n    }\n  }\n};\n\nconst readFile = (\n  systemDbName: string,\n  file: FileType,\n  callback: (systemDbName: string, json: any) => void\n) => {\n  if (file.blobFile) {\n    let fileReader = new FileReader();\n    fileReader.onloadend = function () {\n      const content = fileReader.result;\n      if (content !== null) {\n        let json = JSON.parse(content.toString());\n        console.log(\"Json loaded from \" + file.name);\n        callback(systemDbName, json);\n        console.log(\"---------\");\n      }\n    };\n    fileReader.readAsText(file.blobFile);\n  }\n};\n\nconst scanImportedPnpTome = (systemDbName: string, json: any) => {\n  let listOfNewEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (const [key, value] of Object.entries(json)) {\n    if (Array.isArray(value)) {\n      for (let obj of value) {\n        listOfNewEntities = [\n          ...listOfNewEntities,\n          { tableName: key, newEntitiy: obj },\n        ];\n      }\n    }\n  }\n  listOfNewEntities = versionFilter(listOfNewEntities);\n  saveInDB(systemDbName, listOfNewEntities);\n};\n\nconst scanImportedJson = (systemDbName: string, json: any) => {\n  let listOfNewEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (const [key, value] of Object.entries(json)) {\n    if (Array.isArray(value)) {\n      let newKey =\n        key === \"classes\" || key === \"subclasses\"\n          ? key.replace(\"es\", \"\")\n          : key.slice(0, -1);\n      if (newKey === \"spell\") {\n        for (let obj of value) {\n          let newClasses: string[] = obj.classes\n            .split(\",\")\n            .filter((classe: string) => classe.trim() !== \"\")\n            .map((classe: string) => classe.trim());\n          let newObj = { ...obj, class: newClasses, description: obj.text };\n          delete newObj.classes;\n          delete newObj.text;\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: newObj },\n          ];\n        }\n      } else if (newKey === \"race\") {\n        for (let obj of value) {\n          let newAbilityScores: string[] = obj.abilityscores\n            .split(\",\")\n            .filter((score: string) => score.trim() !== \"\")\n            .map((score: string) => score.trim());\n          newAbilityScores = newAbilityScores.filter((score: string) =>\n            score.includes(\"+\")\n          );\n          let newObj = { ...obj, abilityscores: newAbilityScores };\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: newObj },\n          ];\n        }\n      } else {\n        for (let obj of value) {\n          listOfNewEntities = [\n            ...listOfNewEntities,\n            { tableName: newKey, newEntitiy: obj },\n          ];\n        }\n      }\n    }\n  }\n  listOfNewEntities = versionFilter(listOfNewEntities);\n  saveInDB(systemDbName, listOfNewEntities);\n};\n\nconst saveInDB = async (\n  systemDbName: string,\n  listOfNewEntities: { tableName: string; newEntitiy: IEntity }[]\n) => {\n  let listOfNew = [...listOfNewEntities];\n  while (listOfNew.length > 0) {\n    let newTableName = listOfNew[0].tableName;\n    let bulkList: IEntity[] = listOfNew\n      .filter((newEntitiy) => newEntitiy.tableName === newTableName)\n      .map((entity: { tableName: string; newEntitiy: IEntity }) => {\n        return entity.newEntitiy;\n      });\n    console.log(systemDbName, newTableName, bulkList);\n    await saveNewFromList(systemDbName, newTableName, bulkList);\n    listOfNew = listOfNew.filter((entity) => entity.tableName !== newTableName);\n  }\n  console.log(\"Done saving\");\n};\n\nconst versionFilter = (\n  listOfNewEntities: { tableName: string; newEntitiy: IEntity }[]\n): { tableName: string; newEntitiy: IEntity }[] => {\n  let updatedEntities: { tableName: string; newEntitiy: IEntity }[] = [];\n  for (let entity of listOfNewEntities) {\n    let updatedEntity = upgradeTo28(entity);\n    updatedEntities.push(updatedEntity);\n  }\n  return updatedEntities;\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { FaFileExport, FaTrashAlt, FaSun, FaMoon } from \"react-icons/fa\";\nimport { useLocation } from \"react-router\";\nimport {\n  Button,\n  Notification,\n  Modal,\n  Panel,\n  Progress,\n  toaster,\n  Uploader,\n  Divider,\n  InputPicker,\n  Input,\n  InputGroup,\n  ButtonGroup,\n} from \"rsuite\";\nimport { FileType } from \"rsuite/esm/Uploader/Uploader\";\nimport {\n  deleteAll,\n  deleteAllByAttr,\n  deleteDatabase,\n  reciveCount,\n} from \"../../services/DatabaseService\";\nimport {\n  downloadAllFromTable,\n  downloadAllFromTableByAttr,\n  downloadBackup,\n} from \"../../services/DownloadService\";\nimport { importDTFile } from \"../../services/UploadService\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\nimport {\n  selectDBName,\n  System,\n  SystemEntity,\n} from \"../../database/SystemReducer\";\nimport { firstToUpper } from \"../../services/TextService\";\nimport Theme, { darkTheme, lightTheme } from \"../theme/Theme\";\nimport { setTheme } from \"../../database/ThemeReducer\";\n\nconst Options = () => {\n  let location = useLocation();\n  const dispatch = useDispatch();\n  const system = useSelector((state: RootState) => state.system);\n  const systemDbName = useSelector(selectDBName);\n  const theme: Theme = useSelector((state: RootState) => state.theme);\n  const [customeTheme, changeCustomeTheme] = useState<Theme>(theme);\n  const [showResetDialog, setResetDialog] = useState<boolean>(false);\n  const [showCustomeThemeEditor, setCustomeThemeEditor] =\n    useState<boolean>(false);\n  const [files, setFiles] = useState<FileType[]>([]);\n  const [progress, updateBackupProgress] = useState<number>(0);\n  const [entity, setEntity] = useState<string>();\n  const [entities, setEntities] = useState<{ value: string; label: string }[]>(\n    []\n  );\n  const [entityAmount, setEntityAmount] = useState<number>(0);\n  const [attr, setAttr] = useState<string>(\"\");\n  const [attrLike, setAttrLike] = useState<string>(\"\");\n  const [attrs, setAttrs] = useState<{ value: string; label: string }[]>([]);\n\n  const [webhook, setWebhook] = useState<string>(\n    localStorage.getItem(\"webhook\") + \"\"\n  );\n  const [webhookUser, setWebhookUser] = useState<string>(\n    localStorage.getItem(\"webhook_user\") + \"\"\n  );\n\n  useEffect(() => {\n    if (webhook !== localStorage.getItem(\"webhook\"))\n      localStorage.setItem(\"webhook\", webhook);\n  }, [webhook]);\n\n  useEffect(() => {\n    if (webhookUser !== localStorage.getItem(\"webhook_user\"))\n      localStorage.setItem(\"webhook_user\", webhookUser);\n  }, [webhookUser]);\n\n  const handleUpload = (file: FileType) => {\n    importDTFile(systemDbName, file);\n  };\n\n  const handleSuccess = (response: object, file: FileType) => {\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Imported {file.name}.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  useEffect(() => {\n    if (entity) {\n      makeAttrs(system, entity);\n      reciveCount(systemDbName, entity, (count: number) => {\n        setEntityAmount(count);\n      });\n    } else if (system.entities.length > 0) {\n      setEntity(system.entities[0].entityName);\n    }\n  }, [entity, system]);\n\n  const makeAttrs = useCallback(\n    (system: System, entity: string) => {\n      let newEntities: { value: string; label: string }[] = [];\n      let newAttrs: { value: string; label: string }[] = [];\n      system.entities.forEach((systemEntity: SystemEntity) => {\n        newEntities.push({\n          value: systemEntity.entityName,\n          label: firstToUpper(systemEntity.entityName),\n        });\n        if (systemEntity.entityName === entity) {\n          systemEntity.attributes.forEach((attr: string) => {\n            newAttrs.push({ value: attr, label: attr });\n          });\n        }\n      });\n      setEntities(newEntities);\n      setAttrs(newAttrs);\n    },\n    [entity, system]\n  );\n\n  const resetDatabase = () => {\n    deleteDatabase(systemDbName);\n    setResetDialog(false);\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Reset Database.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  const makeLight = () => {\n    setCustomeThemeEditor(false);\n    localStorage.setItem(\"theme\", JSON.stringify(lightTheme));\n    dispatch(setTheme(lightTheme));\n  };\n  const makeDark = () => {\n    setCustomeThemeEditor(false);\n    localStorage.setItem(\"theme\", JSON.stringify(darkTheme));\n    dispatch(setTheme(darkTheme));\n  };\n  const toggleCustomeThemeEditor = () => {\n    setCustomeThemeEditor((s) => !s);\n  };\n\n  const applyCustomeTheme = () => {\n    localStorage.setItem(\"theme\", JSON.stringify(customeTheme));\n    dispatch(setTheme(customeTheme));\n  }\n\n  return (\n    <ContentWrapper>\n      <OptionContent>\n        <Modal open={showResetDialog} onClose={() => setResetDialog(false)}>\n          <Modal.Header>\n            <Modal.Title>Attention</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Are you sure you want to rest the database and delete all data\n            stored?\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => resetDatabase()} appearance=\"primary\">\n              Yes, reset!\n            </Button>\n            <Button onClick={() => setResetDialog(false)} appearance=\"subtle\">\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Divider>General</Divider>\n        <PanelGroup>\n          <StyledPanel\n            header={`Import '${system.name}-${system.version}' Backup(.pnptome or .json)`}\n          >\n            <Uploader\n              fileList={files}\n              action={location.pathname}\n              draggable\n              multiple\n              autoUpload\n              onUpload={handleUpload}\n              onSuccess={handleSuccess}\n              onChange={setFiles}\n              accept={\".pnptome, .json\"}\n            >\n              <div style={{ lineHeight: \"100px\" }}>\n                Click or Drag files to this area to upload\n              </div>\n            </Uploader>\n          </StyledPanel>\n          <StyledPanel\n            header={`Backup '${system.name}-${system.version}' (.pnptome)`}\n          >\n            <Wrapper>\n              Create a backup of the database with all the homebrew in it to\n              download.\n              <br />\n              <br />\n              <Button\n                appearance=\"primary\"\n                onClick={() =>\n                  downloadBackup(\n                    systemDbName,\n                    \"PnPTome_all.pnptome\",\n                    updateBackupProgress\n                  )\n                }\n              >\n                <FaFileExport /> Download Backup\n              </Button>\n              {progress > 0 && (\n                <Progress percent={progress} strokeColor=\"#F55C5C\" />\n              )}\n            </Wrapper>\n          </StyledPanel>\n          <StyledPanel\n            header={`Reset '${system.name}-${system.version}' Database`}\n          >\n            <Wrapper>\n              Reset the database which will result in all data been permanently\n              deleted.\n              <br />\n              <br />\n              <Button appearance=\"primary\" onClick={() => setResetDialog(true)}>\n                <FaTrashAlt /> Reset Database\n              </Button>\n            </Wrapper>\n          </StyledPanel>\n        </PanelGroup>\n        <Divider>Data Management</Divider>\n        <PanelGroup>\n          <StyledPanel style={{ width: \"500px\" }}>\n            <Wrapper>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>Entity</InputGroup.Addon>\n                <InputPicker\n                  value={entity}\n                  onChange={setEntity}\n                  data={entities}\n                  cleanable={false}\n                />\n              </InputGroup>\n              <Divider>Filter</Divider>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>Attribute</InputGroup.Addon>\n                <InputPicker\n                  value={attr}\n                  onChange={setAttr}\n                  data={attrs}\n                  style={{ width: 150 }}\n                  cleanable={true}\n                />\n              </InputGroup>\n              <InputGroup style={{ width: \"200px\" }}>\n                <InputGroup.Addon>=</InputGroup.Addon>\n                <Input\n                  value={attrLike}\n                  onChange={(val: any) => setAttrLike(val)}\n                />\n              </InputGroup>\n            </Wrapper>\n            <VerticalDivider />\n            {entity && (\n              <FlexWrapper>\n                {!attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      downloadAllFromTable(\n                        systemDbName,\n                        entity,\n                        `PnPTome_${entity}.pnptome`\n                      )\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaFileExport /> Backup all {entityAmount} {entity}\n                  </Button>\n                )}\n                {attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      downloadAllFromTableByAttr(\n                        systemDbName,\n                        entity,\n                        attr,\n                        attrLike,\n                        `PnPTome_${entity}_${attr}(${attrLike}).pnptome`\n                      )\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaFileExport /> Backup {attr}({attrLike}) {entity}\n                  </Button>\n                )}\n                <br />\n                {!attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() => deleteAll(systemDbName, entity)}\n                    disabled={entity === \"\"}\n                  >\n                    <FaTrashAlt /> Delete all {entityAmount} {entity}\n                  </Button>\n                )}\n                {attr && (\n                  <Button\n                    appearance=\"primary\"\n                    onClick={() =>\n                      deleteAllByAttr(systemDbName, entity, attr, attrLike)\n                    }\n                    disabled={entity === \"\"}\n                  >\n                    <FaTrashAlt /> Delete {attr}({attrLike}) {entity}\n                  </Button>\n                )}\n                {/* <Tag size=\"lg\">{entityAmount}</Tag> {entity} currently in the\n                Database. */}\n              </FlexWrapper>\n            )}\n          </StyledPanel>\n        </PanelGroup>\n        <Divider>Discord</Divider>\n        <PanelGroup>\n          <StyledPanel header=\"Webhook\">\n            <InputGroup>\n              <InputGroup.Addon>PlayerName</InputGroup.Addon>\n              <Input\n                value={webhookUser}\n                onChange={(val: any) => setWebhookUser(val)}\n              />\n            </InputGroup>\n            <InputGroup>\n              <InputGroup.Addon>Webhook</InputGroup.Addon>\n              <Input value={webhook} onChange={(val: any) => setWebhook(val)} />\n            </InputGroup>\n          </StyledPanel>\n        </PanelGroup>\n        <Divider>Theme</Divider>\n        <PanelGroup>\n          <StyledPanel>\n            <ButtonGroup size=\"lg\">\n              <Button onClick={makeLight}>\n                Light <FaSun />\n              </Button>\n              <Button onClick={makeDark}>\n                Dark <FaMoon />\n              </Button>\n              <Button onClick={toggleCustomeThemeEditor}>Custome</Button>\n            </ButtonGroup>\n            {showCustomeThemeEditor && (\n              <CustomeThemeEditor>\n                <InputGroup>\n                  <InputGroup.Addon>Main Color</InputGroup.Addon>\n                  <Input\n                    value={customeTheme.mainColor}\n                    onChange={(val: any) =>\n                      changeCustomeTheme((c: Theme) => {\n                        return { ...c, mainColor: val };\n                      })\n                    }\n                  />\n                  <InputGroup.Addon>\n                    <ColorCircle color={customeTheme.mainColor} />\n                  </InputGroup.Addon>\n                </InputGroup>\n                <InputGroup>\n                  <InputGroup.Addon>Secondary Color</InputGroup.Addon>\n                  <Input\n                    value={customeTheme.secondColor}\n                    onChange={(val: any) =>\n                      changeCustomeTheme((c: Theme) => {\n                        return { ...c, secondColor: val };\n                      })\n                    }\n                  />\n                  <InputGroup.Addon>\n                    <ColorCircle color={customeTheme.secondColor} />\n                  </InputGroup.Addon>\n                </InputGroup>\n                <InputGroup>\n                  <InputGroup.Addon>Text Color</InputGroup.Addon>\n                  <Input\n                    value={customeTheme.textColor}\n                    onChange={(val: any) =>\n                      changeCustomeTheme((c: Theme) => {\n                        return { ...c, textColor: val };\n                      })\n                    }\n                  />\n                  <InputGroup.Addon>\n                    <ColorCircle color={customeTheme.textColor} />\n                  </InputGroup.Addon>\n                </InputGroup>\n                <InputGroup>\n                  <InputGroup.Addon>Secondary Text Color</InputGroup.Addon>\n                  <Input\n                    value={customeTheme.secondTextColor}\n                    onChange={(val: any) =>\n                      changeCustomeTheme((c: Theme) => {\n                        return { ...c, secondTextColor: val };\n                      })\n                    }\n                  />\n                  <InputGroup.Addon>\n                    <ColorCircle color={customeTheme.secondTextColor} />\n                  </InputGroup.Addon>\n                </InputGroup>\n                <InputGroup>\n                  <InputGroup.Addon>Highlight</InputGroup.Addon>\n                  <Input\n                    value={customeTheme.highlight}\n                    onChange={(val: any) =>\n                      changeCustomeTheme((c: Theme) => {\n                        return { ...c, highlight: val };\n                      })\n                    }\n                  />\n                  <InputGroup.Addon>\n                    <ColorCircle color={customeTheme.highlight} />\n                  </InputGroup.Addon>\n                </InputGroup>\n                <Button onClick={applyCustomeTheme}>\n                  Save and apply\n                </Button>\n              </CustomeThemeEditor>\n            )}\n          </StyledPanel>\n        </PanelGroup>\n      </OptionContent>\n    </ContentWrapper>\n  );\n};\n\nexport default Options;\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  display: flex;\n`;\nconst OptionContent = styled.div`\n  width: 100%;\n`;\n\nconst PanelGroup = styled.div`\n  margin-left: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n`;\n\nconst StyledPanel = styled(Panel)`\n  width: 400px;\n  background-color: ${({ theme }) => theme.secondColor};\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.mainColor};\n\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: stretch;\n  }\n\n  & .rs-input-group {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  flex: 1 1;\n`;\nconst FlexWrapper = styled(Wrapper)`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  gap: 10px;\n`;\n\nconst VerticalDivider = styled.div`\n  flex: 1 1;\n  max-width: 1px;\n  margin: 10px;\n  border-left: 1px solid var(--rs-divider-border);\n`;\n\nconst CustomeThemeEditor = styled.div`\n  margin-top: 10px;\n`;\n\nconst ColorCircle = styled.div<{ color: string }>`\n  height: 20px;\n  width: 20px;\n  border-radius: 30px;\n  background-color: ${(props) => props.color};\n`;\n"],"names":["downloadAllFromTableByAttr","systemDbName","tableName","attr","attrLike","fileName","reciveAllByAttribute","all","entity","downloadContent","downloadAllFromTable","reciveAll","downloadBackup","filename","updateProgress","console","time","backupEntities","reciveAllEntities","tables","dataPromises","forEach","table","push","reciveAllPromise","Promise","then","values","test","name","data","timeEnd","url","window","URL","createObjectURL","Blob","JSON","stringify","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","upgradeTo28","entry","newEntitiy","text","Array","isArray","classes","spell","description","replaceAll","split","readFile","file","callback","blobFile","fileReader","FileReader","onloadend","content","result","json","parse","toString","log","readAsText","scanImportedPnpTome","listOfNewEntities","Object","entries","key","value","obj","versionFilter","saveInDB","scanImportedJson","newKey","replace","slice","newClasses","filter","classe","trim","map","newObj","class","newAbilityScores","abilityscores","score","includes","listOfNew","newTableName","bulkList","saveNewFromList","length","updatedEntities","updatedEntity","location","useLocation","dispatch","useDispatch","system","useSelector","state","selectDBName","theme","useState","customeTheme","changeCustomeTheme","showResetDialog","setResetDialog","showCustomeThemeEditor","setCustomeThemeEditor","files","setFiles","progress","updateBackupProgress","setEntity","entities","setEntities","entityAmount","setEntityAmount","setAttr","setAttrLike","attrs","setAttrs","localStorage","getItem","webhook","setWebhook","webhookUser","setWebhookUser","useEffect","setItem","makeAttrs","reciveCount","count","entityName","useCallback","newEntities","newAttrs","systemEntity","label","firstToUpper","attributes","ContentWrapper","OptionContent","Modal","open","onClose","Button","onClick","deleteDatabase","toaster","Notification","closable","header","type","placement","appearance","Divider","PanelGroup","StyledPanel","version","Uploader","fileList","action","pathname","draggable","multiple","autoUpload","onUpload","fileSplit","importDTFile","onSuccess","response","onChange","accept","style","lineHeight","Wrapper","Progress","percent","strokeColor","width","InputGroup","InputPicker","cleanable","Input","val","VerticalDivider","FlexWrapper","disabled","deleteAll","deleteAllByAttr","ButtonGroup","size","lightTheme","setTheme","darkTheme","s","CustomeThemeEditor","mainColor","c","ColorCircle","color","secondColor","textColor","secondTextColor","highlight","styled","Panel","props"],"sourceRoot":""}