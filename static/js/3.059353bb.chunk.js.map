{"version":3,"sources":["services/SystemService.tsx","components/general/BreadCrumbIcon.tsx","components/generic/details/EntityDetailWrapper.tsx","services/ColorService.tsx","components/generic/details/detailFields/CompletableStringDetailField.tsx","components/generic/details/detailFields/CreatableSetNumberDetailField.tsx","components/generic/details/detailFields/CreatableSetStringDetailField.tsx","components/generic/details/detailFields/ImageNameDetailField.tsx","components/generic/details/detailFields/SearchableStringDetailField.tsx","components/general/FormattedText.tsx","components/general/QuillEditor.tsx","components/generic/details/detailFields/SearchableTextDetailField.tsx","components/generic/details/detailFields/SetAttributesDetailField.tsx","components/generic/details/detailFields/SetEntitiesDetailField.tsx","components/generic/details/detailFields/SetEntityDetailField.tsx","components/generic/details/detailFields/SubEntityConnectorDetailField.tsx","components/generic/details/detailFields/SwitchBooleanDetailField.tsx","components/generic/details/detailFields/ViewEntityDetailField.tsx","components/generic/details/EntityDetails.tsx"],"names":["findEntitySearchField","system","entityName","attrName","index","entities","findIndex","entity","Object","searchConfig","getEntitySearchConfig","findEntityTileField","tileConfig","getEntityTileConfig","findEntityDetailField","detailConfig","getEntityDetailConfig","getEntityAttributes","attributes","formatSystemName","name","replaceAll","toLowerCase","trim","generateSystem","Dexie","delete","version","db","schema","forEach","entityIndex","attr","fieldIndex","length","JSON","parse","makeSchema","console","log","stores","open","BreadCrumbIcon","location","useLocation","useSelector","state","base","pathname","split","useCallback","RibbonElm","Ribbon","findIcon","icon","makeBreadCrumb","styled","div","EntityDetailWrapper","history","useHistory","systemDbName","selectDBName","useState","entityObj","editEntity","showDeleteDialog","setDeleteDialog","tableName","editAndSaveEntity","msg","updateWithCallback","result","toaster","push","closable","header","type","placement","updateEntity","onClose","Header","Title","Body","Footer","onClick","remove","id","goBack","appearance","TopBar","size","obj","newObj","createNewWithId","duplicateEntity","isNew","onEdit","value","theme","textColor","stringToColour","str","hash","i","charCodeAt","colour","toString","substr","CompletableStringDetailField","field","keyName","changeEntity","isEdit","changeEdit","Prop","isEditing","InputGroup","style","width","Addon","Input","placeholder","onChange","val","onKeyPress","e","key","Button","stopPropagation","props","secondColor","highlight","CreatableSetNumberDetailField","setNumberEdit","editSetNumber","SetNumber","InputNumber","min","step","CreatableSetStringDetailField","setStringEdit","editSetString","setStringList","setSetStringList","useEffect","reciveAttributeSelection","map","text","label","SetString","colorValue","InputPicker","creatable","data","ImageNameDetailField","imageNameEdit","editImageName","getPicture","pic","undefined","ImageName","minWidth","Name","Image","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","SearchableStringDetailField","FormattedText","formatted","setText","formating","FormatedTextContainer","QuillEditor","EditorWrapper","modules","toolbar","list","indent","align","direction","color","background","mainColor","SearchableTextDetailField","includes","Text","PropTitle","float","span","SetAttributesDetailField","entityList","setSetEntityList","newEntities","array","at","uniqueTags","ent","douplicate","uni","sort","a","b","localeCompare","TagPicker","trigger","onCreate","item","TagGroup","classe","Tag","SetEntitiesDetailField","setEntityList","SetEntityDetailField","matchedEntityName","newText","SubEntityConnectorDetailField","config","foundEntities","setFoundEntities","connector","reciveAllByAttribute","subEntityName","subEntityField","sources","subentity","ViewTag","AddIconButton","IconButton","SwitchBooleanDetailField","switchBooleanEdit","editSwitchBoolean","SwitchBoolean","Checkbox","checked","onCheckboxClick","spliceFirstToUpper","ViewEntityDetailField","foundEntity","setFoundEntity","fields","setFields","viewEntity","linkedBy","reciveByAttribute","fieldsDisplayed","TagTitle","CenterWrapper","EntityDetails","currentEntity","makeFoundFlag","found","searchTerm","View","getOwnPropertyNames","fieldEntry","linkToAttribute","Flag"],"mappings":"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","file":"static/js/3.059353bb.chunk.js","sourcesContent":["import Dexie from \"dexie\";\nimport ConfigPart from \"../data/ConfigPart\";\nimport { System, SystemEntity } from \"../database/SystemReducer\";\n\nexport const findEntitySearchField = (\n  system: System,\n  entityName: string,\n  attrName: string\n): ConfigPart => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return Object(system.entities[index].searchConfig)[attrName];\n};\n\nexport const getEntitySearchConfig = (system: System, entityName: string) => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return system.entities[index].searchConfig;\n};\n\nexport const findEntityTileField = (\n  system: System,\n  entityName: string,\n  attrName: string\n): ConfigPart => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return Object(system.entities[index].tileConfig)[attrName];\n};\n\nexport const getEntityTileConfig = (system: System, entityName: string) => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return system.entities[index].tileConfig;\n};\n\nexport const findEntityDetailField = (\n  system: System,\n  entityName: string,\n  attrName: string\n): ConfigPart => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return Object(system.entities[index].detailConfig)[attrName];\n};\n\nexport const getEntityDetailConfig = (system: System, entityName: string) => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return system.entities[index].detailConfig;\n};\n\nexport const getEntityAttributes = (system: System, entityName: string) => {\n  const index = system.entities.findIndex(\n    (entity) => entity.entityName === entityName\n  );\n  return system.entities[index].attributes;\n}\n\nconst formatSystemName = (name: string) => {\n  return name.replaceAll(\" \", \"\").toLowerCase().trim();\n};\n\nconst makeSchema = (system: System) => {\n  let schema: string = \"\";\n  system.entities.forEach((entity: SystemEntity, entityIndex: number) => {\n    schema += `\"${entity.entityName.toLowerCase()}\": \"`;\n    entity.attributes.forEach((attr: string, fieldIndex: number) => {\n      if (attr.toLowerCase() === \"id\") schema += \"++id\";\n      else schema += `${attr.toLowerCase()}`;\n      if (entity.attributes.length - 1 !== fieldIndex) schema += \",\";\n    });\n    schema += `\"`;\n    if (system.entities.length - 1 !== entityIndex) schema += \",\";\n  });\n  return JSON.parse(`{${schema}}`);\n};\n\nexport const generateSystem = (system: System) => {\n  Dexie.delete(`${formatSystemName(system.name)}-${system.version}`);\n  const db = new Dexie(`${formatSystemName(system.name)}-${system.version}`);\n  const schema = makeSchema(system);\n  console.log(`${formatSystemName(system.name)}-${system.version} generated.`);\n  db.version(1).stores(schema);\n  db.open();\n};\n","import { useCallback } from \"react\";\nimport { FaHome } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RootState } from \"../../database/Store\";\nimport { SystemEntity } from \"../../database/SystemReducer\";\nimport { findIcon } from \"../../services/IconService\";\n\nconst BreadCrumbIcon = () => {\n  let location = useLocation();\n  const system = useSelector((state: RootState) => state.system);\n  const base = location.pathname.split(\"/\")[1];\n\n  const makeBreadCrumb = useCallback((): JSX.Element => {\n    let RibbonElm = <></>;\n    system.entities.forEach((entity: SystemEntity) => {\n      switch (true) {\n        case base === \"\":\n        case base === \"home\":\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  <FaHome />\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-detail`:\n        case base === `${entity.entityName}-builder`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>{findIcon(entity.icon)}</span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-overview`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  {findIcon(entity.icon, 10)}\n                  {findIcon(entity.icon, 20)}\n                  {findIcon(entity.icon, 10)}\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n      }\n    });\n    return RibbonElm;\n  }, [base, system]);\n\n  return makeBreadCrumb();\n};\n\nexport default BreadCrumbIcon;\n\nconst Ribbon = styled.div`\n  margin: 3em;\n  /* IE10 Consumer Preview */\n  background-image: -ms-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Mozilla Firefox */\n  background-image: -moz-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Opera */\n  background-image: -o-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Webkit (Safari/Chrome 10) */\n  background-image: -webkit-gradient(\n    radial,\n    center top,\n    0,\n    center top,\n    487,\n    color-stop(0, #f55c5c),\n    color-stop(1, #c24a4a)\n  );\n  /* Webkit (Chrome 11+) */\n  background-image: -webkit-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* W3C Markup, IE10 Release Preview */\n  background-image: radial-gradient(\n    circle farthest-side at center top,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  width: 3.5em;\n  height: 3em;\n  position: relative;\n  top: -20px;\n  margin: 0px 10px 0px -10px;\n  border-top-right-radius: 0.2em;\n  border-top-left-radius: 0.2em;\n  font-family: \"Kite One\", sans-serif;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    left: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-right: 2.5em solid transparent;\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    right: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-left: 2.5em solid transparent;\n  }\n\n  & i {\n    width: 90%;\n    height: 160%;\n    display: block;\n    margin: auto;\n    z-index: 100;\n    position: relative;\n    border-right: dashed 0.0625em #333;\n    border-left: dashed 0.0625em #333;\n    overflow: hidden;\n  }\n\n  & i span {\n    color: #fff;\n    display: block;\n    text-align: center;\n    top: 50%;\n    margin-top: -1em;\n    position: relative;\n    text-shadow: 0.0625em 0.0625em 0.0625em #333;\n    font-style: normal;\n    font-weight: bold;\n  }\n`;\n","import { useState } from \"react\";\nimport { FaArrowLeft, FaClone, FaTrash } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, ButtonGroup, Notification, Modal, toaster } from \"rsuite\";\nimport styled from \"styled-components\";\nimport BreadCrumbIcon from \"../../general/BreadCrumbIcon\";\n\nimport IEntity from \"../../../data/IEntity\";\nimport {\n  remove,\n  updateWithCallback,\n  createNewWithId,\n} from \"../../../services/DatabaseService\";\nimport EntityDetails from \"./EntityDetails\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\n\ninterface $Props {\n  entity: IEntity;\n  entityName: string;\n}\n\nconst EntityDetailWrapper = ({ entity, entityName }: $Props) => {\n  let history = useHistory();\n  const systemDbName = useSelector(selectDBName);\n  const [entityObj, editEntity] = useState<IEntity>(entity);\n\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const tableName = entityName;\n\n  const deleteEntity = () => {\n    remove(systemDbName, tableName, entityObj.id);\n    history.goBack();\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Deleted {entityObj.name}.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  const updateEntity = (entityObj: IEntity, msg: string) => {\n    updateWithCallback(systemDbName, tableName, entityObj, (result) => {\n      if (result > 0) {\n        toaster.push(\n          <Notification closable header={\"Success\"} type=\"success\">\n            Success: {msg}.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      } else {\n        toaster.push(\n          <Notification closable header={\"Error\"} type=\"error\">\n            Error: Something went wrong!.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      }\n    });\n  };\n\n  const duplicateEntity = (obj: IEntity) => {\n    let newObj = { ...obj };\n    delete newObj.id;\n    createNewWithId(systemDbName, tableName, newObj, (id) => {\n      editAndSaveEntity(\n        { ...entity, name: entity.name + \" [Clone]\" },\n        \"Cloning successful!\"\n      );\n    });\n  };\n\n  const editAndSaveEntity = (entity: IEntity, msg: string) => {\n    editEntity(entity);\n    updateEntity(entity, msg);\n  };\n\n  return (\n    <>\n      <Modal open={showDeleteDialog} onClose={() => setDeleteDialog(false)}>\n        <Modal.Header>\n          <Modal.Title>Attention</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete '{entity.name}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => deleteEntity()} appearance=\"primary\">\n            Yes, delete!\n          </Button>\n          <Button onClick={() => setDeleteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <TopBar>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => history.goBack()} size=\"lg\">\n            <FaArrowLeft />\n          </Button>\n          <Button onClick={() => duplicateEntity(entityObj)} size=\"lg\">\n            <FaClone />\n          </Button>\n          <Button onClick={() => setDeleteDialog(true)} size=\"lg\">\n            <FaTrash />\n          </Button>\n        </ButtonGroup>\n      </TopBar>\n      <EntityDetails\n        entity={entityObj}\n        entityName={entityName}\n        isNew={false}\n        onEdit={(value: any) => editAndSaveEntity(value, \"Saved!\")}\n      />\n    </>\n  );\n};\n\nexport default EntityDetailWrapper;\n\nexport const TopBar = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  flex: 1 1;\n  width: 100%;\n  max-width: calc(100% - 20px);\n  height: 55px;\n  padding: 10px;\n  display: flex;\n  align-items: flex-start;\n\n  @media (max-width: 576px) {\n    max-width: calc(100% - 20px);\n  }\n`;\n","export const stringToColour = (str: string | undefined) => {\n  if (str && str.length > 0) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let colour = \"#\";\n    for (let i = 0; i < 3; i++) {\n      var value = (hash >> (i * 8)) & 0xff;\n      colour += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return colour;\n  }\n  return \"white\";\n};\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $EditCompletableStringFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CompletableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $EditCompletableStringFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default CompletableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, InputNumber } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $CreatableSetNumberDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetNumberDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity\n}: $CreatableSetNumberDetailFieldProps) => {\n  const [setNumberEdit, editSetNumber] = useState<boolean>(isNew);\n\n  return (\n    <SetNumber isEditing={setNumberEdit} onClick={() => editSetNumber(true)}>\n      {setNumberEdit && (\n        <InputGroup>\n          <InputNumber\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            min={1}\n            step={1}\n            style={{ width: \"60px\" }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetNumber(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setNumberEdit && <b>{field}</b>}\n    </SetNumber>\n  );\n};\n\nexport default CreatableSetNumberDetailField;\n\nconst SetNumber = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  min-width: 40px;\n  width: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  height: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-radius: ${(props) => (props.isEditing ? \"5px\" : \"30px\")};\n  margin: 0px 0px 5px 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { InputGroup, InputPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { RootState } from \"../../../../database/Store\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { stringToColour } from \"../../../../services/ColorService\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $CreatableSetStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $CreatableSetStringDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [setStringEdit, editSetString] = useState<boolean>(isNew);\n  const [setStringList, setSetStringList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        setSetStringList(\n          entities.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity, tableName, keyName]);\n\n  return (\n    <SetString\n      colorValue={field}\n      isEditing={setStringEdit}\n      onClick={() => editSetString(true)}\n    >\n      {setStringEdit && (\n        <InputGroup>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <InputPicker\n            creatable\n            value={field}\n            data={setStringList}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetString(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setStringEdit && (\n        <>\n          {findIcon(icon)}\n          {field}\n        </>\n      )}\n    </SetString>\n  );\n};\n\nexport default CreatableSetStringDetailField;\n\nconst SetString = styled.div<{\n  colorValue?: string;\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${(props) => {\n    return stringToColour(props.colorValue);\n  }};\n  cursor: pointer;\n\n  svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useCallback, useState } from \"react\";\nimport { FaCheck, FaImage } from \"react-icons/fa\";\nimport { Input, InputGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $ImageNameDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst ImageNameDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $ImageNameDetailFieldProps) => {\n  const [imageNameEdit, editImageName] = useState<boolean>(isNew);\n\n  const getPicture = useCallback(() => {\n    const pic = entity[\"pic\" as keyof typeof entity];\n    if (pic !== \"\" && pic !== null && pic !== undefined) {\n      return pic + \"\";\n    }\n    return \"\";\n  }, [entity]);\n\n  return getPicture() !== \"\" ? (\n    <ImageName isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && (\n        <>\n          <Image pic={getPicture()}></Image>\n          <b>{entity.name}</b>\n        </>\n      )}\n    </ImageName>\n  ) : (\n    <Name isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && <b>{entity.name}</b>}\n    </Name>\n  );\n};\n\nexport default ImageNameDetailField;\n\nconst Name = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 0px 10px 0px;\n  width: calc(100% - 15px);\n  color: ${({ theme }) => theme.textColor};\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: ${(props) => (props.isEditing ? \"flex\" : \"block\")};\n  flex-wrap: wrap;\n  gap: 5px;\n  cursor: pointer;\n`;\n\nconst ImageName = styled(Name)`\n  height: auto;\n  border-radius: 50px 5px 5px 50px;\n  cursor: pointer;\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url('${pic}')`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableStringDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SearchableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { ReactNodeArray } from \"hoist-non-react-statics/node_modules/@types/react\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formating } from \"../../services/TextService\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormattedText = ({ text }: $Props) => {\n  const [formatted, setText] = useState<ReactNodeArray>([]);\n\n  useEffect(() => {\n    setText(formating(text));\n  }, [text]);\n\n  return <FormatedTextContainer>{formatted}</FormatedTextContainer>;\n};\n\nexport default FormattedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n  white-space: pre-line;\n`;\n","import ReactQuill from \"react-quill\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  value: string;\n  placeholder: string;\n  onChange: (val: any) => void;\n}\n\nconst QuillEditor = ({ value, placeholder, onChange }: $Props) => {\n  return (\n    <EditorWrapper>\n      <ReactQuill\n        theme=\"snow\"\n        placeholder={placeholder}\n        modules={{\n          toolbar: [\n            //[{ font: [] }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n            [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], // toggled buttons\n            [{ list: \"ordered\" }, { list: \"bullet\" }],\n            [{ indent: \"-1\" }, { indent: \"+1\" }, { align: [] }], // outdent/indent\n            [{ direction: \"rtl\" }], // text direction\n\n            [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n\n            [\"clean\"], // remove formatting button\n          ],\n        }}\n        value={value}\n        onChange={onChange}\n      />\n    </EditorWrapper>\n  );\n};\n\nexport default QuillEditor;\n\nconst EditorWrapper = styled.div`\n  & .quill .ql-toolbar {\n    border: none;\n    .ql-picker {\n      color: ${({ theme }) => theme.highlight};\n    }\n    .ql-stroke {\n      stroke: ${({ theme }) => theme.highlight};\n    }\n    .ql-picker-options {\n      background-color: ${({ theme }) => theme.secondColor};\n      border-radius: 5px;\n      border: none;\n      color: ${({ theme }) => theme.textColor};\n    }\n    .ql-picker-label {\n      border: none;\n      color: ${({ theme }) => theme.highlight};\n    }\n  }\n  & .quill .ql-container {\n    border: none;\n    background-color: ${({ theme }) => theme.mainColor};\n    border-radius: 5px;\n  }\n  & .ql-blank:before {\n    color: rgba(255, 255, 255, 0.6);\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport { Button } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport FormattedText from \"../../../general/FormattedText\";\nimport QuillEditor from \"../../../general/QuillEditor\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableTextDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableTextDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableTextDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  useEffect(() => {\n    if(!field.includes(\"<p>\")){\n      changeEntity({ ...entity, [keyName]: \"<p>\"+field+\"</p>\" });\n    }\n  },[entity, keyName, field, changeEntity])\n\n  return (\n    <Text isEditing={isEdit}>\n      {isEdit && (\n        <>\n          <QuillEditor\n            value={field}\n            placeholder={keyName}\n            onChange={(val: any) => {\n              changeEntity({ ...entity, [keyName]: val });\n            }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          <PropTitle>{findIcon(icon)}</PropTitle>\n          <Button onClick={() => changeEdit(true)} style={{ float: \"right\" }}>\n            <FaEdit />\n          </Button>\n          <FormattedText text={field} />\n        </>\n      )}\n    </Text>\n  );\n};\n\nexport default SearchableTextDetailField;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.highlight};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  width: calc(100% - 15px);\n  margin: 10px 0px 5px 0px;\n  padding: 10px;\n  float: left;\n  line-height: 18px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetAttributesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetAttributesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $SetAttributesDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [entityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        const newEntities: { value: string; label: string }[] = [];\n        entities.forEach((array: any) => {\n          array.forEach((attr: string) => {\n            const at = attr.trim();\n            newEntities.push({ value: at, label: at });\n          });\n        });\n        const uniqueTags: { value: string; label: string }[] = [];\n        newEntities.forEach((ent: { value: string; label: string }) => {\n          let douplicate: boolean = false;\n          uniqueTags.forEach((uni: { value: string; label: string }) => {\n            if (ent.label === uni.label) {\n              douplicate = true;\n            }\n          });\n          if (!douplicate) uniqueTags.push(ent);\n        });\n        uniqueTags.sort((a, b) => a.label.localeCompare(b.label));\n        setSetEntityList(uniqueTags);\n      }\n    );\n  }, [tableName, keyName, field, entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={entityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            creatable\n            onCreate={(val: any[], item: any) => {\n              setSetEntityList((e) => [...e, item]);\n              changeEntity({ ...entity, [keyName]: [...val, item.value] });\n            }}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetAttributesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntitiesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntitiesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntitiesDetailFieldProps) => {\n\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(systemDbName, keyName, \"name\", (entities: IndexableType[]) => {\n      setSetEntityList(\n        entities.map((text: IndexableType) => {\n          const newText: string = text as string;\n          return { value: newText, label: newText };\n        })\n      );\n    });\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={setEntityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntitiesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, InputPicker, Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntityDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  matchedEntityName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntityDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  matchedEntityName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    console.log(matchedEntityName);\n    reciveAttributeSelection(\n      systemDbName,\n      matchedEntityName,\n      \"name\",\n      (entities: IndexableType[]) => {\n        setSetEntityList(\n          entities.map((text: IndexableType) => {\n            const newText: string = (text as string).toLowerCase();\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <InputPicker\n            data={setEntityList}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            <Tag>{field}</Tag>\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { IconButton, Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAllByAttribute } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SubEntityConnectorDetailFieldProps {\n  entity: IEntity;\n  config: ConfigPart;\n  keyName: string;\n  icon: string;\n}\n\nconst SubEntityConnectorDetailField = ({\n  entity,\n  config,\n  keyName,\n  icon,\n}: $SubEntityConnectorDetailFieldProps) => {\n  let history = useHistory();\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntities, setFoundEntities] = useState<IEntity[]>();\n\n  useEffect(() => {\n    if (config.connector)\n      reciveAllByAttribute(\n        systemDbName,\n        config.connector?.subEntityName,\n        config.connector?.subEntityField,\n        `${entity.name}|${entity.sources}`,\n        (foundEntities: IEntity[]) => {\n          console.log(foundEntities);\n          setFoundEntities(foundEntities);\n        }\n      );\n  }, [systemDbName, entity]);\n\n  const newSubEntity = () => {\n    history.push(`/${keyName}-builder`);\n  };\n  const viewSubEntity = (id: number | undefined) => {\n    history.push(`/${keyName}-detail/${id}`);\n  };\n\n  return (\n    <>\n      {foundEntities && (\n        <Prop>\n          {findIcon(icon)}\n          <TagGroup>\n            {foundEntities?.map((subentity: IEntity) => {\n              return (\n                <ViewTag onClick={() => viewSubEntity(subentity.id)}>\n                  {subentity.name}\n                </ViewTag>\n              );\n            })}\n            <AddIconButton\n              onClick={() => newSubEntity()}\n              icon={<FaPlus />}\n              appearance=\"ghost\"\n              size=\"xs\"\n            />\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default SubEntityConnectorDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst AddIconButton = styled(IconButton)`\n  margin-left: 10px;\n`;\n\nconst ViewTag = styled(Tag)`\n  cursor: pointer;\n`;\n","import { useState } from \"react\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { spliceFirstToUpper } from \"../../../../services/TextService\";\n\ninterface $SwitchBooleanDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SwitchBooleanDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $SwitchBooleanDetailFieldProps) => {\n  const [switchBooleanEdit, editSwitchBoolean] = useState<boolean>(isNew);\n\n  return (\n    <SwitchBoolean\n      isEditing={switchBooleanEdit}\n      onClick={() => editSwitchBoolean(true)}\n    >\n      {switchBooleanEdit && (\n        <Checkbox\n          checked={field}\n          onCheckboxClick={(e) => {\n            e.stopPropagation();\n            editSwitchBoolean(false);\n            changeEntity({ ...entity, [keyName]: !field });\n            onEdit({ ...entity, [keyName]: !field });\n          }}\n        >\n          Ritual\n        </Checkbox>\n      )}\n      {!switchBooleanEdit && (\n        <>\n          {!!field ? (\n            spliceFirstToUpper(keyName)\n          ) : (\n            <s>{spliceFirstToUpper(keyName)}</s>\n          )}\n        </>\n      )}\n    </SwitchBoolean>\n  );\n};\n\nexport default SwitchBooleanDetailField;\n\nconst SwitchBoolean = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveByAttribute } from \"../../../../services/DatabaseService\";\n\ninterface $ViewEntityDetailFieldProps {\n  entity: IEntity;\n  keyName: string;\n  config: ConfigPart;\n}\n\nconst ViewEntityDetailField = ({\n  entity,\n  keyName,\n  config,\n}: $ViewEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntity, setFoundEntity] = useState<IEntity>();\n  const [fields, setFields] = useState<string[]>([]);\n\n  useEffect(() => {\n    const field: string = entity[config.viewEntity?.linkedBy as keyof typeof entity] as string;\n    reciveByAttribute(systemDbName, keyName, \"name\", field, (foundEntity: IEntity) => {\n      setFoundEntity(foundEntity);\n      setFields(config.viewEntity?.fieldsDisplayed || []);\n    });\n  }, [entity]);\n\n  return (\n    <>\n      {foundEntity && (\n        <Prop>\n          <TagGroup>\n            {fields?.map((field: string) => {\n              return (\n                <Tag>\n                  <TagTitle>{field}:</TagTitle>{\" \"}\n                  {foundEntity[field as keyof typeof entity]}\n                </Tag>\n              );\n            })}\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default ViewEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst TagTitle = styled.span`\n  color: ${({ theme }) => theme.highlight};\n`;\n","import { useCallback, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../data/ConfigPart\";\nimport IEntity from \"../../../data/IEntity\";\nimport { RootState } from \"../../../database/Store\";\nimport {\n  findEntityDetailField,\n  findEntityTileField,\n  getEntityDetailConfig,\n} from \"../../../services/SystemService\";\nimport { spliceFirstToUpper } from \"../../../services/TextService\";\n\nimport CompletableStringDetailField from \"./detailFields/CompletableStringDetailField\";\nimport CreatableSetNumberDetailField from \"./detailFields/CreatableSetNumberDetailField\";\nimport CreatableSetStringDetailField from \"./detailFields/CreatableSetStringDetailField\";\nimport ImageNameDetailField from \"./detailFields/ImageNameDetailField\";\nimport SearchableStringDetailField from \"./detailFields/SearchableStringDetailField\";\nimport SearchableTextDetailField from \"./detailFields/SearchableTextDetailField\";\nimport SetAttributesDetailField from \"./detailFields/SetAttributesDetailField\";\nimport SetEntitiesDetailField from \"./detailFields/SetEntitiesDetailField\";\nimport SetEntityDetailField from \"./detailFields/SetEntityDetailField\";\nimport SubEntityConnectorDetailField from \"./detailFields/SubEntityConnectorDetailField\";\nimport SwitchBooleanDetailField from \"./detailFields/SwitchBooleanDetailField\";\nimport ViewEntityDetailField from \"./detailFields/ViewEntityDetailField\";\n\ninterface $Props {\n  entity: IEntity;\n  entityName: string;\n  isNew: boolean;\n  onEdit: (value: any) => void;\n}\n\nconst EntityDetails = ({ entity, entityName, isNew, onEdit }: $Props) => {\n  const [currentEntity, changeEntity] = useState<IEntity>({ ...entity });\n  const system = useSelector((state: RootState) => state.system);\n\n  const makeFoundFlag = useCallback(\n    (config: ConfigPart) => {\n      if (config.found) {\n        const field = entity[config.found?.field as keyof typeof entity];\n        const showFlag = (field + \"\")\n          .toLowerCase()\n          .includes(config.found?.searchTerm);\n        return showFlag ? (\n          spliceFirstToUpper(config.found?.searchTerm)\n        ) : (\n          <s>{spliceFirstToUpper(config.found?.searchTerm)}</s>\n        );\n      }\n      return <></>;\n    },\n    [entity]\n  );\n\n  return (\n    <CenterWrapper>\n      <View>\n        {Object.getOwnPropertyNames(getEntityDetailConfig(system, entityName)).map(\n          (keyName: any, index: number) => {\n            const field = currentEntity[keyName as keyof typeof entity];\n            const fieldEntry = findEntityDetailField(system, entityName, keyName);\n            if (field !== undefined) {\n              switch (true) {\n                case fieldEntry.type === \"CreatableSetNumber\":\n                  return (\n                    <CreatableSetNumberDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"CreatableSetString\":\n                  return (\n                    <CreatableSetStringDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      icon={fieldEntry.icon || \"\"}\n                      tableName={entityName}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"SwitchBoolean\":\n                  return (\n                    <SwitchBooleanDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"ImageName\":\n                  return (\n                    <ImageNameDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"CompletableString\":\n                  return (\n                    <CompletableStringDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"SearchableString\":\n                  return (\n                    <SearchableStringDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                  case fieldEntry.type === \"SetAttributes\":\n                  return (\n                    <SetAttributesDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      tableName={entityName}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"SetEntities\":\n                  return (\n                    <SetEntitiesDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"SetEntity\":\n                  return (\n                    <SetEntityDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      matchedEntityName={fieldEntry.linkToAttribute || \"\"}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n                case fieldEntry.type === \"SearchableText\":\n                  return (\n                    <SearchableTextDetailField\n                      key={index}\n                      field={field}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      isNew={isNew}\n                      icon={fieldEntry.icon || \"\"}\n                      onEdit={onEdit}\n                      changeEntity={changeEntity}\n                    />\n                  );\n\n                default:\n                  return <></>;\n              }\n            } else {\n              switch (true) {\n                case fieldEntry.type === \"FoundFlag\":\n                  return <Flag key={index}>{makeFoundFlag(fieldEntry)}</Flag>;\n                case fieldEntry.type === \"ViewEntity\":\n                  return (\n                    <ViewEntityDetailField\n                      key={index}\n                      keyName={keyName}\n                      entity={currentEntity}\n                      config={fieldEntry}\n                    />\n                  );\n                  case fieldEntry.type === \"SubEntityConnector\":\n                  return (\n                    <SubEntityConnectorDetailField\n                      key={index}\n                      keyName={keyName}\n                      icon={fieldEntry.icon || \"\"}\n                      entity={currentEntity}\n                      config={fieldEntry}\n                    />\n                  );\n                default:\n                  return <></>;\n              }\n            }\n          }\n        )}\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default EntityDetails;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Flag = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n"],"sourceRoot":""}