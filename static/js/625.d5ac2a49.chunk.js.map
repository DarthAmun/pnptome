{"version":3,"file":"static/js/625.d5ac2a49.chunk.js","mappings":"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","sources":["components/pages/Groups.tsx","../node_modules/rsuite/esm/Badge/Badge.js","../node_modules/rsuite/esm/Badge/index.js"],"sourcesContent":["import { DataConnection } from \"peerjs\";\nimport { useState, useEffect } from \"react\";\nimport { IoPulse } from \"react-icons/io5\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Button,\n  Input,\n  Panel,\n  Notification,\n  toaster,\n  InputGroup,\n  Badge,\n} from \"rsuite\";\nimport styled from \"styled-components\";\nimport {\n  Group,\n  initialGroupState,\n  setGroup,\n} from \"../../database/GroupReducer\";\nimport { RootState } from \"../../database/Store\";\nimport {\n  createNewWithId,\n  reciveAllFromTable,\n} from \"../../services/DatabaseService\";\n\nconst Groups = () => {\n  let history = useNavigate();\n  const dispatch = useDispatch();\n  const liveGroup = useSelector((state: RootState) => state.group);\n  const conns: DataConnection[] = useSelector(\n    (state: RootState) => state.peerContext.connections\n  );\n  const [groups, changeGroups] = useState<Group[]>([]);\n  const [newGroupDialog, showNewGroup] = useState<boolean>(false);\n  const [newGroup, setNewGroup] = useState<Group>(initialGroupState);\n\n  useEffect(() => {\n    reciveAllFromTable(\"PnPTomeDB\", \"groups\", (entries: any[]) => {\n      changeGroups(entries);\n    });\n  }, [newGroupDialog]);\n\n  const startSession = (group: Group) => {\n    dispatch(setGroup(group));\n  };\n  const stopSession = () => {\n    dispatch(setGroup(initialGroupState));\n  };\n  const editGroup = (group: Group) => {\n    history({\n      pathname: `/group-detail/${group.id}`,\n    });\n  };\n\n  const create = () => {\n    let newEntity: any = { ...newGroup };\n    delete newEntity.id;\n    showNewGroup(false);\n    createNewWithId(\"PnPTomeDB\", \"groups\", newEntity, (id: number) => {\n      toaster.push(\n        <Notification header={\"Success\"} type=\"success\">\n          Success: Created new group named {newEntity.name}.\n        </Notification>,\n        { placement: \"bottomStart\" }\n      );\n    });\n  };\n\n  const copy = () => {\n    const uuid = localStorage.getItem(\"playerID\");\n    if (uuid !== null) navigator.clipboard.writeText(uuid);\n  };\n\n  return (\n    <>\n      <UserInfo>\n        <InputGroup>\n          <InputGroup.Addon>UserID:</InputGroup.Addon>\n          <Input value={localStorage.getItem(\"playerID\") || \"\"} />\n          <InputGroup.Button onClick={copy}>Copy</InputGroup.Button>\n        </InputGroup>\n      </UserInfo>\n      {!newGroupDialog && (\n        <GroupsContainer>\n          <Panel\n            shaded\n            bordered\n            bodyFill\n            style={{ display: \"inline-block\", width: 240 }}\n          >\n            <Panel header=\"Make a new Group\">\n              <Button onClick={(e) => showNewGroup(true)}>New Group</Button>\n            </Panel>\n          </Panel>\n          {groups.map((group: Group, index: number) => {\n            return (\n              <Panel\n                key={index}\n                shaded\n                bordered\n                bodyFill\n                style={{ display: \"inline-block\", width: 240 }}\n              >\n                <img src={group.pic} height=\"160\" />\n                <StyledPanelBody header={group.name}>\n                  {group.id === liveGroup.id ? (\n                    <>\n                      <Badge content={conns.length}>\n                        <IconWrapper title=\"Currently used\">\n                          <IoPulse />\n                        </IconWrapper>\n                      </Badge>\n                      <Button\n                        onClick={(e) => stopSession()}\n                        style={{ marginRight: \"10px\" }}\n                      >\n                        Stop\n                      </Button>\n                    </>\n                  ) : (\n                    <Button\n                      onClick={(e) => startSession(group)}\n                      style={{ marginRight: \"10px\" }}\n                    >\n                      Start\n                    </Button>\n                  )}\n                  <Button onClick={(e) => editGroup(group)}>Edit</Button>\n                </StyledPanelBody>\n              </Panel>\n            );\n          })}\n        </GroupsContainer>\n      )}\n      {newGroupDialog && (\n        <StyledPanel shaded bordered bodyFill>\n          <Input\n            placeholder=\"Group Name\"\n            value={newGroup.name}\n            onChange={(val: any) =>\n              setNewGroup((g) => {\n                return { ...g, name: val };\n              })\n            }\n          />\n          <Button onClick={(e) => create()} style={{ marginRight: \"10px\" }}>\n            Save\n          </Button>\n          <Button onClick={(e) => showNewGroup(false)}>Back</Button>\n        </StyledPanel>\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n\nconst GroupsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst StyledPanel = styled(Panel)`\n  padding: 10px;\n  width: 240px;\n  background-color: ${({ theme }) => theme.secondColor};\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n`;\n\nconst StyledPanelBody = styled(Panel)`\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${({ theme }) => theme.textColor};\n  & .rs-panel-body {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    align-items: center;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  color: ${({ theme }) => theme.highlight};\n  background-color: ${({ theme }) => theme.mainColor};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 30px;\n`;\n\nconst UserInfo = styled.div`\n  margin: 10px;\n`;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from '../utils';\nvar Badge = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      contentText = props.content,\n      color = props.color,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'badge' : _props$classPrefix,\n      children = props.children,\n      _props$maxCount = props.maxCount,\n      maxCount = _props$maxCount === void 0 ? 99 : _props$maxCount,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"content\", \"color\", \"className\", \"classPrefix\", \"children\", \"maxCount\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      prefix = _useClassNames.prefix,\n      merge = _useClassNames.merge;\n\n  var dot = contentText === undefined || contentText === null;\n  var classes = merge(className, withClassPrefix(color, {\n    independent: !children,\n    wrapper: children,\n    dot: dot\n  }));\n\n  if (contentText === false) {\n    return /*#__PURE__*/React.cloneElement(children, {\n      ref: ref\n    });\n  }\n\n  var content = typeof contentText === 'number' && contentText > maxCount ? maxCount + \"+\" : contentText;\n\n  if (!children) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n      ref: ref,\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classes\n  }), children, /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('content')\n  }, content));\n});\nBadge.displayName = 'Badge';\nBadge.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  as: PropTypes.elementType,\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  maxCount: PropTypes.number,\n  color: PropTypes.oneOf(['red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'violet'])\n};\nexport default Badge;","import Badge from './Badge';\nexport default Badge;"],"names":["history","useNavigate","dispatch","useDispatch","liveGroup","useSelector","state","group","conns","peerContext","connections","useState","groups","changeGroups","newGroupDialog","showNewGroup","initialGroupState","newGroup","setNewGroup","useEffect","reciveAllFromTable","entries","UserInfo","value","localStorage","getItem","onClick","uuid","navigator","clipboard","writeText","GroupsContainer","shaded","bordered","bodyFill","style","display","width","header","e","map","index","src","pic","height","StyledPanelBody","name","id","content","length","IconWrapper","title","setGroup","marginRight","startSession","pathname","editGroup","StyledPanel","placeholder","onChange","val","g","newEntity","createNewWithId","toaster","type","placement","create","styled","Panel","theme","secondColor","textColor","highlight","mainColor","Badge","React","props","ref","_props$as","as","Component","contentText","color","className","_props$classPrefix","classPrefix","children","_props$maxCount","maxCount","rest","_objectWithoutPropertiesLoose","_useClassNames","useClassNames","withClassPrefix","prefix","classes","merge","independent","wrapper","dot","undefined","_extends","displayName","propTypes","PropTypes"],"sourceRoot":""}