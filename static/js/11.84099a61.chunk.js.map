{"version":3,"sources":["components/generic/details/EntityBuilder.tsx"],"names":["EntityBuilder","entityName","history","useHistory","systemDbName","useSelector","selectDBName","system","state","useState","entityObj","onEdit","useEffect","newObj","getEntityAttributes","forEach","attr","slice","console","log","JSON","parse","onClick","goBack","size","newEntity","id","createNewWithId","push","toaster","header","type","name","placement","create","entity","isNew"],"mappings":"0PA4EeA,UA1DO,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WACnBC,EAAUC,cACRC,EAAeC,YAAYC,KAC3BC,EAASF,aAAY,SAACG,GAAD,OAAsBA,EAAMD,UACvD,EAA4BE,qBAA5B,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAIC,EAAiB,IACrBC,YAAoBP,EAAQN,GAAYc,SAAQ,SAACC,GAC/CH,GAAM,WAAQG,EAAR,aAERH,EAASA,EAAOI,MAAM,GAAI,GAAK,IAC/BC,QAAQC,IAAIN,GACZF,EAAOS,KAAKC,MAAMR,MACjB,CAACZ,EAAYM,IAmBhB,OACE,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAQe,QAAS,kBAAMpB,EAAQqB,UAAUC,KAAK,KAA9C,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAQF,QAAS,kBAzBV,WACb,GAAIZ,EAAW,CACb,IAAIe,EAAS,eAAQf,UACde,EAAUC,GACjBC,YAAgBvB,EAAcH,EAAYwB,GAAW,SAACC,GACpDxB,EAAQ0B,KAAR,WAAiB3B,EAAjB,mBAAsCyB,IAEtCG,IAAQD,KACN,eAAC,IAAD,CAAcE,OAAQ,UAAWC,KAAK,UAAtC,kCACwB9B,EADxB,UAC2CwB,EAAUO,KADrD,OAGA,CAAEC,UAAW,oBAcUC,IAAUV,KAAK,KAAtC,SACE,cAAC,IAAD,YAILd,GACC,cAAC,IAAD,CACEyB,OAAQzB,EACRT,WAAYA,EACZU,OAAQA,EACRyB,OAAO","file":"static/js/11.84099a61.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { FaArrowLeft, FaSave } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, ButtonGroup, Notification, toaster } from \"rsuite\";\nimport { createNewWithId } from \"../../../services/DatabaseService\";\nimport { TopBar } from \"./EntityDetailWrapper\";\nimport BreadCrumbIcon from \"../../general/BreadCrumbIcon\";\nimport EntityDetails from \"./EntityDetails\";\nimport IEntity from \"../../../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { RootState } from \"../../../database/Store\";\nimport { getEntityAttributes } from \"../../../services/SystemService\";\n\ninterface $BuilderProps {\n  entityName: string;\n}\n\nconst EntityBuilder = ({ entityName }: $BuilderProps) => {\n  let history = useHistory();\n  const systemDbName = useSelector(selectDBName);\n  const system = useSelector((state: RootState) => state.system);\n  const [entityObj, onEdit] = useState<IEntity>();\n\n  useEffect(() => {\n    let newObj: string = \"{\";\n    getEntityAttributes(system, entityName).forEach((attr: string) => {\n      newObj += `\"${attr}\": \"\",`;\n    });\n    newObj = newObj.slice(0, -1) + \"}\";\n    console.log(newObj)\n    onEdit(JSON.parse(newObj));\n  }, [entityName, system]);\n\n  const create = () => {\n    if (entityObj) {\n      let newEntity = { ...entityObj };\n      delete newEntity.id;\n      createNewWithId(systemDbName, entityName, newEntity, (id: number) => {\n        history.push(`/${entityName}-detail/${id}`);\n\n        toaster.push(\n          <Notification header={\"Success\"} type=\"success\">\n            Success: Created new {entityName} named {newEntity.name}.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopBar>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => history.goBack()} size=\"lg\">\n            <FaArrowLeft />\n          </Button>\n          <Button onClick={() => create()} size=\"lg\">\n            <FaSave />\n          </Button>\n        </ButtonGroup>\n      </TopBar>\n      {entityObj && (\n        <EntityDetails\n          entity={entityObj}\n          entityName={entityName}\n          onEdit={onEdit}\n          isNew={true}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EntityBuilder;\n"],"sourceRoot":""}