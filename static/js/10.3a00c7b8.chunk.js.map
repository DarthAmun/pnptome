{"version":3,"sources":["components/general/BreadCrumbIcon.tsx","components/generic/details/EntityDetailWrapper.tsx","components/generic/details/detailFields/CompletableStringDetailField.tsx","components/generic/details/detailFields/CreatableSetNumberDetailField.tsx","components/generic/details/detailFields/CreatableSetStringDetailField.tsx","components/generic/details/detailFields/subDetailFields/StringSubDetailField.tsx","components/general/FormattedText.tsx","components/general/QuillEditor.tsx","components/generic/details/detailFields/subDetailFields/TextSubDetailField.tsx","components/generic/details/detailFields/subDetailFields/NumberSubDetailField.tsx","components/generic/details/detailFields/EditableSubEntitiesDetailField.tsx","components/generic/details/detailFields/ImageNameDetailField.tsx","components/generic/details/detailFields/SearchableStringDetailField.tsx","components/generic/details/detailFields/SearchableTextDetailField.tsx","components/generic/details/detailFields/SetAttributesDetailField.tsx","components/generic/details/detailFields/SetEntitiesDetailField.tsx","components/generic/details/detailFields/SetEntityDetailField.tsx","components/generic/details/detailFields/SubEntityConnectorDetailField.tsx","components/generic/details/detailFields/SwitchBooleanDetailField.tsx","components/generic/details/detailFields/ViewEntityDetailField.tsx","components/generic/details/EntityDetails.tsx","services/LocationPathService.tsx","components/generic/searchFields/SearchableStringField.tsx","components/generic/searchFields/SetStringField.tsx","components/generic/searchFields/CreatableSetStringField.tsx","components/generic/searchFields/CompletableStringField.tsx","components/generic/searchFields/SwitchBooleanField.tsx","components/generic/searchFields/CreatableSetNumberField.tsx","components/generic/searchFields/SetEntityField.tsx","components/generic/searchFields/FoundSwitchBooleanField.tsx","components/generic/searchFields/SetEntitiesField.tsx","components/generic/searchFields/SetAttributes.tsx","components/generic/EntitySearch.tsx","components/generic/EntityOverview.tsx"],"names":["BreadCrumbIcon","location","useLocation","system","useSelector","state","base","pathname","split","useCallback","RibbonElm","entities","forEach","entity","Ribbon","entityName","findIcon","icon","makeBreadCrumb","styled","div","EntityDetailWrapper","history","useHistory","systemDbName","selectDBName","useState","entityObj","editEntity","showDeleteDialog","setDeleteDialog","tableName","editAndSaveEntity","msg","updateWithCallback","result","toaster","push","closable","header","type","placement","updateEntity","open","onClose","Header","Title","Body","name","Footer","onClick","remove","id","goBack","appearance","TopBar","size","obj","newObj","createNewWithId","duplicateEntity","isNew","onEdit","value","theme","textColor","CompletableStringDetailField","field","keyName","changeEntity","isEdit","changeEdit","Prop","isEditing","InputGroup","style","width","Addon","Input","placeholder","onChange","val","onKeyPress","e","key","Button","stopPropagation","props","secondColor","highlight","CreatableSetNumberDetailField","setNumberEdit","editSetNumber","SetNumber","InputNumber","min","step","CreatableSetStringDetailField","setStringEdit","editSetString","setStringList","setSetStringList","useEffect","reciveAttributeSelection","map","text","label","SetString","colorValue","InputPicker","creatable","data","stringToColour","StringSubDetailField","index","FormattedText","formatted","setText","formating","FormatedTextContainer","QuillEditor","EditorWrapper","modules","toolbar","list","indent","align","direction","color","background","mainColor","TextSubDetailField","includes","Text","PropTitle","float","span","NumberSubDetailField","EditableSubEntitiesDetailField","config","changeSubEntity","newPart","partIndex","console","log","newTraits","onSubEdit","SubProps","part","partindex","Sub","Flag","deleteSubEntity","Object","getOwnPropertyNames","subKeyName","i","subfield","fieldEntry","undefined","newObjString","attr","slice","JSON","parse","createSubEntity","ImageNameDetailField","imageNameEdit","editImageName","getPicture","pic","ImageName","minWidth","Name","Image","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","SearchableStringDetailField","SearchableTextDetailField","SetAttributesDetailField","entityList","setSetEntityList","newEntities","array","at","trim","uniqueTags","ent","douplicate","uni","sort","a","b","localeCompare","TagPicker","trigger","onCreate","item","TagGroup","classe","Tag","SetEntitiesDetailField","setEntityList","SetEntityDetailField","matchedEntityName","newText","toLowerCase","SubEntityConnectorDetailField","foundEntities","setFoundEntities","connector","reciveAllByAttribute","subEntityName","subEntityField","sources","subentity","ViewTag","AddIconButton","IconButton","SwitchBooleanDetailField","switchBooleanEdit","editSwitchBoolean","SwitchBoolean","Checkbox","checked","onCheckboxClick","spliceFirstToUpper","ViewEntityDetailField","foundEntity","setFoundEntity","fields","setFields","viewEntity","linkedBy","reciveByAttribute","fieldsDisplayed","TagTitle","CenterWrapper","EntityDetails","currentEntity","makeFoundFlag","found","searchTerm","View","getEntityDetailConfig","findEntityDetailField","linkToAttribute","getPathVariable","search","substring","replace","unescape","SearchableStringField","applyFilter","removeFilterChange","setVal","setSort","filters","oldFilterString","filter","fieldName","Whisper","speaker","Tooltip","SetStringField","valList","setValList","length","vals","onClean","CreatableSetStringField","newValList","Array","from","Set","CompletableStringField","AutoComplete","SwitchBooleanField","Wrapper","r","CreatableSetNumberField","l1","l2","String","changeVal","SetEntityField","entityTableName","FoundSwitchBooleanField","setType","setFound","SetEntitiesField","SetAttributesField","EntitySearch","mainFilters","showSearchBar","openSearchBar","doSearch","oldFilters","setOldFilters","setFilters","applyFilterChange","newFilters","f","newOldFilters","Drawer","Actions","stringify","reset","SearchWrapper","getEntitySearchConfig","findEntitySearchField","SetAttributes","EntityContainer","EntityOverview","allEntitysFromType","setAllEntitys","setEntities","pageEntities","setPageEntities","activePage","setActivePage","pageAmount","setPageAmount","setStep","loading","isLoading","reciveAll","results","load","oldStep","oldPage","newEntitiesShown","Math","ceil","loadPage","changePage","page","reciveAllFiltered","newStep","newPage","loadPageWithResults","EntityOptions","ButtonGroup","o","marginRight","prefix","changeStep","max","scrollable","marginLeft","marginTop","makeFilterTag","Loader","center","content","PaginationWrapper","Pagination","prev","next","first","last","ellipsis","boundaryLinks","pages","maxButtons","onSelect","total","EntityTile"],"mappings":"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","file":"static/js/10.3a00c7b8.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { FaHome } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { RootState } from \"../../database/Store\";\nimport { SystemEntity } from \"../../database/SystemReducer\";\nimport { findIcon } from \"../../services/IconService\";\n\nconst BreadCrumbIcon = () => {\n  let location = useLocation();\n  const system = useSelector((state: RootState) => state.system);\n  const base = location.pathname.split(\"/\")[1];\n\n  const makeBreadCrumb = useCallback((): JSX.Element => {\n    let RibbonElm = <></>;\n    system.entities.forEach((entity: SystemEntity) => {\n      switch (true) {\n        case base === \"\":\n        case base === \"home\":\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  <FaHome />\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-detail`:\n        case base === `${entity.entityName}-builder`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>{findIcon(entity.icon)}</span>\n              </i>\n            </Ribbon>\n          );\n          break;\n        case base === `${entity.entityName}-overview`:\n          RibbonElm = (\n            <Ribbon>\n              <i>\n                <span>\n                  {findIcon(entity.icon, 10)}\n                  {findIcon(entity.icon, 20)}\n                  {findIcon(entity.icon, 10)}\n                </span>\n              </i>\n            </Ribbon>\n          );\n          break;\n      }\n    });\n    return RibbonElm;\n  }, [base, system]);\n\n  return makeBreadCrumb();\n};\n\nexport default BreadCrumbIcon;\n\nconst Ribbon = styled.div`\n  margin: 3em;\n  /* IE10 Consumer Preview */\n  background-image: -ms-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Mozilla Firefox */\n  background-image: -moz-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Opera */\n  background-image: -o-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* Webkit (Safari/Chrome 10) */\n  background-image: -webkit-gradient(\n    radial,\n    center top,\n    0,\n    center top,\n    487,\n    color-stop(0, #f55c5c),\n    color-stop(1, #c24a4a)\n  );\n  /* Webkit (Chrome 11+) */\n  background-image: -webkit-radial-gradient(\n    center top,\n    circle farthest-side,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  /* W3C Markup, IE10 Release Preview */\n  background-image: radial-gradient(\n    circle farthest-side at center top,\n    #f55c5c 0%,\n    #c24a4a 100%\n  );\n  width: 3.5em;\n  height: 3em;\n  position: relative;\n  top: -20px;\n  margin: 0px 10px 0px -10px;\n  border-top-right-radius: 0.2em;\n  border-top-left-radius: 0.2em;\n  font-family: \"Kite One\", sans-serif;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    left: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-right: 2.5em solid transparent;\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    bottom: -2.4em;\n    right: 0;\n    width: 0;\n    height: 0;\n    border-top: 2.5em solid #c24a4a;\n    border-left: 2.5em solid transparent;\n  }\n\n  & i {\n    width: 90%;\n    height: 160%;\n    display: block;\n    margin: auto;\n    z-index: 100;\n    position: relative;\n    border-right: dashed 0.0625em #333;\n    border-left: dashed 0.0625em #333;\n    overflow: hidden;\n  }\n\n  & i span {\n    color: #fff;\n    display: block;\n    text-align: center;\n    top: 50%;\n    margin-top: -1em;\n    position: relative;\n    text-shadow: 0.0625em 0.0625em 0.0625em #333;\n    font-style: normal;\n    font-weight: bold;\n  }\n`;\n","import { useState } from \"react\";\nimport { FaArrowLeft, FaClone, FaTrash } from \"react-icons/fa\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, ButtonGroup, Notification, Modal, toaster } from \"rsuite\";\nimport styled from \"styled-components\";\nimport BreadCrumbIcon from \"../../general/BreadCrumbIcon\";\n\nimport IEntity from \"../../../data/IEntity\";\nimport {\n  remove,\n  updateWithCallback,\n  createNewWithId,\n} from \"../../../services/DatabaseService\";\nimport EntityDetails from \"./EntityDetails\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\n\ninterface $Props {\n  entity: IEntity;\n  entityName: string;\n}\n\nconst EntityDetailWrapper = ({ entity, entityName }: $Props) => {\n  let history = useHistory();\n  const systemDbName = useSelector(selectDBName);\n  const [entityObj, editEntity] = useState<IEntity>(entity);\n\n  const [showDeleteDialog, setDeleteDialog] = useState<boolean>(false);\n  const tableName = entityName;\n\n  const deleteEntity = () => {\n    remove(systemDbName, tableName, entityObj.id);\n    history.goBack();\n    toaster.push(\n      <Notification closable header={\"Success\"} type=\"success\">\n        Success: Deleted {entityObj.name}.\n      </Notification>,\n      { placement: \"bottomStart\" }\n    );\n  };\n\n  const updateEntity = (entityObj: IEntity, msg: string) => {\n    updateWithCallback(systemDbName, tableName, entityObj, (result) => {\n      if (result > 0) {\n        toaster.push(\n          <Notification closable header={\"Success\"} type=\"success\">\n            Success: {msg}.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      } else {\n        toaster.push(\n          <Notification closable header={\"Error\"} type=\"error\">\n            Error: Something went wrong!.\n          </Notification>,\n          { placement: \"bottomStart\" }\n        );\n      }\n    });\n  };\n\n  const duplicateEntity = (obj: IEntity) => {\n    let newObj = { ...obj };\n    delete newObj.id;\n    createNewWithId(systemDbName, tableName, newObj, (id) => {\n      editAndSaveEntity(\n        { ...entity, name: entity.name + \" [Clone]\" },\n        \"Cloning successful!\"\n      );\n    });\n  };\n\n  const editAndSaveEntity = (entity: IEntity, msg: string) => {\n    editEntity(entity);\n    updateEntity(entity, msg);\n  };\n\n  return (\n    <>\n      <Modal open={showDeleteDialog} onClose={() => setDeleteDialog(false)}>\n        <Modal.Header>\n          <Modal.Title>Attention</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Are you sure you want to delete '{entity.name}'?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => deleteEntity()} appearance=\"primary\">\n            Yes, delete!\n          </Button>\n          <Button onClick={() => setDeleteDialog(false)} appearance=\"subtle\">\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <TopBar>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => history.goBack()} size=\"lg\">\n            <FaArrowLeft />\n          </Button>\n          <Button onClick={() => duplicateEntity(entityObj)} size=\"lg\">\n            <FaClone />\n          </Button>\n          <Button onClick={() => setDeleteDialog(true)} size=\"lg\">\n            <FaTrash />\n          </Button>\n        </ButtonGroup>\n      </TopBar>\n      <EntityDetails\n        entity={entityObj}\n        entityName={entityName}\n        isNew={false}\n        onEdit={(value: any) => editAndSaveEntity(value, \"Saved!\")}\n      />\n    </>\n  );\n};\n\nexport default EntityDetailWrapper;\n\nexport const TopBar = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  flex: 1 1;\n  width: 100%;\n  max-width: calc(100% - 20px);\n  height: 55px;\n  padding: 10px;\n  display: flex;\n  align-items: flex-start;\n\n  @media (max-width: 576px) {\n    max-width: calc(100% - 20px);\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $EditCompletableStringFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CompletableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $EditCompletableStringFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default CompletableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, InputNumber } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $CreatableSetNumberDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetNumberDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity\n}: $CreatableSetNumberDetailFieldProps) => {\n  const [setNumberEdit, editSetNumber] = useState<boolean>(isNew);\n\n  return (\n    <SetNumber isEditing={setNumberEdit} onClick={() => editSetNumber(true)}>\n      {setNumberEdit && (\n        <InputGroup>\n          <InputNumber\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            min={1}\n            step={1}\n            style={{ width: \"60px\" }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetNumber(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setNumberEdit && <b>{field}</b>}\n    </SetNumber>\n  );\n};\n\nexport default CreatableSetNumberDetailField;\n\nconst SetNumber = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  min-width: 40px;\n  width: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  height: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-radius: ${(props) => (props.isEditing ? \"5px\" : \"30px\")};\n  margin: 0px 0px 5px 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { InputGroup, InputPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { RootState } from \"../../../../database/Store\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { stringToColour } from \"../../../../services/ColorService\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $CreatableSetStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $CreatableSetStringDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [setStringEdit, editSetString] = useState<boolean>(isNew);\n  const [setStringList, setSetStringList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        setSetStringList(\n          entities.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity, tableName, keyName]);\n\n  return (\n    <SetString\n      colorValue={field}\n      isEditing={setStringEdit}\n      onClick={() => editSetString(true)}\n    >\n      {setStringEdit && (\n        <InputGroup>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <InputPicker\n            creatable\n            value={field}\n            data={setStringList}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetString(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setStringEdit && (\n        <>\n          {findIcon(icon)}\n          {field}\n        </>\n      )}\n    </SetString>\n  );\n};\n\nexport default CreatableSetStringDetailField;\n\nconst SetString = styled.div<{\n  colorValue?: string;\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${(props) => {\n    return stringToColour(props.colorValue);\n  }};\n  cursor: pointer;\n\n  svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $StringSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst StringSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $StringSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop key={index} isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default StringSubDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { ReactNodeArray } from \"hoist-non-react-statics/node_modules/@types/react\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formating } from \"../../services/TextService\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormattedText = ({ text }: $Props) => {\n  const [formatted, setText] = useState<ReactNodeArray>([]);\n\n  useEffect(() => {\n    setText(formating(text));\n  }, [text]);\n\n  return <FormatedTextContainer>{formatted}</FormatedTextContainer>;\n};\n\nexport default FormattedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n  white-space: pre-line;\n`;\n","import ReactQuill from \"react-quill\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  value: string;\n  placeholder: string;\n  onChange: (val: any) => void;\n}\n\nconst QuillEditor = ({ value, placeholder, onChange }: $Props) => {\n  return (\n    <EditorWrapper>\n      <ReactQuill\n        theme=\"snow\"\n        placeholder={placeholder}\n        modules={{\n          toolbar: [\n            //[{ font: [] }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n            [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], // toggled buttons\n            [{ list: \"ordered\" }, { list: \"bullet\" }],\n            [{ indent: \"-1\" }, { indent: \"+1\" }, { align: [] }], // outdent/indent\n            [{ direction: \"rtl\" }], // text direction\n\n            [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n\n            [\"clean\"], // remove formatting button\n          ],\n        }}\n        value={value}\n        onChange={onChange}\n      />\n    </EditorWrapper>\n  );\n};\n\nexport default QuillEditor;\n\nconst EditorWrapper = styled.div`\n  & .quill .ql-toolbar {\n    border: none;\n    .ql-picker {\n      color: ${({ theme }) => theme.highlight};\n    }\n    .ql-stroke {\n      stroke: ${({ theme }) => theme.highlight};\n    }\n    .ql-picker-options {\n      background-color: ${({ theme }) => theme.secondColor};\n      border-radius: 5px;\n      border: none;\n      color: ${({ theme }) => theme.textColor};\n    }\n    .ql-picker-label {\n      border: none;\n      color: ${({ theme }) => theme.highlight};\n    }\n  }\n  & .quill .ql-container {\n    border: none;\n    background-color: ${({ theme }) => theme.mainColor};\n    border-radius: 5px;\n  }\n  & .ql-blank:before {\n    color: rgba(255, 255, 255, 0.6);\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport { Button } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport FormattedText from \"../../../../general/FormattedText\";\nimport QuillEditor from \"../../../../general/QuillEditor\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $TextSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst TextSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $TextSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  useEffect(() => {\n    if (!field.includes(\"<p>\")) {\n      changeEntity({ ...entity, [keyName]: \"<p>\" + field + \"</p>\" });\n    }\n  }, [entity, keyName, field, changeEntity]);\n\n  return (\n    <Text key={index} isEditing={isEdit}>\n      {isEdit && (\n        <>\n          <QuillEditor\n            value={field}\n            placeholder={keyName}\n            onChange={(val: any) => {\n              changeEntity({ ...entity, [keyName]: val });\n            }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          <PropTitle>{findIcon(icon)}</PropTitle>\n          <Button onClick={() => changeEdit(true)} style={{ float: \"right\" }}>\n            <FaEdit />\n          </Button>\n          <FormattedText text={field} />\n        </>\n      )}\n    </Text>\n  );\n};\n\nexport default TextSubDetailField;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.highlight};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  width: calc(100% - 15px);\n  margin: 10px 0px 5px 0px;\n  padding: 10px;\n  float: left;\n  line-height: 18px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input, InputNumber } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $NumberSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst NumberSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $NumberSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop key={index} isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <InputNumber\n            value={field}\n            min={1}\n            step={1}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default NumberSubDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport StringSubDetailField from \"./subDetailFields/StringSubDetailField\";\nimport TextSubDetailField from \"./subDetailFields/TextSubDetailField\";\nimport NumberSubDetailField from \"./subDetailFields/NumberSubDetailField\";\nimport { Button, IconButton } from \"rsuite\";\nimport { FaPlusCircle, FaTrash } from \"react-icons/fa\";\n\ninterface $EditableSubEntitiesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  config: ConfigPart;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst EditableSubEntitiesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  config,\n  icon,\n  onEdit,\n  changeEntity,\n}: $EditableSubEntitiesDetailFieldProps) => {\n  const changeSubEntity = (newPart: any, partIndex: number) => {\n    console.log(newPart);\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits[partIndex] = newPart;\n    changeEntity({ ...entity, [keyName]: newTraits });\n  };\n  const onSubEdit = (value: any, partIndex: number) => {\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits[partIndex] = value;\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  const deleteSubEntity = (partIndex: number) => {\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    delete newTraits[partIndex];\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  const createSubEntity = () => {\n    let newObjString: string = \"{\";\n    Object.getOwnPropertyNames(config.config).forEach((attr: string) => {\n      const fieldEntry = Object(config.config)[attr];\n      switch (true) {\n        case fieldEntry.type === \"number\":\n          newObjString += `\"${attr}\": 0,`;\n          break;\n        case fieldEntry.type === \"string\":\n        case fieldEntry.type === \"text\":\n          newObjString += `\"${attr}\": \"\",`;\n          break;\n        default:\n          newObjString += `\"${attr}\": \"\",`;\n          break;\n      }\n    });\n    newObjString = newObjString.slice(0, -1) + \"}\";\n    const newObj = JSON.parse(newObjString);\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits.push(newObj);\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  return (\n    <SubProps>\n      {field.map((part: any, partindex: number) => {\n        return (\n          <Sub key={partindex}>\n            {icon && <Flag>{findIcon(icon)}</Flag>}\n            <Button\n              onClick={() => deleteSubEntity(partindex)}\n              style={{ float: \"right\" }}\n            >\n              <FaTrash />\n            </Button>\n            {Object.getOwnPropertyNames(config.config).map(\n              (subKeyName: any, i: number) => {\n                const index = i + \"\" + partindex;\n                const subfield = part[subKeyName as keyof typeof entity];\n                const fieldEntry = Object(config.config)[subKeyName];\n                if (field !== undefined) {\n                  switch (true) {\n                    case fieldEntry.type === \"number\":\n                      return (\n                        <NumberSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    case fieldEntry.type === \"string\":\n                      return (\n                        <StringSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    case fieldEntry.type === \"text\":\n                      return (\n                        <TextSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    default:\n                      return <></>;\n                  }\n                }\n                return <></>;\n              }\n            )}\n          </Sub>\n        );\n      })}\n      <Button onClick={() => createSubEntity()}>\n        <FaPlusCircle />\n      </Button>\n    </SubProps>\n  );\n};\n\nexport default EditableSubEntitiesDetailField;\n\nconst SubProps = styled.div`\n  max-width: calc(100% - 15px);\n  margin: 2px 5px 2px 0px;\n  float: left;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nconst Sub = styled.div`\n  flex: 1 1;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst Flag = styled.div`\n  float: left;\n  padding: 10px;\n  margin: 5px;\n  width: 40px;\n  height: 40px;\n\n  line-height: 20px;\n  text-align: center;\n\n  border-radius: 30px;\n  border-bottom: solid 1px ${({ theme }) => theme.highlight};\n  color: ${({ theme }) => theme.highlight};\n`;\n","import { useCallback, useState } from \"react\";\nimport { FaCheck, FaImage } from \"react-icons/fa\";\nimport { Input, InputGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $ImageNameDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst ImageNameDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $ImageNameDetailFieldProps) => {\n  const [imageNameEdit, editImageName] = useState<boolean>(isNew);\n\n  const getPicture = useCallback(() => {\n    const pic = entity[\"pic\" as keyof typeof entity];\n    if (pic !== \"\" && pic !== null && pic !== undefined) {\n      return pic + \"\";\n    }\n    return \"\";\n  }, [entity]);\n\n  return getPicture() !== \"\" ? (\n    <ImageName isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && (\n        <>\n          <Image pic={getPicture()}></Image>\n          <b>{entity.name}</b>\n        </>\n      )}\n    </ImageName>\n  ) : (\n    <Name isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && <b>{entity.name}</b>}\n    </Name>\n  );\n};\n\nexport default ImageNameDetailField;\n\nconst Name = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 0px 10px 0px;\n  width: calc(100% - 15px);\n  color: ${({ theme }) => theme.textColor};\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: ${(props) => (props.isEditing ? \"flex\" : \"block\")};\n  flex-wrap: wrap;\n  gap: 5px;\n  cursor: pointer;\n`;\n\nconst ImageName = styled(Name)`\n  height: auto;\n  border-radius: 50px 5px 5px 50px;\n  cursor: pointer;\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url('${pic}')`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableStringDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SearchableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport { Button } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport FormattedText from \"../../../general/FormattedText\";\nimport QuillEditor from \"../../../general/QuillEditor\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableTextDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableTextDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableTextDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  useEffect(() => {\n    if(!field.includes(\"<p>\")){\n      changeEntity({ ...entity, [keyName]: \"<p>\"+field+\"</p>\" });\n    }\n  },[entity, keyName, field, changeEntity])\n\n  return (\n    <Text isEditing={isEdit}>\n      {isEdit && (\n        <>\n          <QuillEditor\n            value={field}\n            placeholder={keyName}\n            onChange={(val: any) => {\n              changeEntity({ ...entity, [keyName]: val });\n            }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          <PropTitle>{findIcon(icon)}</PropTitle>\n          <Button onClick={() => changeEdit(true)} style={{ float: \"right\" }}>\n            <FaEdit />\n          </Button>\n          <FormattedText text={field} />\n        </>\n      )}\n    </Text>\n  );\n};\n\nexport default SearchableTextDetailField;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.highlight};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  width: calc(100% - 15px);\n  margin: 10px 0px 5px 0px;\n  padding: 10px;\n  float: left;\n  line-height: 18px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetAttributesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetAttributesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $SetAttributesDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [entityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        const newEntities: { value: string; label: string }[] = [];\n        entities.forEach((array: any) => {\n          array.forEach((attr: string) => {\n            const at = attr.trim();\n            newEntities.push({ value: at, label: at });\n          });\n        });\n        const uniqueTags: { value: string; label: string }[] = [];\n        newEntities.forEach((ent: { value: string; label: string }) => {\n          let douplicate: boolean = false;\n          uniqueTags.forEach((uni: { value: string; label: string }) => {\n            if (ent.label === uni.label) {\n              douplicate = true;\n            }\n          });\n          if (!douplicate) uniqueTags.push(ent);\n        });\n        uniqueTags.sort((a, b) => a.label.localeCompare(b.label));\n        setSetEntityList(uniqueTags);\n      }\n    );\n  }, [tableName, keyName, field, entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={entityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            creatable\n            onCreate={(val: any[], item: any) => {\n              setSetEntityList((e) => [...e, item]);\n              changeEntity({ ...entity, [keyName]: [...val, item.value] });\n            }}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetAttributesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntitiesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntitiesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntitiesDetailFieldProps) => {\n\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(systemDbName, keyName, \"name\", (entities: IndexableType[]) => {\n      setSetEntityList(\n        entities.map((text: IndexableType) => {\n          const newText: string = text as string;\n          return { value: newText, label: newText };\n        })\n      );\n    });\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={setEntityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntitiesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, InputPicker, Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntityDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  matchedEntityName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntityDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  matchedEntityName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    console.log(matchedEntityName);\n    reciveAttributeSelection(\n      systemDbName,\n      matchedEntityName,\n      \"name\",\n      (entities: IndexableType[]) => {\n        setSetEntityList(\n          entities.map((text: IndexableType) => {\n            const newText: string = (text as string).toLowerCase();\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <InputPicker\n            data={setEntityList}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            <Tag>{field}</Tag>\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { IconButton, Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAllByAttribute } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SubEntityConnectorDetailFieldProps {\n  entity: IEntity;\n  config: ConfigPart;\n  keyName: string;\n  icon: string;\n}\n\nconst SubEntityConnectorDetailField = ({\n  entity,\n  config,\n  keyName,\n  icon,\n}: $SubEntityConnectorDetailFieldProps) => {\n  let history = useHistory();\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntities, setFoundEntities] = useState<IEntity[]>();\n\n  useEffect(() => {\n    if (config.connector)\n      reciveAllByAttribute(\n        systemDbName,\n        config.connector?.subEntityName,\n        config.connector?.subEntityField,\n        `${entity.name}|${entity.sources}`,\n        (foundEntities: IEntity[]) => {\n          setFoundEntities(foundEntities);\n        }\n      );\n  }, [systemDbName, entity]);\n\n  const newSubEntity = () => {\n    history.push(`/${keyName}-builder`);\n  };\n  const viewSubEntity = (id: number | undefined) => {\n    history.push(`/${keyName}-detail/${id}`);\n  };\n\n  return (\n    <>\n      {foundEntities && (\n        <Prop>\n          {findIcon(icon)}\n          <TagGroup>\n            {foundEntities?.map((subentity: IEntity) => {\n              return (\n                <ViewTag onClick={() => viewSubEntity(subentity.id)}>\n                  {subentity.name}\n                </ViewTag>\n              );\n            })}\n            <AddIconButton\n              onClick={() => newSubEntity()}\n              icon={<FaPlus />}\n              appearance=\"ghost\"\n              size=\"xs\"\n            />\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default SubEntityConnectorDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst AddIconButton = styled(IconButton)`\n  margin-left: 10px;\n`;\n\nconst ViewTag = styled(Tag)`\n  cursor: pointer;\n`;\n","import { useState } from \"react\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { spliceFirstToUpper } from \"../../../../services/TextService\";\n\ninterface $SwitchBooleanDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SwitchBooleanDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $SwitchBooleanDetailFieldProps) => {\n  const [switchBooleanEdit, editSwitchBoolean] = useState<boolean>(isNew);\n\n  return (\n    <SwitchBoolean\n      isEditing={switchBooleanEdit}\n      onClick={() => editSwitchBoolean(true)}\n    >\n      {switchBooleanEdit && (\n        <Checkbox\n          checked={field}\n          onCheckboxClick={(e) => {\n            e.stopPropagation();\n            editSwitchBoolean(false);\n            changeEntity({ ...entity, [keyName]: !field });\n            onEdit({ ...entity, [keyName]: !field });\n          }}\n        >\n          Ritual\n        </Checkbox>\n      )}\n      {!switchBooleanEdit && (\n        <>\n          {!!field ? (\n            spliceFirstToUpper(keyName)\n          ) : (\n            <s>{spliceFirstToUpper(keyName)}</s>\n          )}\n        </>\n      )}\n    </SwitchBoolean>\n  );\n};\n\nexport default SwitchBooleanDetailField;\n\nconst SwitchBoolean = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveByAttribute } from \"../../../../services/DatabaseService\";\n\ninterface $ViewEntityDetailFieldProps {\n  entity: IEntity;\n  keyName: string;\n  config: ConfigPart;\n}\n\nconst ViewEntityDetailField = ({\n  entity,\n  keyName,\n  config,\n}: $ViewEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntity, setFoundEntity] = useState<IEntity>();\n  const [fields, setFields] = useState<string[]>([]);\n\n  useEffect(() => {\n    const field: string = entity[config.viewEntity?.linkedBy as keyof typeof entity] as string;\n    reciveByAttribute(systemDbName, keyName, \"name\", field, (foundEntity: IEntity) => {\n      setFoundEntity(foundEntity);\n      setFields(config.viewEntity?.fieldsDisplayed || []);\n    });\n  }, [entity]);\n\n  return (\n    <>\n      {foundEntity && (\n        <Prop>\n          <TagGroup>\n            {fields?.map((field: string) => {\n              return (\n                <Tag>\n                  <TagTitle>{field}:</TagTitle>{\" \"}\n                  {foundEntity[field as keyof typeof entity]}\n                </Tag>\n              );\n            })}\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default ViewEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst TagTitle = styled.span`\n  color: ${({ theme }) => theme.highlight};\n`;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../data/ConfigPart\";\nimport IEntity from \"../../../data/IEntity\";\nimport { RootState } from \"../../../database/Store\";\nimport {\n  findEntityDetailField,\n  findEntityTileField,\n  getEntityDetailConfig,\n} from \"../../../services/SystemService\";\nimport { spliceFirstToUpper } from \"../../../services/TextService\";\n\nimport CompletableStringDetailField from \"./detailFields/CompletableStringDetailField\";\nimport CreatableSetNumberDetailField from \"./detailFields/CreatableSetNumberDetailField\";\nimport CreatableSetStringDetailField from \"./detailFields/CreatableSetStringDetailField\";\nimport EditableSubEntitiesDetailField from \"./detailFields/EditableSubEntitiesDetailField\";\nimport ImageNameDetailField from \"./detailFields/ImageNameDetailField\";\nimport SearchableStringDetailField from \"./detailFields/SearchableStringDetailField\";\nimport SearchableTextDetailField from \"./detailFields/SearchableTextDetailField\";\nimport SetAttributesDetailField from \"./detailFields/SetAttributesDetailField\";\nimport SetEntitiesDetailField from \"./detailFields/SetEntitiesDetailField\";\nimport SetEntityDetailField from \"./detailFields/SetEntityDetailField\";\nimport SubEntityConnectorDetailField from \"./detailFields/SubEntityConnectorDetailField\";\nimport SwitchBooleanDetailField from \"./detailFields/SwitchBooleanDetailField\";\nimport ViewEntityDetailField from \"./detailFields/ViewEntityDetailField\";\n\ninterface $Props {\n  entity: IEntity;\n  entityName: string;\n  isNew: boolean;\n  onEdit: (value: any) => void;\n}\n\nconst EntityDetails = ({ entity, entityName, isNew, onEdit }: $Props) => {\n  const [currentEntity, changeEntity] = useState<IEntity>({ ...entity });\n  const system = useSelector((state: RootState) => state.system);\n\n  const makeFoundFlag = useCallback(\n    (config: ConfigPart) => {\n      if (config.found) {\n        const field = entity[config.found?.field as keyof typeof entity];\n        const showFlag = (field + \"\")\n          .toLowerCase()\n          .includes(config.found?.searchTerm);\n        return showFlag ? (\n          spliceFirstToUpper(config.found?.searchTerm)\n        ) : (\n          <s>{spliceFirstToUpper(config.found?.searchTerm)}</s>\n        );\n      }\n      return <></>;\n    },\n    [entity]\n  );\n\n  return (\n    <CenterWrapper>\n      <View>\n        {Object.getOwnPropertyNames(\n          getEntityDetailConfig(system, entityName)\n        ).map((keyName: any, index: number) => {\n          const field = currentEntity[keyName as keyof typeof entity];\n          const fieldEntry = findEntityDetailField(system, entityName, keyName);\n          if (field !== undefined) {\n            switch (true) {\n              case fieldEntry.type === \"CreatableSetNumber\":\n                return (\n                  <CreatableSetNumberDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetString\":\n                return (\n                  <CreatableSetStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    tableName={entityName}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SwitchBoolean\":\n                return (\n                  <SwitchBooleanDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"ImageName\":\n                return (\n                  <ImageNameDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"CompletableString\":\n                return (\n                  <CompletableStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SearchableString\":\n                return (\n                  <SearchableStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetAttributes\":\n                return (\n                  <SetAttributesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    tableName={entityName}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetEntities\":\n                return (\n                  <SetEntitiesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetEntity\":\n                return (\n                  <SetEntityDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    matchedEntityName={fieldEntry.linkToAttribute || \"\"}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SearchableText\":\n                return (\n                  <SearchableTextDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"EditableSubEntities\":\n                return (\n                  <EditableSubEntitiesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          } else {\n            switch (true) {\n              case fieldEntry.type === \"FoundFlag\":\n                return <Flag key={index}>{makeFoundFlag(fieldEntry)}</Flag>;\n              case fieldEntry.type === \"ViewEntity\":\n                return (\n                  <ViewEntityDetailField\n                    key={index}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                  />\n                );\n              case fieldEntry.type === \"SubEntityConnector\":\n                return (\n                  <SubEntityConnectorDetailField\n                    key={index}\n                    keyName={keyName}\n                    icon={fieldEntry.icon || \"\"}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          }\n        })}\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default EntityDetails;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Flag = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","export const getPathVariable = (location: any, val: string): string => {\n  let result: string = \"\";\n  let locationParts: string[] = location.search.substring(1).split(\"&\");\n  locationParts.forEach((part: string) => {\n    if (part.includes(val)) result = part.replace(`${val}=`, \"\");\n  });\n  return unescape(result);\n};\n","import { useState, useEffect } from \"react\";\nimport { FaLongArrowAltDown, FaLongArrowAltUp } from \"react-icons/fa\";\nimport { useLocation } from \"react-router\";\nimport { Whisper, Tooltip, InputGroup, Input } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SearchableStringFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SearchableStringField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SearchableStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string>(\"\");\n  const [sort, setSort] = useState<number>();\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n          if (filter.sort > 0) setSort(filter.sort as number);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val !== \"\") {\n      applyFilter(\n        { fieldName: type, value: val, sort: sort !== undefined ? sort : 0 },\n        type\n      );\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val, sort]);\n\n  return (\n    <Whisper\n      trigger=\"focus\"\n      placement={\"top\"}\n      speaker={\n        <Tooltip>\n          Part of the {entityName}'s {type}\n        </Tooltip>\n      }\n    >\n      <InputGroup style={{ width: \"300px\" }}>\n        <InputGroup.Addon>{type}</InputGroup.Addon>\n        <Input value={val} onChange={(val: any) => setVal(val)} />\n        <InputGroup.Button\n          onClick={(e) => {\n            e.stopPropagation();\n            if (sort !== undefined) setSort((sort + 1) % 3);\n            else setSort(1);\n          }}\n        >\n          {sort !== undefined ? (\n            <>\n              {sort === 0 ? <>-</> : <></>}\n              {sort === 1 ? <FaLongArrowAltDown /> : <></>}\n              {sort === 2 ? <FaLongArrowAltUp /> : <></>}\n            </>\n          ) : (\n            <>-</>\n          )}\n        </InputGroup.Button>\n      </InputGroup>\n    </Whisper>\n  );\n};\n\nexport default SearchableStringField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetStringFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetStringField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetStringFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      entityName,\n      type,\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetStringField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $CreatableSetStringFieldProps {\n  entities: any[];\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CreatableSetStringField = ({\n  entities,\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $CreatableSetStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>([]);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    }else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    const newValList: string[] = [\n      ...Array.from(new Set(entities.map((entity: any) => entity[type]))),\n    ].sort();\n    setValList(\n      newValList.map((text: string) => {\n        return { value: text, label: text };\n      })\n    );\n  }, [entities, type]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default CreatableSetStringField;\n","import { useState, useEffect } from \"react\";\nimport { FaLongArrowAltDown, FaLongArrowAltUp } from \"react-icons/fa\";\nimport { Whisper, Tooltip, InputGroup, AutoComplete } from \"rsuite\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\nimport Filter from \"../../../data/Filter\";\nimport { useLocation } from \"react-router\";\n\ninterface $CompletableStringFieldProps {\n  entities: any[];\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CompletableStringField = ({\n  entities,\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $CompletableStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string>(\"\");\n  const [valList, setValList] = useState<{ value: string; label: string }[]>([]);\n  const [sort, setSort] = useState<number>();\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n          if (filter.sort > 0) setSort(filter.sort as number);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val !== \"\") {\n      applyFilter({ fieldName: type, value: val, sort: sort !== undefined ? sort : 0 }, type);\n    }else {\n      removeFilterChange(type);\n    }\n  }, [val, sort]);\n\n  useEffect(() => {\n    const newValList: string[] = [\n      ...Array.from(new Set(entities.map((entity: any) => entity[type]))),\n    ].sort();\n    setValList(\n      newValList.map((text: string) => {\n        return { value: text, label: text };\n      })\n    );\n  }, [entities, type]);\n\n  return (\n    <Whisper\n      trigger=\"focus\"\n      placement={\"top\"}\n      speaker={\n        <Tooltip>\n          Part of the {entityName}'s {type}\n        </Tooltip>\n      }\n    >\n      <InputGroup style={{ width: \"300px\" }}>\n        <InputGroup.Addon>{type}</InputGroup.Addon>\n        <AutoComplete\n          placeholder={`Select ${type}`}\n          data={valList}\n          value={val}\n          onChange={setVal}\n          style={{ width: \"min-content\", minWidth: \"150px\" }}\n        />\n        <InputGroup.Button\n          onClick={(e) => {\n            e.stopPropagation();\n            if (sort !== undefined) setSort((sort + 1) % 3);\n            else setSort(1);\n          }}\n        >\n          {sort !== undefined ? (\n            <>\n              {sort === 0 ? <>-</> : <></>}\n              {sort === 1 ? <FaLongArrowAltDown /> : <></>}\n              {sort === 2 ? <FaLongArrowAltUp /> : <></>}\n            </>\n          ) : (\n            <>-</>\n          )}\n        </InputGroup.Button>\n      </InputGroup>\n    </Whisper>\n  );\n};\n\nexport default CompletableStringField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SwitchBooleanFieldProps {\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SwitchBooleanField = ({\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $SwitchBooleanFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<boolean>(false);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as boolean);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  return (\n    <Wrapper>\n      <Checkbox checked={val} onCheckboxClick={() => setVal((r) => !r)}>\n        {type}\n      </Checkbox>\n    </Wrapper>\n  );\n};\n\nexport default SwitchBooleanField;\n\nconst Wrapper = styled.div`\n  width: min-content;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $CreatableSetNumberFieldProps {\n  entities: any[];\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CreatableSetNumberField = ({\n  entities,\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $CreatableSetNumberFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<number[]>([]);\n  const [valList, setValList] = useState<{ value: number; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as number[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    const newValList: number[] = [\n      ...Array.from(\n        new Set(entities.map((entity: any) => +entity[type]))\n      ),\n    ].sort((l1, l2) => l1 - l2);\n    setValList(\n      newValList.map((text: number) => {\n        return { value: text, label: String(text) };\n      })\n    );\n  }, [entities, type]);\n\n  const changeVal = (vals: string[]) => {\n    if (vals) {\n      setVal(vals.map((val: string) => +val));\n    } else {\n      setVal([]);\n    }\n  };\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onClean={() => setVal([])}\n      onChange={(vals: string[]) => changeVal(vals)}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default CreatableSetNumberField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { InputPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetEntityFieldProps {\n  type: string;\n  entityName: string;\n  entityTableName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetEntityField = ({\n  type,\n  entityName,\n  entityTableName,\n  applyFilter,\n  removeFilterChange,\n}: $SetEntityFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string>(\"\");\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(systemDbName, entityTableName, \"name\", (vals: IndexableType[]) => {\n      setValList(\n        vals.map((text: IndexableType) => {\n          const newText: string = text as string;\n          return { value: newText, label: newText };\n        })\n      );\n    });\n  }, [type, entityName]);\n\n  return (\n    <InputPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal(\"\")}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetEntityField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../data/ConfigPart\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $FoundSwitchBooleanFieldProps {\n  config: ConfigPart;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst FoundSwitchBooleanField = ({\n  config,\n  applyFilter,\n  removeFilterChange,\n}: $FoundSwitchBooleanFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<boolean>(false);\n  const [type, setType] = useState<string>(\"\");\n  const [found, setFound] = useState<string>(\"\");\n\n  useEffect(() => {\n    setType(config.found?.field || \"\");\n    setFound(config.found?.searchTerm || \"\");\n\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === config.found?.field) {\n          setVal(true);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val) {\n      applyFilter({ fieldName: type, value: found, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  return (\n    <Wrapper>\n      <Checkbox checked={val} onCheckboxClick={() => setVal((r) => !r)}>\n        {found}\n      </Checkbox>\n    </Wrapper>\n  );\n};\n\nexport default FoundSwitchBooleanField;\n\nconst Wrapper = styled.div`\n  width: min-content;\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetEntitiesFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetEntitiesField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetEntitiesFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      type,\n      \"name\",\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetEntitiesField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetAttributesFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetAttributesField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetAttributesFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      entityName,\n      type,\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetAttributesField;\n","import { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Filter from \"../../data/Filter\";\nimport styled from \"styled-components\";\nimport { Drawer, Button } from \"rsuite\";\nimport { getPathVariable } from \"../../services/LocationPathService\";\nimport SearchableStringField from \"./searchFields/SearchableStringField\";\nimport SetStringField from \"./searchFields/SetStringField\";\nimport CreatableSetStringField from \"./searchFields/CreatableSetStringField\";\nimport CompletableStringField from \"./searchFields/CompletableStringField\";\nimport SwitchBooleanField from \"./searchFields/SwitchBooleanField\";\nimport CreatableSetNumberField from \"./searchFields/CreatableSetNumberField\";\nimport SetEntityField from \"./searchFields/SetEntityField\";\nimport FoundSwitchBooleanField from \"./searchFields/FoundSwitchBooleanField\";\nimport {\n  findEntitySearchField,\n  getEntitySearchConfig,\n} from \"../../services/SystemService\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\nimport SetEntitiesField from \"./searchFields/SetEntitiesField\";\nimport ConfigPart from \"../../data/ConfigPart\";\nimport SetAttributesField from \"./searchFields/SetAttributes\";\n\ninterface $SearchProps {\n  entityName: string;\n  entities: any[];\n  filters: Filter[];\n  showSearchBar: boolean;\n  openSearchBar: (value: boolean) => void;\n  doSearch: (filters: Filter[]) => void;\n}\n\nconst EntitySearch = ({\n  entityName,\n  entities,\n  filters: mainFilters,\n  showSearchBar,\n  openSearchBar,\n  doSearch,\n}: $SearchProps) => {\n  let history = useHistory();\n  let location = useLocation();\n  const [oldFilters, setOldFilters] = useState<Filter[]>(mainFilters);\n  const [filters, setFilters] = useState<Filter[]>([]);\n  const system = useSelector((state: RootState) => state.system);\n\n  const applyFilterChange = (filter: Filter, type: any) => {\n    setFilters((newFilters: Filter[]) => {\n      if (newFilters.filter((f) => f.fieldName === type).length === 1)\n        newFilters = newFilters.map((f) => (f.fieldName === type ? filter : f));\n      else newFilters = [...newFilters, filter];\n      return newFilters;\n    });\n  };\n\n  const removeFilterChange = (type: any) => {\n    setFilters((newFilters: Filter[]) => {\n      return newFilters.filter((f) => f.fieldName !== type);\n    });\n  };\n\n  useEffect(() => {\n    doSearch(oldFilters);\n  }, [oldFilters]);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const newOldFilters: Filter[] = JSON.parse(oldFilterString);\n      setOldFilters(newOldFilters);\n    }\n  }, []);\n\n  const search = () => {\n    let newFilters: Filter[] = [...filters];\n    if (newFilters.length > 0) {\n      if (location.search !== \"\") {\n        let step: string = \"\";\n        const locationParts: string[] = location.search.substring(1).split(\"&\");\n        locationParts.forEach((part: string) => {\n          if (part.includes(\"step\")) step = part;\n        });\n        history.push({\n          pathname: `/${entityName}-overview`,\n          search: `?filter=${JSON.stringify(newFilters)}&${\n            step !== \"\" ? `${step}&` : \"\"\n          }page=1`,\n        });\n      } else {\n        history.push({\n          pathname: `/${entityName}-overview`,\n          search: `?filter=${JSON.stringify(newFilters)}`,\n        });\n      }\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n      });\n    }\n    doSearch(newFilters);\n  };\n\n  const reset = () => {\n    setFilters([]);\n    setOldFilters([]);\n    let step: string = \"\";\n    const locationParts: string[] = location.search.substring(1).split(\"&\");\n    locationParts.forEach((part: string) => {\n      if (part.includes(\"step\")) step = part;\n    });\n    history.push({\n      pathname: `/${entityName}-overview`,\n      search: `?${step !== \"\" ? `${step}&` : \"\"}page=1`,\n    });\n  };\n\n  return (\n    <Drawer\n      open={showSearchBar}\n      onClose={() => openSearchBar(false)}\n      placement={\"top\"}\n    >\n      <Drawer.Header>\n        <Drawer.Title>Search</Drawer.Title>\n        <Drawer.Actions>\n          <Button\n            onClick={() => {\n              search();\n              openSearchBar(false);\n            }}\n            appearance=\"primary\"\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => {\n              reset();\n              openSearchBar(false);\n            }}\n            appearance=\"ghost\"\n          >\n            Reset\n          </Button>\n        </Drawer.Actions>\n      </Drawer.Header>\n      <Drawer.Body>\n        <SearchWrapper>\n          {Object.getOwnPropertyNames(\n            getEntitySearchConfig(system, entityName)\n          ).map((keyName: any, index: number) => {\n            const fieldEntry: ConfigPart = findEntitySearchField(\n              system,\n              entityName,\n              keyName\n            );\n            switch (true) {\n              case fieldEntry.type === \"SearchableText\":\n              case fieldEntry.type === \"SearchableString\":\n                return (\n                  <SearchableStringField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetString\":\n                return (\n                  <SetStringField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetAttributes\":\n                return (\n                  <SetAttributesField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetEntities\":\n                return (\n                  <SetEntitiesField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetEntity\":\n                return (\n                  <SetEntityField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    entityTableName={fieldEntry.linkToAttribute || \"\"}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetString\":\n                return (\n                  <CreatableSetStringField\n                    key={index}\n                    entities={entities}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CompletableString\":\n                return (\n                  <CompletableStringField\n                    key={index}\n                    entities={entities}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SwitchBoolean\":\n                return (\n                  <SwitchBooleanField\n                    key={index}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetNumber\":\n                return (\n                  <CreatableSetNumberField\n                    key={index}\n                    entities={entities}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"FoundString\":\n                return (\n                  <FoundSwitchBooleanField\n                    config={fieldEntry}\n                    key={index}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          })}\n        </SearchWrapper>\n      </Drawer.Body>\n    </Drawer>\n  );\n};\n\nexport default EntitySearch;\n\nconst SearchWrapper = styled.div`\n  height: auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n  gap: 10px;\n`;\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Button,\n  ButtonGroup,\n  InputNumber,\n  Loader,\n  Pagination,\n  Tag,\n  TagGroup,\n} from \"rsuite\";\nimport { reciveAll, reciveAllFiltered } from \"../../services/DatabaseService\";\nimport { FaPlusCircle, FaSearch } from \"react-icons/fa\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { getPathVariable } from \"../../services/LocationPathService\";\nimport { TopBar } from \"./details/EntityDetailWrapper\";\nimport EntitySearch from \"./EntitySearch\";\nimport Filter from \"../../data/Filter\";\nimport BreadCrumbIcon from \"../general/BreadCrumbIcon\";\nimport EntityTile from \"./EntityTile\";\nimport IEntity from \"../../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../database/SystemReducer\";\n\ninterface $OverviewProps {\n  entityName: string;\n}\n\nconst EntityOverview = ({ entityName }: $OverviewProps) => {\n  let history = useHistory();\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [allEntitysFromType, setAllEntitys] = useState<IEntity[]>([]);\n  const [entities, setEntities] = useState<IEntity[]>([]);\n  const [pageEntities, setPageEntities] = useState<IEntity[]>([]);\n  const [filters, setFilters] = useState<Filter[]>([]);\n\n  const [activePage, setActivePage] = useState<number>(1);\n  const [pageAmount, setPageAmount] = useState<number>(1);\n  const [step, setStep] = useState<number>(10);\n\n  const [showSearchBar, openSearchBar] = useState<boolean>(false);\n  const [loading, isLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (entityName !== \"\")\n      reciveAll(systemDbName, entityName, (results: any[]) => {\n        setAllEntitys(results);\n      });\n  }, [entityName]);\n\n  const loadPage = () => {\n    const { oldPage, oldStep, oldFilters } = load();\n    const newEntitiesShown = entities.slice(\n      (oldPage - 1) * oldStep,\n      oldPage * oldStep\n    );\n    setActivePage(oldPage);\n    setStep(oldStep);\n    setPageAmount(Math.ceil(entities.length / oldStep));\n    setPageEntities(newEntitiesShown);\n    setFilters(oldFilters);\n  };\n  const loadPageWithResults = (\n    newStep: number,\n    newPage: number,\n    newEntities: any[]\n  ) => {\n    const newEntitiesShown = newEntities.slice(\n      (newPage - 1) * newStep,\n      newPage * newStep\n    );\n    setActivePage(newPage);\n    setStep(newStep);\n    setPageAmount(Math.ceil(newEntities.length / newStep));\n    setPageEntities(newEntitiesShown);\n  };\n\n  const load = (): { oldStep: number; oldPage: number; oldFilters: any[] } => {\n    let oldStep: number = +getPathVariable(location, \"step\");\n    let oldPage: number = +getPathVariable(location, \"page\");\n    let oldFilters: string = getPathVariable(location, \"filter\");\n\n    if (oldPage < 1) oldPage = 1;\n    if (oldStep < 10) oldStep = 10;\n\n    if (oldFilters !== \"\") {\n      const newFilter: any[] = JSON.parse(oldFilters);\n      return { oldStep: oldStep, oldPage: oldPage, oldFilters: newFilter };\n    } else {\n      return { oldStep: oldStep, oldPage: oldPage, oldFilters: [] };\n    }\n  };\n\n  useEffect(() => {\n    loadPage();\n  }, [location]);\n\n  const search = (filters: Filter[]) => {\n    isLoading(true);\n    reciveAllFiltered(\n      systemDbName,\n      entityName,\n      filters,\n      (results: any[]) => {\n        if (results.length <= 0) {\n          openSearchBar(true);\n        }\n        setEntities(results);\n        setFilters(filters);\n        loadPageWithResults(10, 1, results);\n        isLoading(false);\n      }\n    );\n  };\n\n  const changePage = (page: number) => {\n    const newEntities = entities.slice((page - 1) * step, page * step);\n    setPageEntities(newEntities);\n    setActivePage(page);\n    if (location.search.includes(\"filter\")) {\n      let filters: string = \"\";\n      let locationParts: string[] = location.search.substring(1).split(\"&\");\n      locationParts.forEach((part: string) => {\n        if (part.includes(\"filter\")) filters = part;\n      });\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?${filters}&page=${page}&step=${step}`,\n      });\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?page=${page}&step=${step}`,\n      });\n    }\n  };\n\n  const changeStep = (step: number) => {\n    const newEntities = entities.slice((1 - 1) * step, 1 * step);\n    setPageEntities(newEntities);\n    setStep(step);\n    if (location.search.includes(\"filter\")) {\n      let filters: string = \"\";\n      let locationParts: string[] = location.search.substring(1).split(\"&\");\n      locationParts.forEach((part: string) => {\n        if (part.includes(\"filter\")) filters = part;\n      });\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?${filters}&page=1&step=${step}`,\n      });\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?page=1&step=${step}`,\n      });\n    }\n  };\n\n  const makeNew = () => {\n    history.push(`/${entityName}-builder`);\n  };\n\n  const makeFilterTag = (filter: Filter, index: number) => {\n    if (filter.value instanceof Array) {\n      let length = filter.value.length;\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}:{\" \"}\n          {filter.value.map((val: any, index: number) =>\n            index + 1 === length ? val : val + \" or \"\n          )}\n        </Tag>\n      );\n    } else if (typeof filter.value === \"boolean\") {\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}: {filter.value ? \"true\" : \"false\"}\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}: \"{filter.value}\"\n        </Tag>\n      );\n    }\n  };\n\n  return (\n    <>\n      <EntitySearch\n        entityName={entityName}\n        entities={allEntitysFromType}\n        filters={filters}\n        showSearchBar={showSearchBar}\n        openSearchBar={openSearchBar}\n        doSearch={search}\n      />\n\n      <EntityOptions>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => makeNew()} size=\"lg\">\n            <FaPlusCircle />\n          </Button>\n          <Button\n            onClick={() => openSearchBar((o) => !o)}\n            style={{ marginRight: \"5px\" }}\n            size=\"lg\"\n          >\n            <FaSearch />\n          </Button>\n        </ButtonGroup>\n        <InputNumber\n          size=\"lg\"\n          prefix=\"Step\"\n          value={step}\n          onChange={(value: any) => changeStep(value)}\n          step={10}\n          max={100}\n          min={10}\n          scrollable={true}\n          style={{ width: 130 }}\n        />\n        <TagGroup style={{ marginLeft: \"5px\", marginTop: \"-5px\" }}>\n          {filters.map((filter: Filter, index: number) =>\n            makeFilterTag(filter, index)\n          )}\n        </TagGroup>\n      </EntityOptions>\n\n      {loading && <Loader center content=\"Loading...\" />}\n      {!loading && entities.length > 0 && (\n        <>\n          <PaginationWrapper>\n            <Pagination\n              size=\"lg\"\n              prev={true}\n              next={true}\n              first={true}\n              last={true}\n              ellipsis={true}\n              boundaryLinks={true}\n              pages={pageAmount}\n              maxButtons={5}\n              activePage={activePage}\n              onSelect={changePage}\n              total={0}\n            />\n          </PaginationWrapper>\n\n          <EntityContainer>\n            {entityName !== \"\" &&\n              pageEntities.length > 0 &&\n              pageEntities!.map((entity: IEntity, index: number) => {\n                return (\n                  <EntityTile\n                    key={index}\n                    entity={entity}\n                    entityName={entityName}\n                  />\n                );\n              })}\n          </EntityContainer>\n\n          <PaginationWrapper>\n            <Pagination\n              size=\"lg\"\n              prev={true}\n              next={true}\n              first={true}\n              last={true}\n              ellipsis={true}\n              boundaryLinks={true}\n              pages={pageAmount}\n              maxButtons={5}\n              activePage={activePage}\n              onSelect={changePage}\n              total={0}\n            />\n          </PaginationWrapper>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EntityOverview;\n\nconst EntityContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n\nconst PaginationWrapper = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  justify-content: center;\n  padding: 5px;\n`;\n\nconst EntityOptions = styled(TopBar)`\n  display: flex;\n  flex-wrap: wrap;\n`;\n"],"sourceRoot":""}