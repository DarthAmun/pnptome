{"version":3,"file":"static/js/430.7555d319.chunk.js","mappings":"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","sources":["components/generic/details/detailFields/CompletableStringDetailField.tsx","components/generic/details/detailFields/CreatableSetNumberDetailField.tsx","components/generic/details/detailFields/CreatableSetStringDetailField.tsx","components/generic/details/detailFields/subDetailFields/StringSubDetailField.tsx","components/general/FormattedText.tsx","components/general/QuillEditor.tsx","components/generic/details/detailFields/subDetailFields/TextSubDetailField.tsx","components/generic/details/detailFields/subDetailFields/NumberSubDetailField.tsx","components/generic/details/detailFields/EditableSubEntitiesDetailField.tsx","components/generic/details/detailFields/ImageNameDetailField.tsx","components/generic/details/detailFields/SearchableStringDetailField.tsx","components/generic/details/detailFields/SearchableTextDetailField.tsx","components/generic/details/detailFields/SetAttributesDetailField.tsx","components/generic/details/detailFields/SetEntitiesDetailField.tsx","components/generic/details/detailFields/SetEntityDetailField.tsx","components/generic/details/detailFields/SubEntityConnectorDetailField.tsx","components/generic/details/detailFields/SwitchBooleanDetailField.tsx","components/generic/details/detailFields/ViewEntityDetailField.tsx","components/generic/details/EntityDetails.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $EditCompletableStringFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CompletableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $EditCompletableStringFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default CompletableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, InputNumber } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $CreatableSetNumberDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetNumberDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity\n}: $CreatableSetNumberDetailFieldProps) => {\n  const [setNumberEdit, editSetNumber] = useState<boolean>(isNew);\n\n  return (\n    <SetNumber isEditing={setNumberEdit} onClick={() => editSetNumber(true)}>\n      {setNumberEdit && (\n        <InputGroup>\n          <InputNumber\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            min={1}\n            step={1}\n            style={{ width: \"60px\" }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetNumber(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setNumberEdit && <b>{field}</b>}\n    </SetNumber>\n  );\n};\n\nexport default CreatableSetNumberDetailField;\n\nconst SetNumber = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  min-width: 40px;\n  width: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  height: ${(props) => (props.isEditing ? \"fit-content\" : \"40px\")};\n  line-height: 20px;\n  float: left;\n  text-align: center;\n  border-radius: ${(props) => (props.isEditing ? \"5px\" : \"30px\")};\n  margin: 0px 0px 5px 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { InputGroup, InputPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { RootState } from \"../../../../database/Store\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { stringToColour } from \"../../../../services/ColorService\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $CreatableSetStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst CreatableSetStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $CreatableSetStringDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [setStringEdit, editSetString] = useState<boolean>(isNew);\n  const [setStringList, setSetStringList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        setSetStringList(\n          entities.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity, tableName, keyName]);\n\n  return (\n    <SetString\n      colorValue={field}\n      isEditing={setStringEdit}\n      onClick={() => editSetString(true)}\n    >\n      {setStringEdit && (\n        <InputGroup>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <InputPicker\n            creatable\n            value={field}\n            data={setStringList}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              editSetString(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!setStringEdit && (\n        <>\n          {findIcon(icon)}\n          {field}\n        </>\n      )}\n    </SetString>\n  );\n};\n\nexport default CreatableSetStringDetailField;\n\nconst SetString = styled.div<{\n  colorValue?: string;\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${(props) => {\n    return stringToColour(props.colorValue);\n  }};\n  cursor: pointer;\n\n  svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $StringSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst StringSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $StringSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop key={index} isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default StringSubDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { ReactNodeArray } from \"hoist-non-react-statics/node_modules/@types/react\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { formating } from \"../../services/TextService\";\n\ninterface $Props {\n  text: string;\n}\n\nconst FormattedText = ({ text }: $Props) => {\n  const [formatted, setText] = useState<JSX.Element[]>([]);\n\n  useEffect(() => {\n    setText(formating(text));\n  }, [text]);\n\n  return <FormatedTextContainer>{formatted}</FormatedTextContainer>;\n};\n\nexport default FormattedText;\n\nconst FormatedTextContainer = styled.div`\n  line-height: 20px;\n  white-space: pre-line;\n`;\n","import ReactQuill from \"react-quill\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  value: string;\n  placeholder: string;\n  onChange: (val: any) => void;\n}\n\nconst QuillEditor = ({ value, placeholder, onChange }: $Props) => {\n  return (\n    <EditorWrapper>\n      <ReactQuill\n        theme=\"snow\"\n        placeholder={placeholder}\n        modules={{\n          toolbar: [\n            //[{ font: [] }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n            [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], // toggled buttons\n            [{ list: \"ordered\" }, { list: \"bullet\" }],\n            [{ indent: \"-1\" }, { indent: \"+1\" }, { align: [] }], // outdent/indent\n            [{ direction: \"rtl\" }], // text direction\n\n            [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n\n            [\"clean\"], // remove formatting button\n          ],\n        }}\n        value={value}\n        onChange={onChange}\n      />\n    </EditorWrapper>\n  );\n};\n\nexport default QuillEditor;\n\nconst EditorWrapper = styled.div`\n  & .quill .ql-toolbar {\n    border: none;\n    .ql-picker {\n      color: ${({ theme }) => theme.highlight};\n    }\n    .ql-stroke {\n      stroke: ${({ theme }) => theme.highlight};\n    }\n    .ql-picker-options {\n      background-color: ${({ theme }) => theme.secondColor};\n      border-radius: 5px;\n      border: none;\n      color: ${({ theme }) => theme.textColor};\n    }\n    .ql-picker-label {\n      border: none;\n      color: ${({ theme }) => theme.highlight};\n    }\n  }\n  & .quill .ql-container {\n    border: none;\n    background-color: ${({ theme }) => theme.mainColor};\n    border-radius: 5px;\n  }\n  & .ql-blank:before {\n    color: rgba(255, 255, 255, 0.6);\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport { Button } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport FormattedText from \"../../../../general/FormattedText\";\nimport QuillEditor from \"../../../../general/QuillEditor\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $TextSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst TextSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $TextSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  useEffect(() => {\n    if (!field.includes(\"<p>\")) {\n      changeEntity({ ...entity, [keyName]: \"<p>\" + field + \"</p>\" });\n    }\n  }, [entity, keyName, field, changeEntity]);\n\n  return (\n    <Text key={index} isEditing={isEdit}>\n      {isEdit && (\n        <>\n          <QuillEditor\n            value={field}\n            placeholder={keyName}\n            onChange={(val: any) => {\n              changeEntity({ ...entity, [keyName]: val });\n            }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          <PropTitle>{findIcon(icon)}</PropTitle>\n          <Button onClick={() => changeEdit(true)} style={{ float: \"right\" }}>\n            <FaEdit />\n          </Button>\n          <FormattedText text={field} />\n        </>\n      )}\n    </Text>\n  );\n};\n\nexport default TextSubDetailField;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.highlight};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  width: calc(100% - 15px);\n  margin: 10px 0px 5px 0px;\n  padding: 10px;\n  float: left;\n  line-height: 18px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input, InputNumber } from \"rsuite\";\nimport IEntity from \"../../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../../services/IconService\";\n\ninterface $NumberSubDetailFieldProps {\n  index: any;\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst NumberSubDetailField = ({\n  index,\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $NumberSubDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop key={index} isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <InputNumber\n            value={field}\n            min={1}\n            step={1}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default NumberSubDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport StringSubDetailField from \"./subDetailFields/StringSubDetailField\";\nimport TextSubDetailField from \"./subDetailFields/TextSubDetailField\";\nimport NumberSubDetailField from \"./subDetailFields/NumberSubDetailField\";\nimport { Button, IconButton } from \"rsuite\";\nimport { FaPlusCircle, FaTrash } from \"react-icons/fa\";\n\ninterface $EditableSubEntitiesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  config: ConfigPart;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst EditableSubEntitiesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  config,\n  icon,\n  onEdit,\n  changeEntity,\n}: $EditableSubEntitiesDetailFieldProps) => {\n  const changeSubEntity = (newPart: any, partIndex: number) => {\n    console.log(newPart);\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits[partIndex] = newPart;\n    changeEntity({ ...entity, [keyName]: newTraits });\n  };\n  const onSubEdit = (value: any, partIndex: number) => {\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits[partIndex] = value;\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  const deleteSubEntity = (partIndex: number) => {\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    delete newTraits[partIndex];\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  const createSubEntity = () => {\n    let newObjString: string = \"{\";\n    Object.getOwnPropertyNames(config.config).forEach((attr: string) => {\n      const fieldEntry = Object(config.config)[attr];\n      switch (true) {\n        case fieldEntry.type === \"number\":\n          newObjString += `\"${attr}\": 0,`;\n          break;\n        case fieldEntry.type === \"string\":\n        case fieldEntry.type === \"text\":\n          newObjString += `\"${attr}\": \"\",`;\n          break;\n        default:\n          newObjString += `\"${attr}\": \"\",`;\n          break;\n      }\n    });\n    newObjString = newObjString.slice(0, -1) + \"}\";\n    const newObj = JSON.parse(newObjString);\n    const newTraits: any = entity[keyName as keyof typeof entity];\n    newTraits.push(newObj);\n    onEdit({ ...entity, [keyName]: newTraits });\n  };\n\n  return (\n    <SubProps>\n      {field.map((part: any, partindex: number) => {\n        return (\n          <Sub key={partindex}>\n            {icon && <Flag>{findIcon(icon)}</Flag>}\n            <Button\n              onClick={() => deleteSubEntity(partindex)}\n              style={{ float: \"right\" }}\n            >\n              <FaTrash />\n            </Button>\n            {Object.getOwnPropertyNames(config.config).map(\n              (subKeyName: any, i: number) => {\n                const index = i + \"\" + partindex;\n                const subfield = part[subKeyName as keyof typeof entity];\n                const fieldEntry = Object(config.config)[subKeyName];\n                if (field !== undefined) {\n                  switch (true) {\n                    case fieldEntry.type === \"number\":\n                      return (\n                        <NumberSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    case fieldEntry.type === \"string\":\n                      return (\n                        <StringSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    case fieldEntry.type === \"text\":\n                      return (\n                        <TextSubDetailField\n                          index={index}\n                          entity={part}\n                          isNew={isNew}\n                          field={subfield}\n                          keyName={subKeyName}\n                          icon={fieldEntry.icon || \"\"}\n                          onEdit={(value: any) => onSubEdit(value, partindex)}\n                          changeEntity={(part: any) =>\n                            changeSubEntity(part, partindex)\n                          }\n                        />\n                      );\n                    default:\n                      return <></>;\n                  }\n                }\n                return <></>;\n              }\n            )}\n          </Sub>\n        );\n      })}\n      <Button onClick={() => createSubEntity()}>\n        <FaPlusCircle />\n      </Button>\n    </SubProps>\n  );\n};\n\nexport default EditableSubEntitiesDetailField;\n\nconst SubProps = styled.div`\n  max-width: calc(100% - 15px);\n  margin: 2px 5px 2px 0px;\n  float: left;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nconst Sub = styled.div`\n  flex: 1 1;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst Flag = styled.div`\n  float: left;\n  padding: 10px;\n  margin: 5px;\n  width: 40px;\n  height: 40px;\n\n  line-height: 20px;\n  text-align: center;\n\n  border-radius: 30px;\n  border-bottom: solid 1px ${({ theme }) => theme.highlight};\n  color: ${({ theme }) => theme.highlight};\n`;\n","import { useCallback, useState } from \"react\";\nimport { FaCheck, FaImage } from \"react-icons/fa\";\nimport { Input, InputGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\n\ninterface $ImageNameDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst ImageNameDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $ImageNameDetailFieldProps) => {\n  const [imageNameEdit, editImageName] = useState<boolean>(isNew);\n\n  const getPicture = useCallback(() => {\n    const pic = entity[\"pic\" as keyof typeof entity];\n    if (pic !== \"\" && pic !== null && pic !== undefined) {\n      return pic + \"\";\n    }\n    return \"\";\n  }, [entity]);\n\n  return getPicture() !== \"\" ? (\n    <ImageName isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && (\n        <>\n          <Image pic={getPicture()}></Image>\n          <b>{entity.name}</b>\n        </>\n      )}\n    </ImageName>\n  ) : (\n    <Name isEditing={imageNameEdit} onClick={() => editImageName(true)}>\n      {imageNameEdit && (\n        <>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <InputGroup.Addon>\n              <FaImage />\n            </InputGroup.Addon>\n            <Input\n              placeholder={\"Link to image\"}\n              value={entity[\"pic\" as keyof typeof entity]}\n              onChange={(val: any) =>\n                changeEntity({ ...entity, [\"pic\" as keyof typeof entity]: val })\n              }\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n          <InputGroup style={{ width: \"max-content\" }}>\n            <Input\n              placeholder={\"Entity name\"}\n              value={entity.name}\n              onChange={(val: any) => changeEntity({ ...entity, name: val })}\n              onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") {\n                  editImageName(false);\n                  onEdit(entity);\n                }\n              }}\n              style={{ width: \"max-content\", minWidth: \"200px\" }}\n            />\n            <InputGroup.Button\n              onClick={(e) => {\n                e.stopPropagation();\n                editImageName(false);\n                onEdit(entity);\n              }}\n            >\n              <FaCheck />\n            </InputGroup.Button>\n          </InputGroup>\n        </>\n      )}\n      {!imageNameEdit && <b>{entity.name}</b>}\n    </Name>\n  );\n};\n\nexport default ImageNameDetailField;\n\nconst Name = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 10px;\n  margin: 5px 0px 10px 0px;\n  width: calc(100% - 15px);\n  color: ${({ theme }) => theme.textColor};\n  text-align: center;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: ${(props) => (props.isEditing ? \"flex\" : \"block\")};\n  flex-wrap: wrap;\n  gap: 5px;\n  cursor: pointer;\n`;\n\nconst ImageName = styled(Name)`\n  height: auto;\n  border-radius: 50px 5px 5px 50px;\n  cursor: pointer;\n`;\n\ninterface $ImageProps {\n  pic: string;\n}\n\nconst Image = ({ pic }: $ImageProps) => {\n  const style = {\n    backgroundImage: `url('${pic}')`,\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n  };\n\n  if (pic !== \"\") {\n    return <ImageElm style={style}></ImageElm>;\n  } else {\n    return <Empty />;\n  }\n};\n\nconst ImageElm = styled.div`\n  margin: -10px 5px -10px -10px;\n  height: 47px;\n  width: 47px;\n  float: left;\n  border-radius: 100px;\n  border: 3px solid ${({ theme }) => theme.highlight};\n  background-color: white;\n  overflow: hidden;\n`;\nconst Empty = styled.div``;\n","import { useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableStringDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableStringDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableStringDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <InputGroup style={{ width: \"max-content\" }}>\n          <InputGroup.Addon>{findIcon(icon)}</InputGroup.Addon>\n          <Input\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n          />\n          <InputGroup.Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </InputGroup.Button>\n        </InputGroup>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)} {field}\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SearchableStringDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaCheck, FaEdit } from \"react-icons/fa\";\nimport { Button } from \"rsuite\";\nimport IEntity from \"../../../../data/IEntity\";\nimport styled from \"styled-components\";\nimport FormattedText from \"../../../general/FormattedText\";\nimport QuillEditor from \"../../../general/QuillEditor\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SearchableTextDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SearchableTextDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SearchableTextDetailFieldProps) => {\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n\n  useEffect(() => {\n    if(!field.includes(\"<p>\")){\n      changeEntity({ ...entity, [keyName]: \"<p>\"+field+\"</p>\" });\n    }\n  },[entity, keyName, field, changeEntity])\n\n  return (\n    <Text isEditing={isEdit}>\n      {isEdit && (\n        <>\n          <QuillEditor\n            value={field}\n            placeholder={keyName}\n            onChange={(val: any) => {\n              changeEntity({ ...entity, [keyName]: val });\n            }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          <PropTitle>{findIcon(icon)}</PropTitle>\n          <Button onClick={() => changeEdit(true)} style={{ float: \"right\" }}>\n            <FaEdit />\n          </Button>\n          <FormattedText text={field} />\n        </>\n      )}\n    </Text>\n  );\n};\n\nexport default SearchableTextDetailField;\n\nconst PropTitle = styled.span`\n  display: inline-block;\n  color: ${({ theme }) => theme.highlight};\n  text-decoration: none;\n  margin: 0px 5px 0px 5px;\n`;\n\nconst Text = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  width: calc(100% - 15px);\n  margin: 10px 0px 5px 0px;\n  padding: 10px;\n  float: left;\n  line-height: 18px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetAttributesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  tableName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetAttributesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  tableName,\n  onEdit,\n  changeEntity,\n}: $SetAttributesDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [entityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      tableName,\n      keyName,\n      (entities: IndexableType[]) => {\n        const newEntities: { value: string; label: string }[] = [];\n        entities.forEach((array: any) => {\n          array.forEach((attr: string) => {\n            const at = attr.trim();\n            newEntities.push({ value: at, label: at });\n          });\n        });\n        const uniqueTags: { value: string; label: string }[] = [];\n        newEntities.forEach((ent: { value: string; label: string }) => {\n          let douplicate: boolean = false;\n          uniqueTags.forEach((uni: { value: string; label: string }) => {\n            if (ent.label === uni.label) {\n              douplicate = true;\n            }\n          });\n          if (!douplicate) uniqueTags.push(ent);\n        });\n        uniqueTags.sort((a, b) => a.label.localeCompare(b.label));\n        setSetEntityList(uniqueTags);\n      }\n    );\n  }, [tableName, keyName, field, entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={entityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            creatable\n            onCreate={(val: any[], item: any) => {\n              setSetEntityList((e) => [...e, item]);\n              changeEntity({ ...entity, [keyName]: [...val, item.value] });\n            }}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetAttributesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Tag, TagGroup, TagPicker } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntitiesDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntitiesDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntitiesDetailFieldProps) => {\n\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    reciveAttributeSelection(systemDbName, keyName, \"name\", (entities: IndexableType[]) => {\n      setSetEntityList(\n        entities.map((text: IndexableType) => {\n          const newText: string = text as string;\n          return { value: newText, label: newText };\n        })\n      );\n    });\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <TagPicker\n            data={setEntityList}\n            trigger={\"Enter\"}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any[]) =>\n              changeEntity({ ...entity, [keyName]: val })\n            }\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            {field?.map((classe: string, index: number) => (\n              <Tag key={index}>{classe}</Tag>\n            ))}\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntitiesDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { FaCheck } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { Button, InputPicker, Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SetEntityDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  matchedEntityName: string;\n  icon: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SetEntityDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  matchedEntityName,\n  icon,\n  onEdit,\n  changeEntity,\n}: $SetEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [isEdit, changeEdit] = useState<boolean>(isNew);\n  const [setEntityList, setSetEntityList] = useState<\n    { value: string; label: string }[]\n  >([]);\n\n  useEffect(() => {\n    console.log(matchedEntityName);\n    reciveAttributeSelection(\n      systemDbName,\n      matchedEntityName,\n      \"name\",\n      (entities: IndexableType[]) => {\n        setSetEntityList(\n          entities.map((text: IndexableType) => {\n            const newText: string = (text as string).toLowerCase();\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [entity]);\n\n  return (\n    <Prop isEditing={isEdit} onClick={() => changeEdit(true)}>\n      {isEdit && (\n        <>\n          <InputPicker\n            data={setEntityList}\n            placeholder={keyName}\n            value={field}\n            onChange={(val: any) => changeEntity({ ...entity, [keyName]: val })}\n            onKeyPress={(e: any) => {\n              if (e.key === \"Enter\") {\n                changeEdit(false);\n                onEdit(entity);\n              }\n            }}\n            style={{ minWidth: \"300px\" }}\n          />\n          <Button\n            onClick={(e) => {\n              e.stopPropagation();\n              changeEdit(false);\n              onEdit(entity);\n            }}\n          >\n            <FaCheck />\n          </Button>\n        </>\n      )}\n      {!isEdit && (\n        <>\n          {findIcon(icon)}\n          <TagGroup>\n            <Tag>{field}</Tag>\n          </TagGroup>\n        </>\n      )}\n    </Prop>\n  );\n};\n\nexport default SetEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n  cursor: pointer;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { IconButton, Tag, TagGroup, Toggle } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport {\n  reciveAllByAttribute,\n  reciveAllByAttributes,\n} from \"../../../../services/DatabaseService\";\nimport { findIcon } from \"../../../../services/IconService\";\n\ninterface $SubEntityConnectorDetailFieldProps {\n  entity: IEntity;\n  config: ConfigPart;\n  keyName: string;\n  icon: string;\n}\n\nconst SubEntityConnectorDetailField = ({\n  entity,\n  config,\n  keyName,\n  icon,\n}: $SubEntityConnectorDetailFieldProps) => {\n  let history = useNavigate();\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntities, setFoundEntities] = useState<IEntity[]>();\n  const [strictMode, setStrictMode] = useState<boolean>(false);\n  const [sourceMode, setSourceMode] = useState<boolean>(false);\n\n  useEffect(() => {\n    console.log(foundEntities);\n  }, [foundEntities]);\n\n  useEffect(() => {\n    console.log(\n      systemDbName,\n      config.connector?.subEntityName,\n      config.connector?.subEntityField,\n      `${entity.name}|${entity.sources}`\n    );\n    if (config.connector)\n      reciveAllByAttributes(\n        systemDbName,\n        config.connector?.subEntityName,\n        { one: config.connector?.subEntityField, two: \"sources\" },\n        {\n          one: strictMode ? `${entity.name}|${entity.sources}` : entity.name,\n          two: sourceMode ? entity.sources : \"\",\n        },\n        (foundEntities: IEntity[]) => {\n          setFoundEntities(foundEntities);\n        }\n      );\n  }, [systemDbName, entity, strictMode, sourceMode]);\n\n  const newSubEntity = () => {\n    history(`/${keyName}-builder`);\n  };\n  const viewSubEntity = (id: number | undefined) => {\n    history(`/${keyName}-detail/${id}`);\n  };\n\n  return (\n    <>\n      {foundEntities && (\n        <Prop>\n          {findIcon(icon)}\n          <Toggle\n            checked={strictMode}\n            checkedChildren=\"Strict Nameing\"\n            unCheckedChildren=\"Loose Nameing\"\n            onChange={(checked: boolean) => setStrictMode(checked)}\n          />\n          <Toggle\n            checked={sourceMode}\n            checkedChildren=\"Same Source\"\n            unCheckedChildren=\"All Sources\"\n            onChange={(checked: boolean) => setSourceMode(checked)}\n          />\n          <TagGroup>\n            {foundEntities?.map((subentity: IEntity) => {\n              return (\n                <ViewTag onClick={() => viewSubEntity(subentity.id)}>\n                  {subentity.name}\n                </ViewTag>\n              );\n            })}\n            <AddIconButton\n              onClick={() => newSubEntity()}\n              icon={<FaPlus />}\n              appearance=\"ghost\"\n              size=\"xs\"\n            />\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default SubEntityConnectorDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst AddIconButton = styled(IconButton)`\n  margin-left: 10px;\n`;\n\nconst ViewTag = styled(Tag)`\n  cursor: pointer;\n`;\n","import { useState } from \"react\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { spliceFirstToUpper } from \"../../../../services/TextService\";\n\ninterface $SwitchBooleanDetailFieldProps {\n  entity: IEntity;\n  isNew: boolean;\n  field: any;\n  keyName: string;\n  onEdit: (value: any) => void;\n  changeEntity: (entity: IEntity) => void;\n}\n\nconst SwitchBooleanDetailField = ({\n  entity,\n  isNew,\n  field,\n  keyName,\n  onEdit,\n  changeEntity,\n}: $SwitchBooleanDetailFieldProps) => {\n  const [switchBooleanEdit, editSwitchBoolean] = useState<boolean>(isNew);\n\n  return (\n    <SwitchBoolean\n      isEditing={switchBooleanEdit}\n      onClick={() => editSwitchBoolean(true)}\n    >\n      {switchBooleanEdit && (\n        <Checkbox\n          checked={field}\n          onCheckboxClick={(e) => {\n            e.stopPropagation();\n            editSwitchBoolean(false);\n            changeEntity({ ...entity, [keyName]: !field });\n            onEdit({ ...entity, [keyName]: !field });\n          }}\n        >\n          Ritual\n        </Checkbox>\n      )}\n      {!switchBooleanEdit && (\n        <>\n          {!!field ? (\n            spliceFirstToUpper(keyName)\n          ) : (\n            <s>{spliceFirstToUpper(keyName)}</s>\n          )}\n        </>\n      )}\n    </SwitchBoolean>\n  );\n};\n\nexport default SwitchBooleanDetailField;\n\nconst SwitchBoolean = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  cursor: pointer;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Tag, TagGroup } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../../data/ConfigPart\";\nimport IEntity from \"../../../../data/IEntity\";\nimport { selectDBName } from \"../../../../database/SystemReducer\";\nimport { reciveByAttribute } from \"../../../../services/DatabaseService\";\n\ninterface $ViewEntityDetailFieldProps {\n  entity: IEntity;\n  keyName: string;\n  config: ConfigPart;\n}\n\nconst ViewEntityDetailField = ({\n  entity,\n  keyName,\n  config,\n}: $ViewEntityDetailFieldProps) => {\n  const systemDbName = useSelector(selectDBName);\n  const [foundEntity, setFoundEntity] = useState<IEntity>();\n  const [fields, setFields] = useState<string[]>([]);\n\n  useEffect(() => {\n    const field: string = entity[config.viewEntity?.linkedBy as keyof typeof entity] as string;\n    reciveByAttribute(systemDbName, keyName, \"name\", field, (foundEntity: IEntity) => {\n      setFoundEntity(foundEntity);\n      setFields(config.viewEntity?.fieldsDisplayed || []);\n    });\n  }, [entity]);\n\n  return (\n    <>\n      {foundEntity && (\n        <Prop>\n          <TagGroup>\n            {fields?.map((field: string) => {\n              return (\n                <Tag>\n                  <TagTitle>{field}:</TagTitle>{\" \"}\n                  {foundEntity[field as keyof typeof entity]}\n                </Tag>\n              );\n            })}\n          </TagGroup>\n        </Prop>\n      )}\n    </>\n  );\n};\n\nexport default ViewEntityDetailField;\n\nconst Prop = styled.div<{\n  isEditing?: boolean;\n}>`\n  flex: 1 1 auto;\n  max-width: 100%;\n  height: auto;\n  margin: 2px 5px 2px 0px;\n  float: left;\n  padding: ${(props) => (props.isEditing ? \"3px\" : \"10px\")};\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  display: flex;\n  gap: 5px;\n\n  & > svg {\n    margin-right: 5px;\n    width: 15px;\n    height: auto;\n    border-radius: 150px;\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nconst TagTitle = styled.span`\n  color: ${({ theme }) => theme.highlight};\n`;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../data/ConfigPart\";\nimport IEntity from \"../../../data/IEntity\";\nimport { RootState } from \"../../../database/Store\";\nimport { findEntityDetailField } from \"../../../services/SystemService\";\nimport { spliceFirstToUpper } from \"../../../services/TextService\";\n\nimport CompletableStringDetailField from \"./detailFields/CompletableStringDetailField\";\nimport CreatableSetNumberDetailField from \"./detailFields/CreatableSetNumberDetailField\";\nimport CreatableSetStringDetailField from \"./detailFields/CreatableSetStringDetailField\";\nimport EditableSubEntitiesDetailField from \"./detailFields/EditableSubEntitiesDetailField\";\nimport ImageNameDetailField from \"./detailFields/ImageNameDetailField\";\nimport SearchableStringDetailField from \"./detailFields/SearchableStringDetailField\";\nimport SearchableTextDetailField from \"./detailFields/SearchableTextDetailField\";\nimport SetAttributesDetailField from \"./detailFields/SetAttributesDetailField\";\nimport SetEntitiesDetailField from \"./detailFields/SetEntitiesDetailField\";\nimport SetEntityDetailField from \"./detailFields/SetEntityDetailField\";\nimport SubEntityConnectorDetailField from \"./detailFields/SubEntityConnectorDetailField\";\nimport SwitchBooleanDetailField from \"./detailFields/SwitchBooleanDetailField\";\nimport ViewEntityDetailField from \"./detailFields/ViewEntityDetailField\";\n\ninterface $Props {\n  configs: string[];\n  entity: IEntity;\n  entityName: string;\n  isNew: boolean;\n  onEdit: (value: any) => void;\n  dummyFieldEntry?: ConfigPart;\n}\n\nconst EntityDetails = ({\n  configs,\n  entity,\n  entityName,\n  isNew,\n  onEdit,\n  dummyFieldEntry,\n}: $Props) => {\n  const [currentEntity, changeEntity] = useState<IEntity>({ ...entity });\n  const system = useSelector((state: RootState) => state.system);\n\n  const makeFoundFlag = useCallback(\n    (config: ConfigPart) => {\n      if (config.found) {\n        const field = entity[config.found?.field as keyof typeof entity];\n        const showFlag = (field + \"\")\n          .toLowerCase()\n          .includes(config.found?.searchTerm);\n        return showFlag ? (\n          spliceFirstToUpper(config.found?.searchTerm)\n        ) : (\n          <s>{spliceFirstToUpper(config.found?.searchTerm)}</s>\n        );\n      }\n      return <></>;\n    },\n    [entity]\n  );\n\n  return (\n    <CenterWrapper>\n      <View>\n        {configs.map((keyName: any, index: number) => {\n          const field = currentEntity[keyName as keyof typeof entity];\n          const fieldEntry: ConfigPart = dummyFieldEntry\n            ? dummyFieldEntry\n            : findEntityDetailField(system, entityName, keyName);\n          if (field !== undefined) {\n            switch (true) {\n              case fieldEntry.type === \"CreatableSetNumber\":\n                return (\n                  <CreatableSetNumberDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetString\":\n                return (\n                  <CreatableSetStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    tableName={entityName}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SwitchBoolean\":\n                return (\n                  <SwitchBooleanDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"ImageName\":\n                return (\n                  <ImageNameDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"CompletableString\":\n                return (\n                  <CompletableStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SearchableString\":\n                return (\n                  <SearchableStringDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetAttributes\":\n                return (\n                  <SetAttributesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    tableName={entityName}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetEntities\":\n                return (\n                  <SetEntitiesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SetEntity\":\n                return (\n                  <SetEntityDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    matchedEntityName={fieldEntry.linkToAttribute || \"\"}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"SearchableText\":\n                return (\n                  <SearchableTextDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              case fieldEntry.type === \"EditableSubEntities\":\n                return (\n                  <EditableSubEntitiesDetailField\n                    key={index}\n                    field={field}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                    isNew={isNew}\n                    icon={fieldEntry.icon || \"\"}\n                    onEdit={onEdit}\n                    changeEntity={changeEntity}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          } else {\n            switch (true) {\n              case fieldEntry.type === \"FoundFlag\":\n                return <Flag key={index}>{makeFoundFlag(fieldEntry)}</Flag>;\n              case fieldEntry.type === \"ViewEntity\":\n                return (\n                  <ViewEntityDetailField\n                    key={index}\n                    keyName={keyName}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                  />\n                );\n              case fieldEntry.type === \"SubEntityConnector\":\n                return (\n                  <SubEntityConnectorDetailField\n                    key={index}\n                    keyName={keyName}\n                    icon={fieldEntry.icon || \"\"}\n                    entity={currentEntity}\n                    config={fieldEntry}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          }\n        })}\n      </View>\n    </CenterWrapper>\n  );\n};\n\nexport default EntityDetails;\n\nconst CenterWrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst View = styled.div`\n  color: ${({ theme }) => theme.textColor};\n  font-size: 16px;\n  max-width: 800px;\n  padding: 5px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Flag = styled.div<{\n  isEditing?: boolean;\n}>`\n  height: auto;\n  float: left;\n  padding: 5px 10px 7px 10px;\n  margin-left: 5px;\n  font-size: 12px;\n  line-height: 30px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n`;\n"],"names":["entity","isNew","field","keyName","icon","onEdit","changeEntity","useState","isEdit","changeEdit","Prop","isEditing","onClick","InputGroup","style","width","findIcon","Input","placeholder","value","onChange","val","onKeyPress","e","key","stopPropagation","styled","props","theme","secondColor","highlight","setNumberEdit","editSetNumber","SetNumber","InputNumber","min","step","tableName","systemDbName","useSelector","selectDBName","setStringEdit","editSetString","setStringList","setSetStringList","useEffect","reciveAttributeSelection","entities","map","text","label","SetString","colorValue","InputPicker","creatable","data","stringToColour","index","formatted","setText","formating","FormatedTextContainer","EditorWrapper","modules","toolbar","header","list","indent","align","direction","color","background","textColor","mainColor","includes","Text","Button","PropTitle","float","config","changeSubEntity","newPart","partIndex","console","log","newTraits","onSubEdit","SubProps","part","partindex","Sub","Flag","deleteSubEntity","Object","getOwnPropertyNames","subKeyName","i","subfield","fieldEntry","undefined","type","newObjString","forEach","attr","slice","newObj","JSON","parse","push","createSubEntity","imageNameEdit","editImageName","getPicture","useCallback","pic","ImageName","name","minWidth","Image","Name","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","ImageElm","Empty","entityList","setSetEntityList","newEntities","array","at","trim","uniqueTags","ent","douplicate","uni","sort","a","b","localeCompare","TagPicker","trigger","onCreate","item","TagGroup","classe","Tag","setEntityList","matchedEntityName","newText","toLowerCase","history","useNavigate","foundEntities","setFoundEntities","strictMode","setStrictMode","sourceMode","setSourceMode","connector","subEntityName","subEntityField","sources","reciveAllByAttributes","one","two","Toggle","checked","checkedChildren","unCheckedChildren","subentity","ViewTag","id","AddIconButton","appearance","size","IconButton","switchBooleanEdit","editSwitchBoolean","SwitchBoolean","Checkbox","onCheckboxClick","spliceFirstToUpper","foundEntity","setFoundEntity","fields","setFields","viewEntity","linkedBy","reciveByAttribute","fieldsDisplayed","TagTitle","configs","entityName","dummyFieldEntry","currentEntity","system","state","makeFoundFlag","found","searchTerm","CenterWrapper","View","findEntityDetailField","linkToAttribute"],"sourceRoot":""}