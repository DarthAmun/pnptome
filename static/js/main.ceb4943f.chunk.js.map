{"version":3,"sources":["services/IconService.tsx","services/DiceService.tsx","components/general/DiceRoller.tsx","components/general/LinkCheck.tsx","components/generic/TextEntityTile.tsx","services/TextService.tsx","components/theme/Theme.tsx","components/theme/MyThemeProvider.tsx","logo192.png","components/general/Card.tsx","components/pages/Menu.tsx","components/general/Header.tsx","components/general/AppWrapper.tsx","components/generic/EntityRoutes.tsx","database/Store.tsx","App.tsx","serviceWorker.js","index.js","database/SystemReducer.tsx","database/PnPTomeDB.tsx","services/DatabaseService.tsx"],"names":["findIcon","name","size","Icon","IconSet","get","cloneElement","Map","rollDie","max","Math","round","random","DiceRoller","dice","useState","field","setField","results","setResults","roll","commands","krit","result","text","newCommands","split","forEach","command","test","trim","rolls","fullCommand","commandSplits","map","part","i","concat","multiplier","includes","startsWith","parseInt","replaceAll","com","newRoll","slice","endsWith","rollCommand","resultText","r","DiceRollerConatiner","onClick","e","stopPropagation","InputGroup","style","width","Input","placeholder","value","onChange","val","Button","ResultContainer","length","index","RollResult","styled","div","theme","secondTextColor","mainColor","secondColor","LinkCheck","type","formatIcon","EntityTile","entityName","sources","setEntity","systemDbName","useSelector","selectDBName","findEntity","a","newEntity","undefined","recivePromiseByMultiAttribute","recivePromiseByAttribute","useEffect","firstToUpper","str","charAt","toUpperCase","spliceFirstToUpper","formating","console","time","checkedText","format","timeEnd","newNodeArray","matchedCoordinates","found","match","replaceNode","sort","b","start","log","makeRactNodes","tags","filter","coord","removeProcessedTags","coo","shift","stop","tag","endtag","Elm","textPart","substring","nodeParts","classes","replace","subMatchedCoordinates","stopIndex","subs","subClone","subCoo","preText","formatTable","formatLink","postText","className","replaceFound","firstNode","push","indexOf","splice","closeFirstNode","closeTag","node","reactStringReplace","linkParts","nameSource","Whisper","preventOverflow","trigger","speaker","Popover","full","placement","enterable","Tag","color","maxWidth","TextEntityTile","tableRows","isHead","row","cells","cell","TableHeadProp","TableProp","th","textColor","td","darkTheme","highlight","lightTheme","ctx","createContext","c","useContext","Error","Provider","createCtx","CtxProvider","MyThemeProvider","children","setTheme","localTheme","localStorage","getItem","setItem","Card","CardWrapper","Panel","shaded","Cards","CardDivier","Menu","show","history","useHistory","system","state","move","destination","entities","entity","isMainEntity","icon","Header","location","useLocation","showMenu","openMenu","HeaderBar","Drawer","open","onClose","Title","Version","packageJson","version","Body","HeaderElm","Logo","src","LogoImg","Reducable","System","right","NavElm","active","pathname","props","reducable","img","span","AppWrapper","Content","App","Group","lazy","Options","Systems","SystemDetails","ToEntity","EntityOverview","EntityBuilder","EntityRoutes","routes","exact","path","component","makeRoutes","store","configureStore","reducer","systemReducer","Store","CustomProvider","fallback","Loader","center","content","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker","initialState","systemJson","createSlice","reducers","setSystem","action","payload","toLowerCase","actions","PnPTomeDB","systems","encounters","books","randomTables","campaigns","quests","npcs","worlds","locations","events","groups","notes","stores","upgrade","tx","table","toCollection","modify","spell","description","Dexie","reciveAllFromTable","dbName","tableName","callback","db","orderBy","toArray","array","finally","close","deleteSystem","data","delete","id","toaster","Notification","header","closable","updateSystem","update","updateWithCallback","saveNewFromList","refinedEntities","filename","bulkPut","prom","remove","reciveAll","reciveCount","count","reciveSystem","reciveByAttribute","where","equalsIgnoreCase","reciveAllByAttribute","obj","first","recivePromise","reciveAllPromise","applyFilters","filters","fieldName","Array","hasTag","fieldPart","arrayTest","filterPart","reciveAllFiltered","sortedFiled","reverse","sortBy","reciveAttributeSelection","attribute","uniqueKeys","createNewWithId","put","deleteAll","clear","deleteAllByAttr","attr","attrs","equals","deleteCount","deleteDatabase"],"mappings":"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","file":"static/js/main.ceb4943f.chunk.js","sourcesContent":["import { cloneElement } from \"react\";\nimport {\n  FaHistory,\n  FaHourglassHalf,\n  FaMortarPestle,\n  FaUser,\n  FaLink,\n  FaCoins,\n  FaWeightHanging,\n  FaBookOpen,\n  FaMeteor,\n} from \"react-icons/fa\";\nimport {\n  GiBackpack,\n  GiBindle,\n  GiBloodySword,\n  GiBullseye,\n  GiCrystalWand,\n  GiMagicAxe,\n  GiPlagueDoctorProfile,\n  GiSherlockHolmes,\n  GiSwordSpade,\n  GiSwordSpin,\n  GiUpgrade,\n  GiWomanElfFace,\n} from \"react-icons/gi\";\nimport { IoSchool } from \"react-icons/io5\";\n\nexport default class Icons {\n  directions = new Set<string>([\"east\", \"west\"]);\n}\n\nexport const findIcon = (name: string | undefined, size?: number) => {\n  if (name) {\n    const Icon = IconSet.get(name);\n    if (Icon && size) {\n      const ClonedElementWithMoreProps = cloneElement(Icon, { size: size });\n      return ClonedElementWithMoreProps;\n    }\n    return Icon;\n  }\n};\n\nexport const IconSet = new Map<string, JSX.Element>([\n  [\"FaHistory\", <FaHistory />],\n  [\"FaHourglassHalf\", <FaHourglassHalf />],\n  [\"FaMortarPestle\", <FaMortarPestle />],\n  [\"FaUser\", <FaUser />],\n  [\"FaLink\", <FaLink />],\n  [\"FaCoins\", <FaCoins />],\n  [\"FaWeightHanging\", <FaWeightHanging />],\n  [\"FaMeteor\", <FaMeteor />],\n  [\"FaBookOpen\", <FaBookOpen />],\n  [\"GiCrystalWand\", <GiCrystalWand />],\n  [\"GiBackpack\", <GiBackpack />],\n  [\"GiBullseye\", <GiBullseye />],\n  [\"GiSwordSpade\", <GiSwordSpade />],\n  [\"GiBloodySword\", <GiBloodySword />],\n  [\"GiSwordSpin\", <GiSwordSpin />],\n  [\"GiMagicAxe\", <GiMagicAxe />],\n  [\"GiSherlockHolmes\", <GiSherlockHolmes />],\n  [\"GiWomanElfFace\", <GiWomanElfFace />],\n  [\"GiBindle\", <GiBindle />],\n  [\"GiUpgrade\", <GiUpgrade />],\n  [\"GiPlagueDoctorProfile\", <GiPlagueDoctorProfile />],\n  [\"IoSchool\", <IoSchool />],\n]);\n","export const rollCommand = (\n  commands: string,\n  krit?: boolean\n): { result: number; text: string; rolls: string } => {\n  let result = 0;\n  let text = \"\";\n\n  let newCommands = \"\";\n  commands.split(\" \").forEach((command) => {\n    if (/\\d+/g.test(command)) {\n      newCommands += command;\n    } else {\n      text += \" \" + command;\n    }\n  });\n  newCommands = newCommands.trim();\n\n  let rolls: string = \"(`\";\n  newCommands.split(\" \").forEach((fullCommand: string) => {\n    let commandSplits: string[] = [];\n    fullCommand\n      .split(\"+\")\n      .map((part, i: number) => {\n        if (i > 0) return \"+\" + part;\n        return part;\n      })\n      .forEach((part) => {\n        let split = part.split(\"-\").map((part, i: number) => {\n          if (i > 0) return \"-\" + part;\n          return part;\n        });\n        commandSplits = commandSplits.concat(split);\n      });\n\n    commandSplits.forEach((command: string) => {\n      let multiplier: number = 1;\n      if (command.includes(\"d\")) {\n        if (!command.startsWith(\"d\")) {\n          multiplier = parseInt(command.split(\"d\")[0]);\n          command = command.split(\"d\")[1];\n        }\n        command = command.replaceAll(\"d\", \"\");\n        if (krit) multiplier = multiplier * 2;\n\n        if (command.includes(\"+\")) {\n          const com = command.split(\"+\");\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(com[0]));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n          result += parseInt(com[1]);\n        } else if (command.includes(\"-\")) {\n          const com = command.split(\"-\");\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(com[0]));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n          result -= parseInt(com[1]);\n        } else {\n          for (let i = 0; i < multiplier; i++) {\n            const newRoll = rollDie(parseInt(command));\n            result += newRoll;\n            rolls += newRoll + \",\";\n          }\n        }\n      } else {\n        rolls = rolls.slice(0, -1);\n        result += parseInt(command);\n        rolls += \"|\" + command + \",\";\n      }\n    });\n    rolls = rolls.slice(0, -1);\n    if (!rolls.endsWith(\")\")) rolls += \"`)\";\n  });\n\n  return { result: result, text: text, rolls: rolls };\n};\n\nexport const rollDie = (size: number): number => {\n  const min = 1;\n  const max = size;\n  let rand = Math.round(min + Math.random() * (max - min));\n  return rand;\n};\n","import { useState } from \"react\";\nimport { FaDice } from \"react-icons/fa\";\nimport { InputGroup, Input } from \"rsuite\";\nimport styled from \"styled-components\";\nimport { rollCommand } from \"../../services/DiceService\";\n\ninterface $Props {\n  dice: string;\n}\n\nconst DiceRoller = ({ dice }: $Props) => {\n  const [field, setField] = useState<string>(dice);\n  const [results, setResults] = useState<string[]>([]);\n\n  const roll = () => {\n    if (field !== \"\") {\n      const { text, result, rolls } = rollCommand(field);\n      const resultText = field + \": \" + result + rolls.replaceAll(\"`\", \"\") + \" \" + text;\n      setResults((r) => [resultText, ...r]);\n    }\n  };\n\n  const whenClick = (e: any) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <DiceRollerConatiner onClick={whenClick}>\n      <InputGroup style={{ width: \"max-content\" }}>\n        <Input placeholder={\"e.g. 2d8+3\"} value={field} onChange={(val: any) => setField(val)} />\n        <InputGroup.Button onClick={(e) => roll()}>\n          <FaDice />\n        </InputGroup.Button>\n      </InputGroup>\n      <ResultContainer>\n        {results.length > 0 &&\n          results.map((result: string, index: number) => {\n            return <RollResult key={index}>{index === 0 ? <b>{result}</b> : result}</RollResult>;\n          })}\n      </ResultContainer>\n    </DiceRollerConatiner>\n  );\n};\n\nexport default DiceRoller;\n\nconst DiceRollerConatiner = styled.div`\n  padding: 10px;\n  color: ${({ theme }) => theme.secondTextColor};\n  background-color: ${({ theme }) => theme.mainColor};\n  box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.25);\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst ResultContainer = styled.div`\n  flex: 1 1 100%;\n  max-height: 200px;\n  overflow-y: scroll;\n  margin: 5px;\n`;\n\nconst RollResult = styled.div`\n  flex: 1 1 100%;\n  padding: 5px;\n  background-color: ${({ theme }) => theme.secondColor};\n  margin-bottom: 3px;\n`;\n","import { BiSelectMultiple } from \"react-icons/bi\";\nimport {\n  GiCrystalWand,\n  GiBackpack,\n  GiWomanElfFace,\n  GiPlagueDoctorProfile,\n  GiSwordClash,\n  GiBookmarklet,\n  GiScrollUnfurled,\n  GiSolarSystem,\n  GiDjinn,\n  GiBookshelf,\n  GiDiceTwentyFacesTwenty,\n  GiBindle,\n  GiSherlockHolmes,\n  GiStabbedNote,\n} from \"react-icons/gi\";\nimport { FaMeteor, FaIdCard, FaDragon, FaMapMarkedAlt, FaTable } from \"react-icons/fa\";\nimport { MdEvent } from \"react-icons/md\";\nimport { HiUserGroup } from \"react-icons/hi\";\n\ninterface $Props {\n  type: string;\n}\n\nconst LinkCheck = ({ type }: $Props) => {\n  const formatIcon = (type: string) => {\n    switch (type) {\n      case \"spell\":\n        return <FaMeteor />;\n      case \"item\":\n        return <GiCrystalWand />;\n      case \"gear\":\n        return <GiBackpack />;\n      case \"race\":\n      case \"subrace\":\n        return <GiWomanElfFace />;\n      case \"class\":\n      case \"subclass\":\n      case \"classe\":\n      case \"subclasse\":\n        return <GiPlagueDoctorProfile />;\n      case \"selection\":\n        return <BiSelectMultiple />;\n      case \"char\":\n        return <FaIdCard />;\n      case \"monster\":\n        return <FaDragon />;\n      case \"encounter\":\n        return <GiSwordClash />;\n      case \"campaign\":\n        return <GiBookmarklet />;\n      case \"quest\":\n        return <GiStabbedNote />;\n      case \"note\":\n        return <GiScrollUnfurled />;\n      case \"event\":\n        return <MdEvent />;\n      case \"world\":\n        return <GiSolarSystem />;\n      case \"location\":\n        return <FaMapMarkedAlt />;\n      case \"npc\":\n        return <GiDjinn />;\n      case \"randomTable\":\n        return <FaTable />;\n      case \"book\":\n        return <GiBookshelf />;\n      case \"group\":\n        return <HiUserGroup />;\n      case \"feat\":\n        return <GiBindle />;\n      case \"background\":\n        return <GiSherlockHolmes />;\n      case \"dice\":\n        return <GiDiceTwentyFacesTwenty />;\n      default:\n        return <></>;\n    }\n  };\n\n  return formatIcon(type);\n};\n\nexport default LinkCheck;\n","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../database/SystemReducer\";\nimport {\n  recivePromiseByAttribute,\n  recivePromiseByMultiAttribute,\n} from \"../../services/DatabaseService\";\n\ninterface $Props {\n  entityName: string;\n  name: string;\n  sources: string;\n}\n\nconst EntityTile = ({ entityName, name, sources }: $Props) => {\n  const [entity, setEntity] = useState<any>();\n  const systemDbName = useSelector(selectDBName);\n\n  const findEntity = async () => {\n    let newEntity: any = undefined;\n    if (sources !== undefined) {\n      newEntity = await recivePromiseByMultiAttribute(\n        systemDbName,\n        entityName,\n        {\n          name: name,\n          sources: sources,\n        }\n      );\n    } else {\n      newEntity = await recivePromiseByAttribute(\n        systemDbName,\n        entityName,\n        \"name\",\n        name\n      );\n    }\n    setEntity(newEntity);\n  };\n\n  useEffect(() => {\n    findEntity();\n  }, []);\n\n  if (entity !== undefined)\n    switch (entityName) {\n      //   case \"spell\":\n      //     return <SpellTile entity={entity} />;\n      //   case \"item\":\n      //     return <GiCrystalWand />;\n      // case \"gear\":\n      //   return <GearTile entity={entity} />;\n      //   case \"race\":\n      //   case \"subrace\":\n      //     return <GiWomanElfFace />;\n      //   case \"class\":\n      //   case \"subclass\":\n      //   case \"classe\":\n      //   case \"subclasse\":\n      //     return <GiPlagueDoctorProfile />;\n      //   case \"selection\":\n      //     return <BiSelectMultiple />;\n      //   case \"char\":\n      //     return <FaIdCard />;\n      //   case \"monster\":\n      //     return <FaDragon />;\n      //   case \"encounter\":\n      //     return <GiSwordClash />;\n      //   case \"campaign\":\n      //     return <GiBookmarklet />;\n      //   case \"quest\":\n      //     return <GiStabbedNote />;\n      //   case \"note\":\n      //     return <GiScrollUnfurled />;\n      //   case \"event\":\n      //     return <MdEvent />;\n      //   case \"world\":\n      //     return <GiSolarSystem />;\n      //   case \"location\":\n      //     return <FaMapMarkedAlt />;\n      //   case \"npc\":\n      //     return <GiDjinn />;\n      //   case \"randomTable\":\n      //     return <FaTable />;\n      //   case \"book\":\n      //     return <GiBookshelf />;\n      //   case \"group\":\n      //     return <HiUserGroup />;\n      //   case \"feat\":\n      //     return <GiBindle />;\n      //   case \"background\":\n      //     return <GiSherlockHolmes />;\n      default:\n        return <></>;\n    }\n  return <></>;\n};\n\nexport default EntityTile;\n","import { ReactNodeArray } from \"react\";\nimport reactStringReplace from \"react-string-replace\";\nimport { Tag, Popover, Whisper } from \"rsuite\";\nimport styled from \"styled-components\";\nimport DiceRoller from \"../components/general/DiceRoller\";\nimport LinkCheck from \"../components/general/LinkCheck\";\nimport TextEntityTile from \"../components/generic/TextEntityTile\";\n\nexport const firstToUpper = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const spliceFirstToUpper = (str: string) => {\n  return str.charAt(0).toUpperCase();\n};\n\nexport const formating = (text: string) => {\n  console.time(\"formatting\");\n  let checkedText = format(text);\n  console.timeEnd(\"formatting\");\n  return checkedText;\n};\n\nconst format = (text: string): JSX.Element[] => {\n  let newNodeArray: JSX.Element[] = [];\n  let matchedCoordinates: {\n    tag: string;\n    endtag: string;\n    start: number;\n    stop: number;\n  }[] = [];\n  let found: string[] | null = text.match(/(<[^>]*>)/gm);\n  if (found !== null) {\n    matchedCoordinates = replaceNode(text, found).sort(\n      (a, b) => a.start - b.start\n    );\n    console.log(matchedCoordinates);\n    while (matchedCoordinates.length > 0) {\n      newNodeArray = [\n        ...newNodeArray,\n        makeRactNodes(text, matchedCoordinates, (tags) => {\n          matchedCoordinates = [...matchedCoordinates].filter((coord) => {\n            return !tags.includes(coord);\n          });\n        }),\n      ];\n    }\n  }\n  return newNodeArray;\n};\n\nconst makeRactNodes = (\n  text: String,\n  matchedCoordinates: {\n    tag: string;\n    endtag: string;\n    start: number;\n    stop: number;\n  }[],\n  removeProcessedTags: (\n    tags: { tag: string; endtag: string; start: number; stop: number }[]\n  ) => void\n) => {\n  let coo:\n    | { tag: string; endtag: string; start: number; stop: number }\n    | undefined = matchedCoordinates.shift();\n  if (coo !== undefined) {\n    const [start, stop] = [coo.start, coo.stop];\n    const tag = coo.tag;\n    const endtag = coo.endtag;\n\n    if (tag === \"<br>\") {\n      let Elm: any = tag\n        .replaceAll(\"<\", \"\")\n        .replaceAll(\"/\", \"\")\n        .replaceAll(\">\", \"\");\n      return <Elm key={start}></Elm>;\n    } else {\n      let textPart = text.substring(start + tag.length, stop - endtag.length);\n\n      let nodeParts = tag.split(\" \");\n      let classes: string = \"\";\n      if (nodeParts.length > 1) {\n        if (nodeParts[1].startsWith(\"class=\")) {\n          classes = nodeParts[1]\n            .split(\"=\")[1]\n            .replaceAll('\"', \"\")\n            .replace(\">\", \"\");\n        }\n      }\n      let Elm: any = nodeParts[0]\n        .replaceAll(\"<\", \"\")\n        .replaceAll(\"/\", \"\")\n        .replaceAll(\">\", \"\");\n\n      let subMatchedCoordinates = [...matchedCoordinates].filter((coord) => {\n        return start < coord.start && stop > coord.stop;\n      });\n      removeProcessedTags(subMatchedCoordinates);\n\n      if (subMatchedCoordinates.length > 0) {\n        let stopIndex = 0;\n        let subs: any[] = [];\n        let subClone = [...subMatchedCoordinates];\n        subMatchedCoordinates.forEach((subCoo, i) => {\n          let preText = textPart.substring(\n            stopIndex,\n            subCoo.start - start - tag.length\n          );\n          let checkedText = formatTable(preText);\n          checkedText = formatLink(checkedText);\n\n          stopIndex = subCoo.stop - start - tag.length;\n          subs = [\n            ...subs,\n            checkedText,\n            makeRactNodes(text, subClone, removeProcessedTags),\n          ];\n        });\n        let postText = textPart.substring(stopIndex, textPart.length);\n        let checkedText = formatTable(postText);\n        checkedText = formatLink(checkedText);\n        subs = [...subs, checkedText];\n        return (\n          <Elm key={start} className={classes}>\n            {subs}\n          </Elm>\n        );\n      } else {\n        let checkedText = formatTable(textPart);\n        checkedText = formatLink(checkedText);\n        return (\n          <Elm key={start} className={classes}>\n            {checkedText}\n          </Elm>\n        );\n      }\n    }\n  }\n  return <></>;\n};\n\nconst replaceNode = (text: string, found: string[]) => {\n  let replaceFound = [...found];\n  let matchedCoordinates: {\n    tag: string;\n    endtag: string;\n    start: number;\n    stop: number;\n  }[] = [];\n  let i: number = 0;\n\n  console.log(found);\n  while (replaceFound.length > 0) {\n    let firstNode = replaceFound[i];\n    if (firstNode === \"<br>\") {\n      let start = 0;\n      matchedCoordinates.forEach((coo) => {\n        if (coo.tag === firstNode) {\n          if (coo.start >= start) start = coo.start + 1;\n        }\n      });\n      matchedCoordinates.push({\n        tag: firstNode,\n        endtag: firstNode,\n        start: text.indexOf(firstNode, start),\n        stop: text.indexOf(firstNode, start) + firstNode.length,\n      });\n      replaceFound.splice(i, 1);\n      i = 0;\n    } else {\n      let closeFirstNode = closeTag(firstNode);\n      if (replaceFound[i + 1] === closeFirstNode) {\n        let [start, stop] = [0, 0];\n        matchedCoordinates.forEach((coo) => {\n          if (coo.tag === firstNode) {\n            if (coo.start >= start) start = coo.start + 1;\n            if (coo.stop > stop) stop = coo.stop + 1;\n          }\n        });\n        matchedCoordinates.push({\n          tag: firstNode,\n          endtag: closeFirstNode,\n          start: text.indexOf(firstNode, start),\n          stop: text.indexOf(closeFirstNode, stop) + closeFirstNode.length,\n        });\n        replaceFound.splice(i, 2);\n        i = 0;\n      } else i++;\n    }\n  }\n  return matchedCoordinates;\n};\n\nconst closeTag = (node: string) => {\n  let nodeParts = node.split(\" \");\n  if (nodeParts.length > 1) return nodeParts[0].replace(\"<\", \"</\") + \">\";\n  return nodeParts[0].replace(\"<\", \"</\");\n};\n\nconst formatLink = (text: string | ReactNodeArray): ReactNodeArray => {\n  return reactStringReplace(text, /\\[\\[(\\w*\\.[\\s\\S]*?)\\]\\]/gm, (match, i) => {\n    const linkParts: string[] = match.split(\".\");\n    let entityName = linkParts[0];\n    let nameSource = linkParts[1];\n    let [name, sources] = nameSource.split(\"|\");\n    if (entityName === \"dice\") {\n      return (\n        <Whisper\n          key={match + i}\n          preventOverflow\n          trigger={[\"hover\", \"click\"]}\n          speaker={\n            <Popover full style={{ width: 200 }}>\n              <DiceRoller dice={nameSource} />\n            </Popover>\n          }\n          placement=\"auto\"\n          enterable\n        >\n          <Tag size={\"sm\"} color=\"red\">\n            <LinkCheck type={entityName} /> {nameSource}\n          </Tag>\n        </Whisper>\n      );\n    }\n    if (entityName === \"class\" || entityName === \"subclass\") entityName += \"e\";\n    return (\n      <Whisper\n        key={match + i}\n        preventOverflow\n        trigger={[\"hover\", \"click\"]}\n        speaker={\n          <Popover full style={{ maxWidth: 300 }}>\n            <TextEntityTile\n              entityName={entityName}\n              name={name}\n              sources={sources}\n            />\n          </Popover>\n        }\n        placement=\"auto\"\n        enterable\n      >\n        <Tag size={\"sm\"} color=\"red\">\n          <LinkCheck type={entityName} /> {name}\n          {sources !== undefined ? ` (${sources})` : \"\"}\n        </Tag>\n      </Whisper>\n    );\n  });\n};\n\nconst formatTable = (text: string | ReactNodeArray): ReactNodeArray => {\n  return reactStringReplace(\n    text,\n    /\\|\\|tableStart\\|\\|([\\s\\S]*?)\\|\\|tableEnd\\|\\|/gm,\n    (match, i) => {\n      const tableRows: string[] = match.split(\"||\");\n      let isHead = true;\n      return (\n        <table key={match + i}>\n          <tbody key={match + i}>\n            {tableRows.map((row: string, index: number) => {\n              if (row.includes(\"|\")) {\n                if (isHead) {\n                  isHead = false;\n                  const cells = row.split(\"|\");\n                  return (\n                    <tr key={match + i + index}>\n                      {cells.map((cell: string, index: number) => {\n                        return (\n                          <TableHeadProp key={index}>{cell}</TableHeadProp>\n                        );\n                      })}\n                    </tr>\n                  );\n                } else {\n                  const cells = row.split(\"|\");\n                  return (\n                    <tr key={match + i + index}>\n                      {cells.map((cell: string, index: number) => {\n                        return (\n                          <TableProp key={index}>{formatLink(cell)}</TableProp>\n                        );\n                      })}\n                    </tr>\n                  );\n                }\n              } else {\n                return <></>;\n              }\n            })}\n          </tbody>\n        </table>\n      );\n    }\n  );\n};\n\nconst TableHeadProp = styled.th`\n  background-color: ${({ theme }) => theme.mainColor};\n  color: ${({ theme }) => theme.textColor};\n  border-radius: 5px;\n  padding: 2px 5px 2px 5px;\n`;\n\nconst TableProp = styled.td`\n  background-color: ${({ theme }) => theme.mainColor};\n  color: ${({ theme }) => theme.textColor};\n  border-radius: 5px;\n  padding: 5px;\n  text-align: center;\n`;\n","interface Theme {\n  mainColor: string;\n  secondColor: string;\n  textColor: string;\n  secondTextColor: string;\n  highlight: string;\n}\nexport default Theme;\n\nexport const darkTheme: Theme = {\n  mainColor: \"#191D38\",\n  secondColor: \"#272c4a\",\n  textColor: \"white\",\n  secondTextColor: \"lightslategray\",\n  highlight: \"#F55C5C\",\n};\nexport const lightTheme: Theme = {\n  mainColor: \"#191D38\",\n  secondColor: \"#272c4a\",\n  textColor: \"white\",\n  secondTextColor: \"lightslategray\",\n  highlight: \"#F55C5C\",\n};\n\n// interface Theme {\n//   buttons: {\n//     color: string;\n//     backgroundColor: string;\n//     disabled: string;\n//     hoverColor: string;\n//     height: string;\n//   };\n//   input: {\n//     color: string;\n//     backgroundColor: string;\n//   };\n//   main: {\n//     backgroundColor: string;\n//     color: string;\n//     highlight: string;\n//   };\n//   header: {\n//     backgroundColor: string;\n//     color: string;\n//     highlight: string;\n//   };\n//   tile: {\n//     backgroundColor: string;\n//     backgroundColorLink: string;\n//     color: string;\n//     headerColor: string;\n//     boxShadow: string;\n//   };\n//   nav: {\n//     size: {\n//       small: {\n//         width: string;\n//         height: string;\n//       };\n//       medium: {\n//         width: string;\n//         height: string;\n//       };\n//       large: {\n//         width: string;\n//         height: string;\n//       };\n//     };\n//   };\n// }\n\n// export const lightTheme: Theme = {\n//   buttons: {\n//     color: \"white\",\n//     backgroundColor: \"#F55C5C\",\n//     disabled: \"#E1D0E5\",\n//     hoverColor: \"darkgrey\",\n//     height: \"20px\",\n//   },\n//   input: {\n//     color: \"inherit\",\n//     backgroundColor: \"white\",\n//   },\n//   main: {\n//     backgroundColor: \"#F3F5F8\",\n//     color: \"\",\n//     highlight: \"#F55C5C\",\n//   },\n//   header: {\n//     color: \"white\",\n//     backgroundColor: \"#F55C5C\",\n//     highlight: \"#8000ff\",\n//   },\n//   tile: {\n//     backgroundColor: \"white\",\n//     backgroundColorLink: \"lightslategray\",\n//     color: \"darkgrey\",\n//     headerColor: \"black\",\n//     boxShadow: \"\",\n//   },\n//   nav: {\n//     size: {\n//       small: {\n//         width: \"15em\",\n//         height: \"15em\",\n//       },\n//       medium: {\n//         width: \"15em\",\n//         height: \"15em\",\n//       },\n//       large: {\n//         width: \"15em\",\n//         height: \"15em\",\n//       },\n//     },\n//   },\n// };\n\n// export const darkTheme: Theme = {\n//   buttons: {\n//     color: \"#fff\",\n//     backgroundColor: \"#F55C5C\",\n//     disabled: \"#E1D0E5\",\n//     hoverColor: \"#191D38\",\n//     height: \"20px\",\n//   },\n//   input: {\n//     color: \"lightgrey\",\n//     backgroundColor: \"#1A1F3B\",\n//   },\n//   main: {\n//     backgroundColor: \"#191D38\",\n//     color: \"\",\n//     highlight: \"#F55C5C\",\n//   },\n//   header: {\n//     color: \"white\",\n//     backgroundColor: \"#191D38\",\n//     highlight: \"#8000ff\",\n//   },\n//   tile: {\n//     backgroundColor: \"#272c4a\",\n//     backgroundColorLink: \"#E45D68\",\n//     headerColor: \"#CACBDB\",\n//     color: \"lightslategray\",\n//     boxShadow: \"\",\n//   },\n//   nav: {\n//     size: {\n//       ...lightTheme.nav.size,\n//     },\n//   },\n// };\n\n// export default Theme;\n","import React, { useEffect, createContext, useContext, useState } from \"react\";\nimport Theme, { darkTheme, lightTheme } from \"./Theme\";\nimport { ThemeProvider } from \"styled-components\";\n\nexport function createCtx<ContextType>() {\n  const ctx = createContext<ContextType | undefined>(undefined);\n  function useCtx() {\n    const c = useContext(ctx);\n    if (!c) throw new Error(\"useCtx must be inside a Provider with a value\");\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const;\n}\n\ntype ThemeContextType = {\n  theme: Theme;\n  setTheme: (value: Theme) => void;\n};\n\nexport const [useTheme, CtxProvider] = createCtx<ThemeContextType>();\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const MyThemeProvider = ({ children }: Props) => {\n  const [theme, setTheme] = useState(darkTheme);\n\n  useEffect(() => {\n    let localTheme = localStorage.getItem(\"theme\");\n    if (localTheme !== undefined) {\n      if (localTheme === \"light\") {\n        setTheme(lightTheme);\n        localStorage.setItem(\"theme\", \"light\");\n      } else {\n        setTheme(darkTheme);\n        localStorage.setItem(\"theme\", \"dark\");\n      }\n    } else {\n      localStorage.setItem(\"theme\", \"dark\");\n    }\n  }, []);\n\n  return (\n    <CtxProvider value={{ theme, setTheme }}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </CtxProvider>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo192.21188df6.png\";","import { ReactNode } from \"react\";\nimport { Panel } from \"rsuite\";\nimport styled from \"styled-components\";\n\ninterface $Props {\n  children: ReactNode;\n  onClick?: () => void;\n}\nconst Card = ({ children, onClick }: $Props) => {\n  return (\n    <CardWrapper onClick={onClick}>\n      <Panel shaded>{children}</Panel>\n    </CardWrapper>\n  );\n};\n\nexport default Card;\n\nconst CardWrapper = styled.div`\n  flex: 1 1;\n  cursor: pointer;\n  background-color: ${({ theme }) => theme.mainColor};\n  border-radius: 5px;\n  max-width: max-content;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${({ theme }) => theme.highlight};\n  }\n`;\n\nexport const Cards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const CardDivier = styled.div`\n  flex: 1 1 100%;\n  border-top: 1px solid var(--rs-border-primary);\n`;","import { useHistory } from \"react-router\";\nimport { FaHome } from \"react-icons/fa\";\nimport Card, { Cards, CardDivier } from \"../general/Card\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\nimport { SystemEntity } from \"../../database/SystemReducer\";\nimport { findIcon } from \"../../services/IconService\";\nimport { firstToUpper } from \"../../services/TextService\";\n\ninterface $MenuProps {\n  show: (val: boolean) => void;\n}\n\nconst Menu = ({ show }: $MenuProps) => {\n  let history = useHistory();\n  const system = useSelector((state: RootState) => state.system);\n\n  const move = (destination: string) => {\n    history.push(destination);\n    show(false);\n  };\n\n  return (\n    <Cards>\n      <Card onClick={() => move(\"/home\")}>\n        <FaHome /> Home\n      </Card>\n      <CardDivier />\n      {system.entities\n        .filter((entity: SystemEntity) => entity.isMainEntity)\n        .map((entity: SystemEntity, index: number) => {\n          return (\n            <Card\n              key={index}\n              onClick={() => move(`/${entity.entityName}-overview`)}\n            >\n              {findIcon(entity.icon)} {firstToUpper(entity.entityName)}\n            </Card>\n          );\n        })}\n    </Cards>\n  );\n};\n\nexport default Menu;\n","import { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { CgMenuGridO } from \"react-icons/cg\";\nimport { FaUser, FaCogs } from \"react-icons/fa\";\nimport LogoImg from \"../../logo192.png\";\nimport { Drawer } from \"rsuite\";\nimport packageJson from \"../../../package.json\";\nimport Menu from \"../pages/Menu\";\nimport { GiBookshelf } from \"react-icons/gi\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\n\nconst Header = () => {\n  let history = useHistory();\n  let location = useLocation();\n  const system = useSelector((state: RootState) => state.system);\n  const [showMenu, openMenu] = useState<boolean>(false);\n\n  return (\n    <HeaderBar>\n      <Drawer\n        size={\"xs\"}\n        open={showMenu}\n        onClose={() => openMenu(false)}\n        placement={\"right\"}\n      >\n        <Drawer.Header>\n          <Drawer.Title>Menu</Drawer.Title>\n          <Version>v{packageJson.version}</Version>\n        </Drawer.Header>\n        <Drawer.Body>\n          <Menu show={openMenu} />\n        </Drawer.Body>\n      </Drawer>\n\n      <HeaderElm>\n        <Logo src={LogoImg} />\n        <Reducable>\n          <System>{system.name}</System>Tome\n        </Reducable>\n      </HeaderElm>\n      <HeaderElm right>\n        <NavElm\n          active={location.pathname === \"/systems\" || location.pathname.includes(\"/system-detail\")}\n          onClick={() => history.push(\"/systems\")}\n        >\n          <GiBookshelf />\n        </NavElm>\n        <NavElm\n          active={\n            location.pathname !== \"/group\" &&\n            location.pathname !== \"/options\" &&\n            location.pathname !== \"/systems\" &&\n            !location.pathname.includes(\"/system-detail\")\n          }\n          onClick={() => openMenu(true)}\n        >\n          <CgMenuGridO />\n        </NavElm>\n        <NavElm\n          active={location.pathname === \"/group\"}\n          onClick={() => history.push(\"/group\")}\n        >\n          <FaUser />\n        </NavElm>\n        <NavElm\n          active={location.pathname === \"/options\"}\n          onClick={() => history.push(\"/options\")}\n        >\n          <FaCogs />\n        </NavElm>\n      </HeaderElm>\n    </HeaderBar>\n  );\n};\n\nexport default Header;\n\nconst HeaderBar = styled.div`\n  width: 100%;\n  height: 70px;\n  padding: 10px;\n  display: flex;\n  gap: 10px;\n  background-color: ${({ theme }) => theme.secondColor};\n  color: ${({ theme }) => theme.textColor};\n`;\n\nconst HeaderElm = styled.div<{ right?: boolean; reducable?: boolean }>`\n  flex: 1 1;\n  font-size: 30px;\n  line-height: 50px;\n\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  ${(props) =>\n    props.right\n      ? \"justify-content: flex-end;text-align: right;min-width: 230px;\"\n      : \"\"}\n\n  ${(props) =>\n    props.reducable\n      ? \"@media only screen and (max-width: 500px) {display: none;}\"\n      : \"\"}\n`;\n\nconst Logo = styled.img`\n  margin-top: 0px;\n  margin-right: 0px;\n  height: 50px;\n  border-radius: 50px;\n`;\n\nconst Version = styled.span`\n  line-height: 36px;\n`;\n\nconst NavElm = styled.div<{ active?: boolean }>`\n  flex: 1 1;\n  max-width: 70px;\n  height: 40px;\n  text-align: center;\n  cursor: pointer;\n\n  ${(props) => {\n    if (props.active) {\n      return `color: ${props.theme.highlight}`;\n    } else {\n      return `color: ${props.theme.textColor}`;\n    }\n  }}\n`;\n\nconst Reducable = styled.div`\n  @media only screen and (max-width: 500px) {\n    display: none;\n  }\n`;\n\nconst System = styled.span`\n  color: ${({ theme }) => theme.highlight};\n`;\n","import React, { ReactNode } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"./Header\";\n\ninterface $Props {\n  children: ReactNode;\n}\n\nconst AppWrapper = ({ children }: $Props) => {\n  return (\n    <App>\n      <Header />\n      <Content>{children}</Content>\n    </App>\n  );\n};\n\nexport default AppWrapper;\n\nconst App = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.mainColor};\n`;\n\nconst Content = styled.div`\n  width: calc(100% - 20px);\n  padding: 10px;\n`;\n","import { lazy } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Route, RouteComponentProps, Switch } from \"react-router\";\nimport { RootState } from \"../../database/Store\";\nimport { SystemEntity } from \"../../database/SystemReducer\";\n\nconst Group = lazy(() => import(\"../pages/Group\"));\nconst Options = lazy(() => import(\"../pages/Options\"));\nconst Systems = lazy(() => import(\"../pages/Systems\"));\nconst SystemDetails = lazy(() => import(\"./details/SystemDetails\"));\n\nconst ToEntity = lazy(() => import(\"./details/ToEntity\"));\nconst EntityOverview = lazy(() => import(\"./EntityOverview\"));\nconst EntityBuilder = lazy(() => import(\"./details/EntityBuilder\"));\n\nexport type TParams = { name?: string };\n\nconst EntityRoutes = () => {\n  const system = useSelector((state: RootState) => state.system);\n\n  const makeRoutes = () => {\n    let routes: JSX.Element[] = [];\n    if (system) {\n      routes.push(<Route key={\"empty\"} exact path=\"/\" component={Systems} />);\n      routes.push(\n        <Route key={\"group\"} exact path=\"/group\" component={Group} />\n      );\n      routes.push(\n        <Route key={\"options\"} exact path=\"/options\" component={Options} />\n      );\n      routes.push(\n        <Route key={\"systems\"} exact path=\"/systems\" component={Systems} />\n      );\n      routes.push(\n        <Route\n          key={\"systemsdetail\"}\n          exact\n          path=\"/system-detail/:id\"\n          component={SystemDetails}\n        />\n      );\n      system.entities.forEach((entity: SystemEntity, index: number) => {\n        routes.push(\n          <Route\n            key={index + \"detailname\"}\n            path={`/${entity.entityName}-detail/:name`}\n            component={(match: RouteComponentProps<TParams>) => (\n              <ToEntity entityName={entity.entityName} match={match} />\n            )}\n          />\n        );\n        routes.push(\n          <Route\n            key={index + \"detailid\"}\n            path={`/${entity.entityName}-detail/:id`}\n            component={(match: RouteComponentProps<TParams>) => (\n              <ToEntity entityName={entity.entityName} match={match} />\n            )}\n          />\n        );\n        routes.push(\n          <Route\n            key={index + \"detailbuilder\"}\n            path={`/${entity.entityName}-builder`}\n            component={() => <EntityBuilder entityName={entity.entityName} />}\n          />\n        );\n        routes.push(\n          <Route\n            key={index + \"detailoverview\"}\n            path={`/${entity.entityName}-overview`}\n            component={() => <EntityOverview entityName={entity.entityName} />}\n          />\n        );\n      });\n    }\n    return routes;\n  };\n\n  return <Switch>{makeRoutes()}</Switch>;\n};\n\nexport default EntityRoutes;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport systemReducer from \"./SystemReducer\";\nimport { useDispatch } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: {\n    system: systemReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>(); // Export a hook that can be reused to resolve types\n\nexport default store;\n","import { Suspense } from \"react\";\nimport { MyThemeProvider as ThemeProvider } from \"./components/theme/MyThemeProvider\";\nimport { HashRouter } from \"react-router-dom\";\nimport { CustomProvider, Loader } from \"rsuite\";\nimport AppWrapper from \"./components/general/AppWrapper\";\nimport EntityRoutes from \"./components/generic/EntityRoutes\";\n\nimport { Provider } from \"react-redux\";\nimport Store from \"./database/Store\";\n\nconst App = () => {\n  return (\n    <Provider store={Store}>\n      <CustomProvider theme=\"dark\">\n        <ThemeProvider>\n          <HashRouter>\n            <AppWrapper>\n              <Suspense fallback={<Loader center content=\"Loading...\" />}>\n                <EntityRoutes />\n              </Suspense>\n            </AppWrapper>\n          </HashRouter>\n        </ThemeProvider>\n      </CustomProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"react-quill/dist/quill.snow.css\";\n// import \"rsuite/dist/rsuite.min.css\";\nimport \"./custome.less\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport systemJson from \"../System.json\";\nimport { RootState } from \"./Store\";\n\nexport interface SystemEntity {\n  entityName: string;\n  icon: string;\n  isMainEntity: boolean;\n  attributes: string[];\n  searchConfig: any;\n  tileConfig: any;\n  detailConfig: any;\n}\n\nexport interface System {\n  id: number;\n  version: string;\n  name: string;\n  pic: string;\n  entities: SystemEntity[];\n}\n\nconst initialState: System = systemJson as System;\n\nexport const systemReducer = createSlice({\n  name: \"system\",\n  initialState: initialState,\n  reducers: {\n    setSystem: (state, action: PayloadAction<System>) => action.payload,\n  },\n});\n\nexport const selectDBName = (state: RootState) =>\n  `${state.system.name.toLowerCase()}-${state.system.version}`;\n\nexport const { setSystem } = systemReducer.actions;\n\nexport default systemReducer.reducer;\n","import Dexie from \"dexie\";\nimport Book from \"../data/Book\";\nimport Campaign from \"../data/campaign/Campaign\";\nimport Group from \"../data/campaign/Group\";\nimport Npc from \"../data/campaign/Npc\";\nimport Quest from \"../data/campaign/Quest\";\nimport Encounter from \"../data/encounter/Encounter\";\nimport Note from \"../data/Note\";\nimport RandomTable from \"../data/RandomTable\";\nimport Event from \"../data/world/Event\";\nimport Location from \"../data/world/Location\";\nimport World from \"../data/world/World\";\nimport { System } from \"./SystemReducer\";\n\nexport class PnPTomeDB extends Dexie {\n  systems: Dexie.Table<System, number>; // number = type of the primkey\n  encounters: Dexie.Table<Encounter, number>; // number = type of the primkey\n  books: Dexie.Table<Book, number>; // number = type of the primkey\n  randomTables: Dexie.Table<RandomTable, number>; // number = type of the primkey\n  campaigns: Dexie.Table<Campaign, number>; // number = type of the primkey\n  quests: Dexie.Table<Quest, number>; // number = type of the primkey\n  npcs: Dexie.Table<Npc, number>; // number = type of the primkey\n  worlds: Dexie.Table<World, number>; // number = type of the primkey\n  locations: Dexie.Table<Location, number>; // number = type of the primkey\n  events: Dexie.Table<Event, number>; // number = type of the primkey\n  groups: Dexie.Table<Group, number>; // number = type of the primkey\n  notes: Dexie.Table<Note, number>; // number = type of the primkey\n\n  constructor() {\n    super(\"PnPTomeDB\");\n    this.version(1)\n      .stores({\n        systems: \"++id, name, version, pic, entities\",\n        encounters:\n          \"++id, [name+sources], name, enemies, players, isPlaying, currentInit, roundCounter, map, mapBase64, dimension\",\n        books: \"++id, [name+sources], name, cover, data, pages, tags\",\n        randomTables: \"++id, [name+sources], name, rows, header, filename\",\n        campaigns:\n          \"++id, [name+sources], name, pic, picBase64, description, world, npcs, notes, logs, players, flow, map, sources, filename\",\n        quests:\n          \"++id, [name+sources], name, pic, picBase64, description, rewards, followQuest, sources, filename\",\n        npcs: \"++id, [name+sources], name, pic, picBase64, char, monster, traits, description, sources, filename\",\n        worlds:\n          \"++id, [name+sources], name, map, description, locations, events, sources, filename\",\n        locations:\n          \"++id, [name+sources], name, map, mapBase64, dimension, markers, sources, filename\",\n        events:\n          \"++id, [name+sources], name, description, date, sources, filename\",\n        groups:\n          \"++id, [name+sources], name, pic, picBase64, description, notes, npcs, players, monsters, flow, sources, filename\",\n        notes: \"++id, [name+sources], name, text, sources, filename\",\n      })\n      .upgrade((tx) => {\n        return tx\n          .table(\"spells\")\n          .toCollection()\n          .modify((spell) => {\n            spell.description = spell.text;\n            delete spell.text;\n            spell.classes = spell.classes.replaceAll(\" \", \"\").split(\",\");\n          });\n      });\n\n    this.systems = this.table(\"systems\");\n    this.encounters = this.table(\"encounters\");\n    this.books = this.table(\"books\");\n    this.randomTables = this.table(\"randomTables\");\n    this.campaigns = this.table(\"campaigns\");\n    this.quests = this.table(\"quests\");\n    this.npcs = this.table(\"npcs\");\n    this.worlds = this.table(\"worlds\");\n    this.locations = this.table(\"locations\");\n    this.events = this.table(\"events\");\n    this.groups = this.table(\"groups\");\n    this.notes = this.table(\"notes\");\n  }\n}\n","import { PnPTomeDB } from \"../database/PnPTomeDB\";\nimport Dexie, { IndexableType } from \"dexie\";\nimport IEntity from \"../data/IEntity\";\nimport Filter from \"../data/Filter\";\nimport { Notification, Tag, toaster } from \"rsuite\";\nimport { System } from \"../database/SystemReducer\";\n\nexport const reciveAllFromDB = (\n  dbName: string,\n  callback: (data: { name: string; fields: any[] }[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      let names: { name: string; fields: any[] }[] = [];\n      db.tables.forEach(function (table) {\n        names.push({ name: table.name, fields: table.schema.indexes });\n      });\n      callback(names);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveFromDBAllFromTable = (\n  dbName: string,\n  tableName: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(\"name\")\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAllFromTable = (\n  dbName: string,\n  tableName: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(\"name\")\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveByAttributes = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: number | string,\n  callback: (data: IndexableType) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equals(value)\n        .toArray()\n        .then((array) => {\n          callback(array[0]);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteSystem = (data: System) => {\n  console.log(data);\n  const db = new PnPTomeDB();\n  db.open()\n    .then(function () {\n      db.table(\"systems\")\n        .delete(data.id)\n        .then(() => {\n          toaster.push(\n            <Notification header={\"Success\"} closable type=\"success\">\n              Deletion successfull!\n            </Notification>,\n            { placement: \"bottomStart\" }\n          );\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const updateSystem = (data: System) => {\n  console.log(data);\n  const db = new PnPTomeDB();\n  db.open()\n    .then(function () {\n      db.table(\"systems\")\n        .update(data.id, data)\n        .then(() => {\n          toaster.push(\n            <Notification header={\"Success\"} closable type=\"success\">\n              Overwrite successfull!\n            </Notification>,\n            { placement: \"bottomStart\" }\n          );\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const update = (dbName: string, tableName: string, data: IEntity) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName).update(data.id, data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const updateWithCallback = (\n  dbName: string,\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .update(data.id, data)\n        .then((result: number) => {\n          callback(result);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const save = (dbName: string, tableName: string, data: IEntity) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName).add(data);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNew = (\n  dbName: string,\n  tableName: string,\n  entity: IEntity,\n  filename: string\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(async function () {\n      delete entity[\"id\"];\n      const prom = await db\n        .table(tableName)\n        .put({ ...entity, filename: filename });\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveNewFromList = (\n  dbName: string,\n  tableName: string,\n  entities: IEntity[]\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(async function () {\n      const refinedEntities = (entities as IEntity[]).map((entity: IEntity) => {\n        delete entity[\"id\"];\n        return { ...entity, filename: entity.sources };\n      });\n      try {\n        const prom = await db.table(tableName).bulkPut(refinedEntities);\n        return prom;\n      } catch (error) {\n        console.log(error);\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const resaveFromList = (\n  dbName: string,\n  tableName: string,\n  entities: IEntity[]\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(async function () {\n      const refinedEntities = (entities as IEntity[]).map((entity: IEntity) => {\n        delete entity[\"id\"];\n        return entity;\n      });\n      const prom = await db.table(tableName).bulkPut(refinedEntities);\n      return prom;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const saveWithCallback = (\n  dbName: string,\n  tableName: string,\n  data: IEntity,\n  callback: (data: number) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .add(data)\n        .then((result) => {\n          callback(result as number);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const remove = (\n  dbName: string,\n  tableName: string,\n  id: number | undefined\n) => {\n  const db = new Dexie(dbName);\n  if (id !== undefined) {\n    db.open()\n      .then(function () {\n        db.table(tableName).delete(id);\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAll = (\n  dbName: string,\n  tableName: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(\"name\")\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCount = (\n  dbName: string,\n  tableName: string,\n  callback: (value: number) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName).count((count) => {\n        callback(count);\n      });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveCountPromise = (dbName: string, tableName: string) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).count();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveSystem = (\n  dbName: string,\n  value: number,\n  callback: (data: System) => void\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(function () {\n      db.table(\"systems\")\n        .get(value)\n        .then((val) => {\n          callback(val);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveByAttribute = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: string,\n  callback: (data: IEntity) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray()\n        .then((array) => {\n          callback(array[0]);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAllByAttribute = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: string,\n  callback: (data: IEntity[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray()\n        .then((array) => {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttribute = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: string\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(async function () {\n      const array = await db\n        .table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray();\n      return array[0];\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByMultiAttribute = (\n  dbName: string,\n  tableName: string,\n  obj: {\n    name: string;\n    sources: string;\n  }\n) => {\n  const db = new Dexie(dbName);\n  if (obj.sources !== undefined) {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(obj).first();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else {\n    // delete obj.sources;\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(obj).first();\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAllPromiseByAttribute = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: string\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(async function () {\n      const array = await db\n        .table(tableName)\n        .where(name)\n        .equalsIgnoreCase(value)\n        .toArray();\n      return array;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromise = (\n  dbName: string,\n  tableName: string,\n  value: number\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).get(value);\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const recivePromiseByAttributeCount = (\n  dbName: string,\n  tableName: string,\n  name: string,\n  value: string | number\n) => {\n  const db = new Dexie(dbName);\n  if (typeof value === \"string\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db\n          .table(tableName)\n          .where(name)\n          .equalsIgnoreCase(value)\n          .count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else if (typeof value === \"number\") {\n    return db\n      .open()\n      .then(async function () {\n        return await db.table(tableName).where(name).equals(value).count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  } else {\n    return db\n      .open()\n      .then(async function () {\n        return await db\n          .table(tableName)\n          .where(name)\n          .equalsIgnoreCase(\"\" + value)\n          .count();\n      })\n      .finally(function () {\n        db.close();\n      });\n  }\n};\n\nexport const reciveAllPromise = (dbName: string, tableName: string) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(async function () {\n      return await db.table(tableName).orderBy(\"name\").toArray();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const applyFilters = (obj: any, filters: Filter[]) => {\n  let test: boolean[] = [];\n  filters.forEach((filter) => {\n    if (typeof filter.value === \"string\") {\n      if (obj[filter.fieldName] instanceof Array) {\n        let hasTag = false;\n        obj[filter.fieldName].forEach((fieldPart: string) => {\n          // @ts-ignore\n          if (fieldPart.toLowerCase().includes(filter.value.toLowerCase())) {\n            hasTag = true;\n          }\n        });\n        if (hasTag) {\n          test.push(true);\n        } else {\n          test.push(false);\n        }\n      } else {\n        if (obj[filter.fieldName] !== undefined)\n          test.push(\n            // @ts-ignore\n            obj[filter.fieldName]\n              .toLowerCase()\n              .includes(filter.value.toLowerCase())\n          );\n      }\n    } else if (typeof filter.value === \"number\") {\n      // @ts-ignore\n      test.push(obj[filter.fieldName] === filter.value);\n    } else if (typeof filter.value === \"boolean\") {\n      // @ts-ignore\n      const objValue: number | boolean = obj[filter.fieldName];\n      if (typeof objValue === \"number\")\n        test.push(obj[filter.fieldName] === +filter.value);\n      else test.push(obj[filter.fieldName] === filter.value);\n    } else if (filter.value instanceof Array) {\n      let arrayTest: boolean = false;\n      filter.value.forEach((filterPart: string | boolean | number) => {\n        if (typeof filterPart === \"string\") {\n          if (obj[filter.fieldName] instanceof Array) {\n            obj[filter.fieldName].forEach((val: string) => {\n              if (val.toLowerCase() === filterPart.toLowerCase()) {\n                arrayTest = true;\n              }\n            });\n          } else if (\n            // @ts-ignore\n            obj[filter.fieldName].toLowerCase() === filterPart.toLowerCase()\n          )\n            arrayTest = true;\n        } else if (typeof filterPart === \"number\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        } else if (typeof filterPart === \"boolean\") {\n          // @ts-ignore\n          if (obj[filter.fieldName] === filterPart) arrayTest = true;\n        }\n      });\n      test.push(arrayTest);\n    }\n  });\n\n  let result = true;\n  test.forEach((val) => {\n    if (!val) result = false;\n  });\n  return result;\n};\n\nexport const reciveAllFiltered = (\n  dbName: string,\n  tableName: string,\n  filters: Filter[],\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      } else {\n        db.table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled)\n          .then((data) => {\n            callback(data);\n          });\n      }\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAllFilteredPromise = (\n  dbName: string,\n  tableName: string,\n  filters: Filter[]\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(function () {\n      let sortedFiled: string = \"name\";\n      let reverse: boolean = false;\n\n      filters.forEach((filter: Filter) => {\n        if (filter.sort !== 0) {\n          sortedFiled = filter.fieldName;\n          if (filter.sort === 2) reverse = true;\n        }\n      });\n\n      if (reverse) {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .reverse()\n          .sortBy(sortedFiled);\n      } else {\n        return db\n          .table(tableName)\n          .filter((obj) => applyFilters(obj, filters))\n          .sortBy(sortedFiled);\n      }\n    })\n    .catch((reason) => {\n      console.log(reason);\n      return undefined;\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelection = (\n  dbName: string,\n  tableName: string,\n  attribute: string,\n  callback: (data: IndexableType[]) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .orderBy(attribute)\n        .uniqueKeys(function (array) {\n          callback(array);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const reciveAttributeSelectionPromise = (\n  dbName: string,\n  tableName: string,\n  attribute: string\n) => {\n  const db = new Dexie(dbName);\n  return db\n    .open()\n    .then(function () {\n      return db.table(tableName).orderBy(attribute).uniqueKeys();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const createNewWithId = (\n  dbName: string,\n  tableName: string,\n  entity: IEntity,\n  callback: (id: number) => void\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .put(entity)\n        .then((id) => {\n          callback(id as number);\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAll = (dbName: string, tableName: string) => {\n  console.log(dbName, tableName);\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .clear()\n        .then(() => {\n          toaster.push(\n            <Notification header={\"Success\"} closable type=\"success\">\n              Deleted all {tableName}.\n            </Notification>,\n            { placement: \"bottomStart\" }\n          );\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAllByAttrs = (\n  dbName: string,\n  tableName: string,\n  attr: string,\n  attrs: string[]\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName).where(attr).anyOf(attrs).delete();\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const deleteAllByAttr = (\n  dbName: string,\n  tableName: string,\n  attr: string,\n  attrs: string\n) => {\n  const db = new Dexie(dbName);\n  db.open()\n    .then(function () {\n      db.table(tableName)\n        .where(attr)\n        .equals(attrs)\n        .delete()\n        .then((deleteCount) => {\n          if (deleteCount > 0)\n            toaster.push(\n              <Notification header={\"Success\"} closable type=\"success\">\n                Deleted all <Tag size=\"lg\">{deleteCount}</Tag> {tableName} where{\" \"}\n                {attr} was equal to {attrs}.\n              </Notification>,\n              { placement: \"bottomStart\" }\n            );\n          else\n            toaster.push(\n              <Notification header={\"Warning\"} closable type=\"warning\">\n                Found <Tag size=\"lg\">{deleteCount}</Tag> {tableName} where{\" \"}\n                {attr} was equal to {attrs}.\n              </Notification>,\n              { placement: \"bottomStart\" }\n            );\n        });\n    })\n    .finally(function () {\n      db.close();\n    });\n};\n\nexport const exportFilteredFromTable = (\n  dbName: string,\n  tableName: string,\n  filters: Filter[],\n  filename: string\n) => {\n  reciveAllFiltered(dbName, tableName, filters, (all: IndexableType[]) => {\n    const data = { [tableName]: all };\n    let contentType = \"application/json;charset=utf-8;\";\n    var a = document.createElement(\"a\");\n    a.download = filename;\n    a.href =\n      \"data:\" + contentType + \",\" + encodeURIComponent(JSON.stringify(data));\n    a.target = \"_blank\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  });\n};\n\nexport const deleteDatabase = (dbName: string) => {\n  const db = new Dexie(dbName);\n  db.delete();\n};\n"],"sourceRoot":""}