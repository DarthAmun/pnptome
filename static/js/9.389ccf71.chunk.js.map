{"version":3,"sources":["services/LocationPathService.tsx","components/generic/searchFields/SearchableStringField.tsx","components/generic/searchFields/SetStringField.tsx","components/generic/searchFields/CreatableSetStringField.tsx","components/generic/searchFields/CompletableStringField.tsx","components/generic/searchFields/SwitchBooleanField.tsx","components/generic/searchFields/CreatableSetNumberField.tsx","components/generic/searchFields/SetEntityField.tsx","components/generic/searchFields/FoundSwitchBooleanField.tsx","components/generic/searchFields/SetEntitiesField.tsx","components/generic/searchFields/SetAttributes.tsx","components/generic/EntitySearch.tsx","components/generic/EntityOverview.tsx"],"names":["getPathVariable","location","val","result","search","substring","split","forEach","part","includes","replace","unescape","SearchableStringField","type","entityName","applyFilter","removeFilterChange","useLocation","useState","setVal","sort","setSort","useEffect","filters","oldFilterString","JSON","parse","filter","fieldName","value","undefined","Whisper","trigger","placement","speaker","Tooltip","InputGroup","style","width","Addon","Input","onChange","Button","onClick","e","stopPropagation","SetStringField","systemDbName","useSelector","selectDBName","valList","setValList","length","reciveAttributeSelection","vals","map","text","label","TagPicker","placeholder","data","onClean","CreatableSetStringField","entities","newValList","Array","from","Set","entity","CompletableStringField","AutoComplete","minWidth","SwitchBooleanField","Wrapper","Checkbox","checked","onCheckboxClick","r","styled","div","CreatableSetNumberField","l1","l2","String","changeVal","SetEntityField","entityTableName","InputPicker","FoundSwitchBooleanField","config","setType","found","setFound","field","searchTerm","SetEntitiesField","SetAttributesField","EntitySearch","mainFilters","showSearchBar","openSearchBar","doSearch","history","useHistory","oldFilters","setOldFilters","setFilters","system","state","applyFilterChange","newFilters","f","newOldFilters","Drawer","open","onClose","Header","Title","Actions","step","push","pathname","stringify","appearance","reset","Body","SearchWrapper","Object","getOwnPropertyNames","getEntitySearchConfig","keyName","index","fieldEntry","findEntitySearchField","SetAttributes","linkToAttribute","EntityContainer","EntityOverview","allEntitysFromType","setAllEntitys","setEntities","pageEntities","setPageEntities","activePage","setActivePage","pageAmount","setPageAmount","setStep","loading","isLoading","reciveAll","results","load","oldStep","oldPage","newEntitiesShown","slice","Math","ceil","loadPage","changePage","page","newEntities","reciveAllFiltered","newStep","newPage","loadPageWithResults","EntityOptions","BreadCrumbIcon","ButtonGroup","size","o","marginRight","InputNumber","prefix","changeStep","max","min","scrollable","TagGroup","marginLeft","marginTop","Tag","makeFilterTag","Loader","center","content","PaginationWrapper","Pagination","prev","next","first","last","ellipsis","boundaryLinks","pages","maxButtons","onSelect","total","EntityTile","TopBar"],"mappings":"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","file":"static/js/9.389ccf71.chunk.js","sourcesContent":["export const getPathVariable = (location: any, val: string): string => {\n  let result: string = \"\";\n  let locationParts: string[] = location.search.substring(1).split(\"&\");\n  locationParts.forEach((part: string) => {\n    if (part.includes(val)) result = part.replace(`${val}=`, \"\");\n  });\n  return unescape(result);\n};\n","import { useState, useEffect } from \"react\";\nimport { FaLongArrowAltDown, FaLongArrowAltUp } from \"react-icons/fa\";\nimport { useLocation } from \"react-router\";\nimport { Whisper, Tooltip, InputGroup, Input } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SearchableStringFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SearchableStringField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SearchableStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string>(\"\");\n  const [sort, setSort] = useState<number>();\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n          if (filter.sort > 0) setSort(filter.sort as number);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val !== \"\") {\n      applyFilter(\n        { fieldName: type, value: val, sort: sort !== undefined ? sort : 0 },\n        type\n      );\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val, sort]);\n\n  return (\n    <Whisper\n      trigger=\"focus\"\n      placement={\"top\"}\n      speaker={\n        <Tooltip>\n          Part of the {entityName}'s {type}\n        </Tooltip>\n      }\n    >\n      <InputGroup style={{ width: \"300px\" }}>\n        <InputGroup.Addon>{type}</InputGroup.Addon>\n        <Input value={val} onChange={(val: any) => setVal(val)} />\n        <InputGroup.Button\n          onClick={(e) => {\n            e.stopPropagation();\n            if (sort !== undefined) setSort((sort + 1) % 3);\n            else setSort(1);\n          }}\n        >\n          {sort !== undefined ? (\n            <>\n              {sort === 0 ? <>-</> : <></>}\n              {sort === 1 ? <FaLongArrowAltDown /> : <></>}\n              {sort === 2 ? <FaLongArrowAltUp /> : <></>}\n            </>\n          ) : (\n            <>-</>\n          )}\n        </InputGroup.Button>\n      </InputGroup>\n    </Whisper>\n  );\n};\n\nexport default SearchableStringField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetStringFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetStringField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetStringFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      entityName,\n      type,\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetStringField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $CreatableSetStringFieldProps {\n  entities: any[];\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CreatableSetStringField = ({\n  entities,\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $CreatableSetStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>([]);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    }else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    const newValList: string[] = [\n      ...Array.from(new Set(entities.map((entity: any) => entity[type]))),\n    ].sort();\n    setValList(\n      newValList.map((text: string) => {\n        return { value: text, label: text };\n      })\n    );\n  }, [entities, type]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default CreatableSetStringField;\n","import { useState, useEffect } from \"react\";\nimport { FaLongArrowAltDown, FaLongArrowAltUp } from \"react-icons/fa\";\nimport { Whisper, Tooltip, InputGroup, AutoComplete } from \"rsuite\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\nimport Filter from \"../../../data/Filter\";\nimport { useLocation } from \"react-router\";\n\ninterface $CompletableStringFieldProps {\n  entities: any[];\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CompletableStringField = ({\n  entities,\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $CompletableStringFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<string>(\"\");\n  const [valList, setValList] = useState<{ value: string; label: string }[]>([]);\n  const [sort, setSort] = useState<number>();\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n          if (filter.sort > 0) setSort(filter.sort as number);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val !== \"\") {\n      applyFilter({ fieldName: type, value: val, sort: sort !== undefined ? sort : 0 }, type);\n    }else {\n      removeFilterChange(type);\n    }\n  }, [val, sort]);\n\n  useEffect(() => {\n    const newValList: string[] = [\n      ...Array.from(new Set(entities.map((entity: any) => entity[type]))),\n    ].sort();\n    setValList(\n      newValList.map((text: string) => {\n        return { value: text, label: text };\n      })\n    );\n  }, [entities, type]);\n\n  return (\n    <Whisper\n      trigger=\"focus\"\n      placement={\"top\"}\n      speaker={\n        <Tooltip>\n          Part of the {entityName}'s {type}\n        </Tooltip>\n      }\n    >\n      <InputGroup style={{ width: \"300px\" }}>\n        <InputGroup.Addon>{type}</InputGroup.Addon>\n        <AutoComplete\n          placeholder={`Select ${type}`}\n          data={valList}\n          value={val}\n          onChange={setVal}\n          style={{ width: \"min-content\", minWidth: \"150px\" }}\n        />\n        <InputGroup.Button\n          onClick={(e) => {\n            e.stopPropagation();\n            if (sort !== undefined) setSort((sort + 1) % 3);\n            else setSort(1);\n          }}\n        >\n          {sort !== undefined ? (\n            <>\n              {sort === 0 ? <>-</> : <></>}\n              {sort === 1 ? <FaLongArrowAltDown /> : <></>}\n              {sort === 2 ? <FaLongArrowAltUp /> : <></>}\n            </>\n          ) : (\n            <>-</>\n          )}\n        </InputGroup.Button>\n      </InputGroup>\n    </Whisper>\n  );\n};\n\nexport default CompletableStringField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SwitchBooleanFieldProps {\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SwitchBooleanField = ({\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $SwitchBooleanFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<boolean>(false);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as boolean);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  return (\n    <Wrapper>\n      <Checkbox checked={val} onCheckboxClick={() => setVal((r) => !r)}>\n        {type}\n      </Checkbox>\n    </Wrapper>\n  );\n};\n\nexport default SwitchBooleanField;\n\nconst Wrapper = styled.div`\n  width: min-content;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $CreatableSetNumberFieldProps {\n  entities: any[];\n  type: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst CreatableSetNumberField = ({\n  entities,\n  type,\n  applyFilter,\n  removeFilterChange,\n}: $CreatableSetNumberFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<number[]>([]);\n  const [valList, setValList] = useState<{ value: number; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as number[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    const newValList: number[] = [\n      ...Array.from(\n        new Set(entities.map((entity: any) => +entity[type]))\n      ),\n    ].sort((l1, l2) => l1 - l2);\n    setValList(\n      newValList.map((text: number) => {\n        return { value: text, label: String(text) };\n      })\n    );\n  }, [entities, type]);\n\n  const changeVal = (vals: string[]) => {\n    if (vals) {\n      setVal(vals.map((val: string) => +val));\n    } else {\n      setVal([]);\n    }\n  };\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onClean={() => setVal([])}\n      onChange={(vals: string[]) => changeVal(vals)}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default CreatableSetNumberField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { InputPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetEntityFieldProps {\n  type: string;\n  entityName: string;\n  entityTableName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetEntityField = ({\n  type,\n  entityName,\n  entityTableName,\n  applyFilter,\n  removeFilterChange,\n}: $SetEntityFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string>(\"\");\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(systemDbName, entityTableName, \"name\", (vals: IndexableType[]) => {\n      setValList(\n        vals.map((text: IndexableType) => {\n          const newText: string = text as string;\n          return { value: newText, label: newText };\n        })\n      );\n    });\n  }, [type, entityName]);\n\n  return (\n    <InputPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal(\"\")}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetEntityField;\n","import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { Checkbox } from \"rsuite\";\nimport styled from \"styled-components\";\nimport ConfigPart from \"../../../data/ConfigPart\";\nimport Filter from \"../../../data/Filter\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $FoundSwitchBooleanFieldProps {\n  config: ConfigPart;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst FoundSwitchBooleanField = ({\n  config,\n  applyFilter,\n  removeFilterChange,\n}: $FoundSwitchBooleanFieldProps) => {\n  let location = useLocation();\n  const [val, setVal] = useState<boolean>(false);\n  const [type, setType] = useState<string>(\"\");\n  const [found, setFound] = useState<string>(\"\");\n\n  useEffect(() => {\n    setType(config.found?.field || \"\");\n    setFound(config.found?.searchTerm || \"\");\n\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === config.found?.field) {\n          setVal(true);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val) {\n      applyFilter({ fieldName: type, value: found, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  return (\n    <Wrapper>\n      <Checkbox checked={val} onCheckboxClick={() => setVal((r) => !r)}>\n        {found}\n      </Checkbox>\n    </Wrapper>\n  );\n};\n\nexport default FoundSwitchBooleanField;\n\nconst Wrapper = styled.div`\n  width: min-content;\n`;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetEntitiesFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetEntitiesField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetEntitiesFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      type,\n      \"name\",\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetEntitiesField;\n","import { IndexableType } from \"dexie\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { TagPicker } from \"rsuite\";\nimport Filter from \"../../../data/Filter\";\nimport { selectDBName } from \"../../../database/SystemReducer\";\nimport { reciveAttributeSelection } from \"../../../services/DatabaseService\";\nimport { getPathVariable } from \"../../../services/LocationPathService\";\n\ninterface $SetAttributesFieldProps {\n  type: string;\n  entityName: string;\n  applyFilter: (filters: Filter, type: any) => void;\n  removeFilterChange: (type: any) => void;\n}\n\nconst SetAttributesField = ({\n  type,\n  entityName,\n  applyFilter,\n  removeFilterChange,\n}: $SetAttributesFieldProps) => {\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [val, setVal] = useState<string[]>([]);\n  const [valList, setValList] = useState<{ value: string; label: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const oldFilters: Filter[] = JSON.parse(oldFilterString);\n      oldFilters.forEach((filter: Filter) => {\n        if (filter.fieldName === type) {\n          setVal(filter.value as string[]);\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (val.length > 0) {\n      applyFilter({ fieldName: type, value: val, sort: 0 }, type);\n    } else {\n      removeFilterChange(type);\n    }\n  }, [val]);\n\n  useEffect(() => {\n    reciveAttributeSelection(\n      systemDbName,\n      entityName,\n      type,\n      (vals: IndexableType[]) => {\n        setValList(\n          vals.map((text: IndexableType) => {\n            const newText: string = text as string;\n            return { value: newText, label: newText };\n          })\n        );\n      }\n    );\n  }, [type, entityName]);\n\n  return (\n    <TagPicker\n      placeholder={`Select ${type}`}\n      data={valList}\n      trigger={\"Enter\"}\n      value={val}\n      onChange={setVal}\n      onClean={() => setVal([])}\n      style={{ width: \"300px\" }}\n    />\n  );\n};\n\nexport default SetAttributesField;\n","import { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Filter from \"../../data/Filter\";\nimport styled from \"styled-components\";\nimport { Drawer, Button } from \"rsuite\";\nimport { getPathVariable } from \"../../services/LocationPathService\";\nimport SearchableStringField from \"./searchFields/SearchableStringField\";\nimport SetStringField from \"./searchFields/SetStringField\";\nimport CreatableSetStringField from \"./searchFields/CreatableSetStringField\";\nimport CompletableStringField from \"./searchFields/CompletableStringField\";\nimport SwitchBooleanField from \"./searchFields/SwitchBooleanField\";\nimport CreatableSetNumberField from \"./searchFields/CreatableSetNumberField\";\nimport SetEntityField from \"./searchFields/SetEntityField\";\nimport FoundSwitchBooleanField from \"./searchFields/FoundSwitchBooleanField\";\nimport {\n  findEntitySearchField,\n  getEntitySearchConfig,\n} from \"../../services/SystemService\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../database/Store\";\nimport SetEntitiesField from \"./searchFields/SetEntitiesField\";\nimport ConfigPart from \"../../data/ConfigPart\";\nimport SetAttributesField from \"./searchFields/SetAttributes\";\n\ninterface $SearchProps {\n  entityName: string;\n  entities: any[];\n  filters: Filter[];\n  showSearchBar: boolean;\n  openSearchBar: (value: boolean) => void;\n  doSearch: (filters: Filter[]) => void;\n}\n\nconst EntitySearch = ({\n  entityName,\n  entities,\n  filters: mainFilters,\n  showSearchBar,\n  openSearchBar,\n  doSearch,\n}: $SearchProps) => {\n  let history = useHistory();\n  let location = useLocation();\n  const [oldFilters, setOldFilters] = useState<Filter[]>(mainFilters);\n  const [filters, setFilters] = useState<Filter[]>([]);\n  const system = useSelector((state: RootState) => state.system);\n\n  const applyFilterChange = (filter: Filter, type: any) => {\n    setFilters((newFilters: Filter[]) => {\n      if (newFilters.filter((f) => f.fieldName === type).length === 1)\n        newFilters = newFilters.map((f) => (f.fieldName === type ? filter : f));\n      else newFilters = [...newFilters, filter];\n      return newFilters;\n    });\n  };\n\n  const removeFilterChange = (type: any) => {\n    setFilters((newFilters: Filter[]) => {\n      return newFilters.filter((f) => f.fieldName !== type);\n    });\n  };\n\n  useEffect(() => {\n    doSearch(oldFilters);\n  }, [oldFilters]);\n\n  useEffect(() => {\n    let filters: string = getPathVariable(location, \"filter\");\n    const oldFilterString: string = unescape(filters);\n    if (oldFilterString !== \"\") {\n      const newOldFilters: Filter[] = JSON.parse(oldFilterString);\n      setOldFilters(newOldFilters);\n    }\n  }, []);\n\n  const search = () => {\n    let newFilters: Filter[] = [...filters];\n    if (newFilters.length > 0) {\n      if (location.search !== \"\") {\n        let step: string = \"\";\n        const locationParts: string[] = location.search.substring(1).split(\"&\");\n        locationParts.forEach((part: string) => {\n          if (part.includes(\"step\")) step = part;\n        });\n        history.push({\n          pathname: `/${entityName}-overview`,\n          search: `?filter=${JSON.stringify(newFilters)}&${\n            step !== \"\" ? `${step}&` : \"\"\n          }page=1`,\n        });\n      } else {\n        history.push({\n          pathname: `/${entityName}-overview`,\n          search: `?filter=${JSON.stringify(newFilters)}`,\n        });\n      }\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n      });\n    }\n    doSearch(newFilters);\n  };\n\n  const reset = () => {\n    setFilters([]);\n    setOldFilters([]);\n    let step: string = \"\";\n    const locationParts: string[] = location.search.substring(1).split(\"&\");\n    locationParts.forEach((part: string) => {\n      if (part.includes(\"step\")) step = part;\n    });\n    history.push({\n      pathname: `/${entityName}-overview`,\n      search: `?${step !== \"\" ? `${step}&` : \"\"}page=1`,\n    });\n  };\n\n  return (\n    <Drawer\n      open={showSearchBar}\n      onClose={() => openSearchBar(false)}\n      placement={\"top\"}\n    >\n      <Drawer.Header>\n        <Drawer.Title>Search</Drawer.Title>\n        <Drawer.Actions>\n          <Button\n            onClick={() => {\n              search();\n              openSearchBar(false);\n            }}\n            appearance=\"primary\"\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => {\n              reset();\n              openSearchBar(false);\n            }}\n            appearance=\"ghost\"\n          >\n            Reset\n          </Button>\n        </Drawer.Actions>\n      </Drawer.Header>\n      <Drawer.Body>\n        <SearchWrapper>\n          {Object.getOwnPropertyNames(\n            getEntitySearchConfig(system, entityName)\n          ).map((keyName: any, index: number) => {\n            const fieldEntry: ConfigPart = findEntitySearchField(\n              system,\n              entityName,\n              keyName\n            );\n            switch (true) {\n              case fieldEntry.type === \"SearchableText\":\n              case fieldEntry.type === \"SearchableString\":\n                return (\n                  <SearchableStringField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetString\":\n                return (\n                  <SetStringField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetAttributes\":\n                return (\n                  <SetAttributesField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetEntities\":\n                return (\n                  <SetEntitiesField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SetEntity\":\n                return (\n                  <SetEntityField\n                    key={index}\n                    entityName={entityName}\n                    type={keyName}\n                    entityTableName={fieldEntry.linkToAttribute || \"\"}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetString\":\n                return (\n                  <CreatableSetStringField\n                    key={index}\n                    entities={entities}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CompletableString\":\n                return (\n                  <CompletableStringField\n                    key={index}\n                    entities={entities}\n                    entityName={entityName}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"SwitchBoolean\":\n                return (\n                  <SwitchBooleanField\n                    key={index}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"CreatableSetNumber\":\n                return (\n                  <CreatableSetNumberField\n                    key={index}\n                    entities={entities}\n                    type={keyName}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              case fieldEntry.type === \"FoundString\":\n                return (\n                  <FoundSwitchBooleanField\n                    config={fieldEntry}\n                    key={index}\n                    applyFilter={applyFilterChange}\n                    removeFilterChange={removeFilterChange}\n                  />\n                );\n              default:\n                return <></>;\n            }\n          })}\n        </SearchWrapper>\n      </Drawer.Body>\n    </Drawer>\n  );\n};\n\nexport default EntitySearch;\n\nconst SearchWrapper = styled.div`\n  height: auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n  gap: 10px;\n`;\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  Button,\n  ButtonGroup,\n  InputNumber,\n  Loader,\n  Pagination,\n  Tag,\n  TagGroup,\n} from \"rsuite\";\nimport { reciveAll, reciveAllFiltered } from \"../../services/DatabaseService\";\nimport { FaPlusCircle, FaSearch } from \"react-icons/fa\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { getPathVariable } from \"../../services/LocationPathService\";\nimport { TopBar } from \"./details/EntityDetailWrapper\";\nimport EntitySearch from \"./EntitySearch\";\nimport Filter from \"../../data/Filter\";\nimport BreadCrumbIcon from \"../general/BreadCrumbIcon\";\nimport EntityTile from \"./EntityTile\";\nimport IEntity from \"../../data/IEntity\";\nimport { useSelector } from \"react-redux\";\nimport { selectDBName } from \"../../database/SystemReducer\";\n\ninterface $OverviewProps {\n  entityName: string;\n}\n\nconst EntityOverview = ({ entityName }: $OverviewProps) => {\n  let history = useHistory();\n  let location = useLocation();\n  const systemDbName = useSelector(selectDBName);\n  const [allEntitysFromType, setAllEntitys] = useState<IEntity[]>([]);\n  const [entities, setEntities] = useState<IEntity[]>([]);\n  const [pageEntities, setPageEntities] = useState<IEntity[]>([]);\n  const [filters, setFilters] = useState<Filter[]>([]);\n\n  const [activePage, setActivePage] = useState<number>(1);\n  const [pageAmount, setPageAmount] = useState<number>(1);\n  const [step, setStep] = useState<number>(10);\n\n  const [showSearchBar, openSearchBar] = useState<boolean>(false);\n  const [loading, isLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (entityName !== \"\")\n      reciveAll(systemDbName, entityName, (results: any[]) => {\n        setAllEntitys(results);\n      });\n  }, [entityName]);\n\n  const loadPage = () => {\n    const { oldPage, oldStep, oldFilters } = load();\n    const newEntitiesShown = entities.slice(\n      (oldPage - 1) * oldStep,\n      oldPage * oldStep\n    );\n    setActivePage(oldPage);\n    setStep(oldStep);\n    setPageAmount(Math.ceil(entities.length / oldStep));\n    setPageEntities(newEntitiesShown);\n    setFilters(oldFilters);\n  };\n  const loadPageWithResults = (\n    newStep: number,\n    newPage: number,\n    newEntities: any[]\n  ) => {\n    const newEntitiesShown = newEntities.slice(\n      (newPage - 1) * newStep,\n      newPage * newStep\n    );\n    setActivePage(newPage);\n    setStep(newStep);\n    setPageAmount(Math.ceil(newEntities.length / newStep));\n    setPageEntities(newEntitiesShown);\n  };\n\n  const load = (): { oldStep: number; oldPage: number; oldFilters: any[] } => {\n    let oldStep: number = +getPathVariable(location, \"step\");\n    let oldPage: number = +getPathVariable(location, \"page\");\n    let oldFilters: string = getPathVariable(location, \"filter\");\n\n    if (oldPage < 1) oldPage = 1;\n    if (oldStep < 10) oldStep = 10;\n\n    if (oldFilters !== \"\") {\n      const newFilter: any[] = JSON.parse(oldFilters);\n      return { oldStep: oldStep, oldPage: oldPage, oldFilters: newFilter };\n    } else {\n      return { oldStep: oldStep, oldPage: oldPage, oldFilters: [] };\n    }\n  };\n\n  useEffect(() => {\n    loadPage();\n  }, [location]);\n\n  const search = (filters: Filter[]) => {\n    isLoading(true);\n    reciveAllFiltered(\n      systemDbName,\n      entityName,\n      filters,\n      (results: any[]) => {\n        if (results.length <= 0) {\n          openSearchBar(true);\n        }\n        setEntities(results);\n        setFilters(filters);\n        loadPageWithResults(10, 1, results);\n        isLoading(false);\n      }\n    );\n  };\n\n  const changePage = (page: number) => {\n    const newEntities = entities.slice((page - 1) * step, page * step);\n    setPageEntities(newEntities);\n    setActivePage(page);\n    if (location.search.includes(\"filter\")) {\n      let filters: string = \"\";\n      let locationParts: string[] = location.search.substring(1).split(\"&\");\n      locationParts.forEach((part: string) => {\n        if (part.includes(\"filter\")) filters = part;\n      });\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?${filters}&page=${page}&step=${step}`,\n      });\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?page=${page}&step=${step}`,\n      });\n    }\n  };\n\n  const changeStep = (step: number) => {\n    const newEntities = entities.slice((1 - 1) * step, 1 * step);\n    setPageEntities(newEntities);\n    setStep(step);\n    if (location.search.includes(\"filter\")) {\n      let filters: string = \"\";\n      let locationParts: string[] = location.search.substring(1).split(\"&\");\n      locationParts.forEach((part: string) => {\n        if (part.includes(\"filter\")) filters = part;\n      });\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?${filters}&page=1&step=${step}`,\n      });\n    } else {\n      history.push({\n        pathname: `/${entityName}-overview`,\n        search: `?page=1&step=${step}`,\n      });\n    }\n  };\n\n  const makeNew = () => {\n    history.push(`/${entityName}-builder`);\n  };\n\n  const makeFilterTag = (filter: Filter, index: number) => {\n    if (filter.value instanceof Array) {\n      let length = filter.value.length;\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}:{\" \"}\n          {filter.value.map((val: any, index: number) =>\n            index + 1 === length ? val : val + \" or \"\n          )}\n        </Tag>\n      );\n    } else if (typeof filter.value === \"boolean\") {\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}: {filter.value ? \"true\" : \"false\"}\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag size=\"lg\" key={index}>\n          {filter.fieldName}: \"{filter.value}\"\n        </Tag>\n      );\n    }\n  };\n\n  return (\n    <>\n      <EntitySearch\n        entityName={entityName}\n        entities={allEntitysFromType}\n        filters={filters}\n        showSearchBar={showSearchBar}\n        openSearchBar={openSearchBar}\n        doSearch={search}\n      />\n\n      <EntityOptions>\n        <BreadCrumbIcon />\n        <ButtonGroup>\n          <Button onClick={() => makeNew()} size=\"lg\">\n            <FaPlusCircle />\n          </Button>\n          <Button\n            onClick={() => openSearchBar((o) => !o)}\n            style={{ marginRight: \"5px\" }}\n            size=\"lg\"\n          >\n            <FaSearch />\n          </Button>\n        </ButtonGroup>\n        <InputNumber\n          size=\"lg\"\n          prefix=\"Step\"\n          value={step}\n          onChange={(value: any) => changeStep(value)}\n          step={10}\n          max={100}\n          min={10}\n          scrollable={true}\n          style={{ width: 130 }}\n        />\n        <TagGroup style={{ marginLeft: \"5px\", marginTop: \"-5px\" }}>\n          {filters.map((filter: Filter, index: number) =>\n            makeFilterTag(filter, index)\n          )}\n        </TagGroup>\n      </EntityOptions>\n\n      {loading && <Loader center content=\"Loading...\" />}\n      {!loading && entities.length > 0 && (\n        <>\n          <PaginationWrapper>\n            <Pagination\n              size=\"lg\"\n              prev={true}\n              next={true}\n              first={true}\n              last={true}\n              ellipsis={true}\n              boundaryLinks={true}\n              pages={pageAmount}\n              maxButtons={5}\n              activePage={activePage}\n              onSelect={changePage}\n              total={0}\n            />\n          </PaginationWrapper>\n\n          <EntityContainer>\n            {entityName !== \"\" &&\n              pageEntities.length > 0 &&\n              pageEntities!.map((entity: IEntity, index: number) => {\n                return (\n                  <EntityTile\n                    key={index}\n                    entity={entity}\n                    entityName={entityName}\n                  />\n                );\n              })}\n          </EntityContainer>\n\n          <PaginationWrapper>\n            <Pagination\n              size=\"lg\"\n              prev={true}\n              next={true}\n              first={true}\n              last={true}\n              ellipsis={true}\n              boundaryLinks={true}\n              pages={pageAmount}\n              maxButtons={5}\n              activePage={activePage}\n              onSelect={changePage}\n              total={0}\n            />\n          </PaginationWrapper>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EntityOverview;\n\nconst EntityContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n`;\n\nconst PaginationWrapper = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  justify-content: center;\n  padding: 5px;\n`;\n\nconst EntityOptions = styled(TopBar)`\n  display: flex;\n  flex-wrap: wrap;\n`;\n"],"sourceRoot":""}